[
  {
    "TempId": 11315,
    "AUT": "",
    "Description": "Validate Pay and Bind With Split Bill",
    "StatusKey": "NEW",
    "isMobile": false,
    "TestCaseType": 1,
    "IsExecutable": true,
    "uri": "",
    "DataSheet": {
      "TestCase": null,
      "Parameters": [
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "p77190",
              "ParameterId": 951663,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_LoginUsername",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "https://citupxyvip01.aaa-acg.net/aba/agentbrowser/#/CustomerSearch",
              "ParameterId": 951664,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_LoginURL",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "password123",
              "ParameterId": 951665,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_LoginPassword",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Single",
              "ParameterId": 951666,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_SingleOrMultiplePolicies",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "4692625853",
              "ParameterId": 951667,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_AccountNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Married",
              "ParameterId": 951668,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfo_MaritalStatus",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "10/11/1948",
              "ParameterId": 951669,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfo_DOB",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951670,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfo_YesorNoDocsConsent",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Yes",
              "ParameterId": 951671,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfo_YesorNoPaperlessComm",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Yes",
              "ParameterId": 951672,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfo_YesorNoFirstCompanyForInsurance",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Yes",
              "ParameterId": 951673,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfo_YesorNoAAAMembership",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951674,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfo_YesorNoPreviousAddress",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Yes",
              "ParameterId": 951675,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_LaminatedWindows",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Yes",
              "ParameterId": 951676,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_StromShutters",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951677,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DwellingBeLeftUnoccupied",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Yes",
              "ParameterId": 951678,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_NameInsuredOriginalOwner",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951679,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_SmokerResidingInHousehold",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "2020",
              "ParameterId": 951680,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PurchaseDate",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "2",
              "ParameterId": 951681,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_NoOfOccupants",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Primary",
              "ParameterId": 951682,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ResidenceType",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "2",
              "ParameterId": 951683,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_UnitFloorNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Other",
              "ParameterId": 951684,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_SecondaryHeating",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Electric",
              "ParameterId": 951685,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PrimaryHeating",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Frame",
              "ParameterId": 951686,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ConstructionType",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "1",
              "ParameterId": 951687,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_CompletedYears",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "21st Century Assurance Company",
              "ParameterId": 951688,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_CarrierName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "01/10/2023",
              "ParameterId": 951689,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ExpirationDate",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951690,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PriorHomeInsurance",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "03/03/2022",
              "ParameterId": 951691,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_TenureDate",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Condominium (HO6)",
              "ParameterId": 951692,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyTypeSelection",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Single Point Detection",
              "ParameterId": 951693,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_WaterDetectionDevice",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Centralized",
              "ParameterId": 951694,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_BurglarAlarm",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951695,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_SmokeAlarm",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951696,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_FireExtinguisher",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Localized",
              "ParameterId": 951697,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_FireAlarm",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Yes",
              "ParameterId": 951698,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_Deadbolt",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951699,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_SprinklerSystem",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951700,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_1000FeetFromFireHydrant",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "TENNESSEE RIDGE FS",
              "ParameterId": 951701,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_RespondingFireDepartment",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "1",
              "ParameterId": 951702,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_NoOfDogs",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951703,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_Trampoline",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951704,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DivingBoards",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951705,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PoolSlide",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951706,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_Pool",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951707,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_AttachedPoolEnclosure",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951708,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_SecondaryWaterResistance",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Male",
              "ParameterId": 951709,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_Gender",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Classic",
              "ParameterId": 951710,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MembershipCoverageType",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "4111111111111111",
              "ParameterId": 951711,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_CreditCardNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "SAMUEL AGEMY",
              "ParameterId": 951712,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_NameInsured",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "PAY1/MOR1",
              "ParameterId": 951713,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PaymentType",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No-Opt Out",
              "ParameterId": 951714,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_InsuranceScoreOrdered",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "720 King St",
              "ParameterId": 951715,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_SelectStandardizeAddress",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "test@aaa.acg.com",
              "ParameterId": 951716,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_Email",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "666-66-9156",
              "ParameterId": 951717,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_SSN",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "32204",
              "ParameterId": 951718,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ZipCode",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Florida",
              "ParameterId": 951719,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_State",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Jacksonville",
              "ParameterId": 951720,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_City",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "StreetEGC",
              "ParameterId": 951721,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_StreetName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "2351",
              "ParameterId": 951722,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_HouseNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "201-123-1234",
              "ParameterId": 951723,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MobilePhone",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "LNTestDDDK",
              "ParameterId": 951724,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_LastName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "FNTestDDDJ",
              "ParameterId": 951725,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_FirtsName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "201-123-1234",
              "ParameterId": 951726,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_HomePhone",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "12/01/2025",
              "ParameterId": 951727,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_BQ_EffectiveDate",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "FL",
              "ParameterId": 951728,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_BQ_State",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "AUT",
              "ParameterId": 951729,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_BQ_Product",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Graduate Work or Degree",
              "ParameterId": 951730,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfo_EducationLevel",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "PKG732009260",
              "ParameterId": 951731,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "020-0151-53298",
              "ParameterId": 951732,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ReceiptNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "QTE534019451",
              "ParameterId": 951733,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicySubmissionID",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "2%",
              "ParameterId": 951734,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_TropicalCyclone",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "7,500",
              "ParameterId": 951735,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_WindStromAndHail",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "5,000",
              "ParameterId": 951736,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_Peril",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "CC (Credit Card)",
              "ParameterId": 951737,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PaymentMethod",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "09/23/2023",
              "ParameterId": 951738,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_EffectiveDate",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "A540012888840",
              "ParameterId": 951739,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversLicenseNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Continuous for prior 6 months or more",
              "ParameterId": 951740,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversPriorAutoInsurance",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Employed",
              "ParameterId": 951741,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversEmpStatus",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Information Technology",
              "ParameterId": 951742,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_Industry",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Other",
              "ParameterId": 951743,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_Occupation",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Graduate Work or Degree",
              "ParameterId": 951744,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_EducationLevel",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Primary",
              "ParameterId": 951745,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversWorklossCoordination",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 951746,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_AAADriveParticipation",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "250",
              "ParameterId": 951747,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversBodilyInjuryLimit",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "3",
              "ParameterId": 951748,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversFullYearWithPriorCarrier",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "FNTest",
              "ParameterId": 951749,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_AssignDriver",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Regular AND Private Passenger AND No AND VIN AND 1G1ZK57B98F286616 AND Yes AND Yes AND Passive AND No AND Pleasure AND 10000 AND Yes AND Owned AND No AND No existing damage to the vehicle AND FNTestDDDJ LNTestDDDK AND Yes AND FL AND No",
              "ParameterId": 951750,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VechicleDetails",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "12031011600",
              "ParameterId": 951751,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_CensusTrack",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "10%",
              "ParameterId": 951752,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_Hurricane",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Flat",
              "ParameterId": 951753,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_RoofShape",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "2",
              "ParameterId": 951754,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_NoOfUnits",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "70296176",
              "ParameterId": 951755,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ProducerCode",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "4111111111111111",
              "ParameterId": 951756,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_CreditCard",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "FNTestDEFK",
              "ParameterId": 951757,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversFirstName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "LNTestDEGB",
              "ParameterId": 951758,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversLastName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Regular AND Private Passenger AND No AND VIN AND KMHGN4JE2FU042068 AND Yes AND Yes AND Passive AND No AND Pleasure AND 10000 AND Yes AND Owned AND No AND No existing damage to the vehicle AND FNTest AND Yes AND FL AND No",
              "ParameterId": 951759,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehicleDetails",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "The Auto Club Group AND 70296176",
              "ParameterId": 951760,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_OrgProd",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversGender",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "Iteration",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 11315,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "Skip",
          "Created": null,
          "Modified": null
        }
      ],
      "Name": "Create Home Policy for_GA Home Type_Home HO3 Payment type_EFT12",
      "Created": null,
      "Modified": null
    },
    "Scenario": null,
    "Authentication": null,
    "TestSteps": [
      {
        "TempId": 2901024,
        "StepNumber": 1,
        "ActionId": 55,
        "ComponentId": 9966,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "CustomerDetails",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901024,
            "ComponentId": 9966,
            "ComponentStepId": 131520,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901024,
            "ComponentId": 9966,
            "ComponentStepId": 131521,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901024,
            "ComponentId": 9966,
            "ComponentStepId": 131522,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901024,
            "ComponentId": 9966,
            "ComponentStepId": 131523,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901046,
        "StepNumber": 2,
        "ActionId": 55,
        "ComponentId": 9704,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Login_to_Agent_Browser_With_NoCondition",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901046,
            "ComponentId": 9704,
            "ComponentStepId": 128638,
            "TestCase": null,
            "Value": "https://qa08pxyvip01.aaa-acg.net/aba/agentbrowser/#/CustomerSearch",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901046,
            "ComponentId": 9704,
            "ComponentStepId": 128639,
            "TestCase": null,
            "Value": "GDT_GWEnv_UW_Username",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901046,
            "ComponentId": 9704,
            "ComponentStepId": 128640,
            "TestCase": null,
            "Value": "GDT_GWEnv_Password",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901046,
            "ComponentId": 9704,
            "ComponentStepId": 128641,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901043,
        "StepNumber": 3,
        "ActionId": 55,
        "ComponentId": 9351,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "ClickBeginQuote_bkp",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901039,
        "StepNumber": 4,
        "ActionId": 55,
        "ComponentId": 9522,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "EnterAccInformation",
        "Locator": null,
        "Value": "",
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122338,
            "TestCase": null,
            "Value": "DT_FirtsName",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122339,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122340,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122341,
            "TestCase": null,
            "Value": "DT_HomePhone",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122342,
            "TestCase": null,
            "Value": "DT_MobilePhone",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122343,
            "TestCase": null,
            "Value": "DT_Email",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122345,
            "TestCase": null,
            "Value": "DT_StreetName",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122346,
            "TestCase": null,
            "Value": "DT_City",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122347,
            "TestCase": null,
            "Value": "DT_State",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122348,
            "TestCase": null,
            "Value": "DT_ZipCode",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122349,
            "TestCase": null,
            "Value": "DT_SSN",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122350,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122351,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122352,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122353,
            "TestCase": null,
            "Value": "DT_Gender",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122354,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122355,
            "TestCase": null,
            "Value": "numeric:6",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122356,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122357,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122358,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122359,
            "TestCase": null,
            "Value": "DT_CensusTrack",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122360,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122361,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122362,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122363,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122364,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122365,
            "TestCase": null,
            "Value": "DT_City",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122366,
            "TestCase": null,
            "Value": "DT_ProducerCode",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122367,
            "TestCase": null,
            "Value": "The Auto Club Group",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901039,
            "ComponentId": 9522,
            "ComponentStepId": 122368,
            "TestCase": null,
            "Value": "DT_OrgProd",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901055,
        "StepNumber": 5,
        "ActionId": 55,
        "ComponentId": 9401,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Policy_Menu",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901055,
            "ComponentId": 9401,
            "ComponentStepId": 127860,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901055,
            "ComponentId": 9401,
            "ComponentStepId": 127861,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901054,
        "StepNumber": 6,
        "ActionId": 55,
        "ComponentId": 9442,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "StartPolicySubmission_Home",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901054,
            "ComponentId": 9442,
            "ComponentStepId": 128285,
            "TestCase": null,
            "Value": "DT_ProducerCode",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901054,
            "ComponentId": 9442,
            "ComponentStepId": 128291,
            "TestCase": null,
            "Value": "DT_SingleOrMultiplePolicies",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901054,
            "ComponentId": 9442,
            "ComponentStepId": 128292,
            "TestCase": null,
            "Value": "10",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901054,
            "ComponentId": 9442,
            "ComponentStepId": 128293,
            "TestCase": null,
            "Value": "DT_AccountNumber",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901054,
            "ComponentId": 9442,
            "ComponentStepId": 128294,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901054,
            "ComponentId": 9442,
            "ComponentStepId": 128295,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901054,
            "ComponentId": 9442,
            "ComponentStepId": 128296,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901054,
            "ComponentId": 9442,
            "ComponentStepId": 128297,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901053,
        "StepNumber": 7,
        "ActionId": 55,
        "ComponentId": 9414,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Qualification_Home",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901053,
            "ComponentId": 9414,
            "ComponentStepId": 127995,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901053,
            "ComponentId": 9414,
            "ComponentStepId": 127996,
            "TestCase": null,
            "Value": "Policy Info",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901053,
            "ComponentId": 9414,
            "ComponentStepId": 127997,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901053,
            "ComponentId": 9414,
            "ComponentStepId": 127998,
            "TestCase": null,
            "Value": "DT_PolicyTypeSelection",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901052,
        "StepNumber": 8,
        "ActionId": 55,
        "ComponentId": 9398,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Policy_Info_Home",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127760,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127773,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127785,
            "TestCase": null,
            "Value": "4290146717860409",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127786,
            "TestCase": null,
            "Value": "2022",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127793,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127794,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127795,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127796,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127797,
            "TestCase": null,
            "Value": "DT_PolicyInfo_YesorNoPreviousAddress",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127798,
            "TestCase": null,
            "Value": "DT_PolicyInfo_YesorNoAAAMembership",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127799,
            "TestCase": null,
            "Value": "DT_PolicyInfo_YesorNoPaperlessComm",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127800,
            "TestCase": null,
            "Value": "DT_PolicyInfo_YesorNoDocsConsent",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127801,
            "TestCase": null,
            "Value": "DT_PolicyInfo_MaritalStatus",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127802,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127803,
            "TestCase": null,
            "Value": "2",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127804,
            "TestCase": null,
            "Value": "DT_PolicyInfo_DOB",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901052,
            "ComponentId": 9398,
            "ComponentStepId": 127805,
            "TestCase": null,
            "Value": "DT_PolicyInfo_YesorNoFirstCompanyForInsurance",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901038,
        "StepNumber": 9,
        "ActionId": 55,
        "ComponentId": 9331,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Add_and_Reconcile_Driver",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901038,
            "ComponentId": 9331,
            "ComponentStepId": 126344,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901041,
        "StepNumber": 10,
        "ActionId": 55,
        "ComponentId": 9469,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Add New Driver",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901041,
            "ComponentId": 9469,
            "ComponentStepId": 121832,
            "TestCase": null,
            "Value": "8",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901041,
            "ComponentId": 9469,
            "ComponentStepId": 121838,
            "TestCase": null,
            "Value": "Drivers",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901041,
            "ComponentId": 9469,
            "ComponentStepId": 121839,
            "TestCase": null,
            "Value": "DT_DriversLicenseNumber",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901042,
        "StepNumber": 11,
        "ActionId": 55,
        "ComponentId": 9517,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Add_AdditionalDetails",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122207,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122208,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122209,
            "TestCase": null,
            "Value": "DT_AAADriveParticipation",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122211,
            "TestCase": null,
            "Value": "DT_DriversBodilyInjuryLimit",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122212,
            "TestCase": null,
            "Value": "DT_DriversFullYearWithPriorCarrier",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122215,
            "TestCase": null,
            "Value": "3",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122216,
            "TestCase": null,
            "Value": "DT_DriversEmpStatus",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122217,
            "TestCase": null,
            "Value": "DT_ExpirationDate",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122218,
            "TestCase": null,
            "Value": "DT_Industry",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122219,
            "TestCase": null,
            "Value": "DT_Occupation",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122220,
            "TestCase": null,
            "Value": "DT_EducationLevel",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122222,
            "TestCase": null,
            "Value": "DT_AssignDriver",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122223,
            "TestCase": null,
            "Value": "DT_DriversWorklossCoordination",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122224,
            "TestCase": null,
            "Value": "executenextSteps:5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122225,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122226,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122227,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122228,
            "TestCase": null,
            "Value": "DT_DriversPriorAutoInsurance",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122229,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122231,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122232,
            "TestCase": null,
            "Value": "6",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901042,
            "ComponentId": 9517,
            "ComponentStepId": 122233,
            "TestCase": null,
            "Value": "DT_CarrierName",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901040,
        "StepNumber": 12,
        "ActionId": 55,
        "ComponentId": 9341,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "AddAdditionalVehicles",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901040,
            "ComponentId": 9341,
            "ComponentStepId": 126582,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901040,
            "ComponentId": 9341,
            "ComponentStepId": 126583,
            "TestCase": null,
            "Value": "3",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901040,
            "ComponentId": 9341,
            "ComponentStepId": 126584,
            "TestCase": null,
            "Value": "DT_VechicleDetails",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901056,
        "StepNumber": 13,
        "ActionId": 55,
        "ComponentId": 9407,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Prior_Insurance",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901056,
            "ComponentId": 9407,
            "ComponentStepId": 127884,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901056,
            "ComponentId": 9407,
            "ComponentStepId": 127885,
            "TestCase": null,
            "Value": "DT_PriorHomeInsurance",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901050,
        "StepNumber": 14,
        "ActionId": 55,
        "ComponentId": 9360,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Dwelling_Home",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126855,
            "TestCase": null,
            "Value": "DT_ResidenceType",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126856,
            "TestCase": null,
            "Value": "DT_SmokerResidingInHousehold",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126858,
            "TestCase": null,
            "Value": "DT_SprinklerSystem",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126859,
            "TestCase": null,
            "Value": "DT_Deadbolt",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126860,
            "TestCase": null,
            "Value": "DT_FireAlarm",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126861,
            "TestCase": null,
            "Value": "DT_FireExtinguisher",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126862,
            "TestCase": null,
            "Value": "DT_SmokeAlarm",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126863,
            "TestCase": null,
            "Value": "DT_BurglarAlarm",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126866,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126870,
            "TestCase": null,
            "Value": "DT_DwellingBeLeftUnoccupied",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126871,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126883,
            "TestCase": null,
            "Value": "1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126888,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901050,
            "ComponentId": 9360,
            "ComponentStepId": 126889,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901032,
        "StepNumber": 15,
        "ActionId": 55,
        "ComponentId": 9641,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "PolicyChange_Dwelling_AdditionalInterest_NewCompany",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901032,
            "ComponentId": 9641,
            "ComponentStepId": 124945,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901032,
            "ComponentId": 9641,
            "ComponentStepId": 124946,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901032,
            "ComponentId": 9641,
            "ComponentStepId": 124947,
            "TestCase": null,
            "Value": "Mortgagee I",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901032,
            "ComponentId": 9641,
            "ComponentStepId": 124948,
            "TestCase": null,
            "Value": "1234532",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901032,
            "ComponentId": 9641,
            "ComponentStepId": 124949,
            "TestCase": null,
            "Value": "TestCompany",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901032,
            "ComponentId": 9641,
            "ComponentStepId": 124950,
            "TestCase": null,
            "Value": "6873420934",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901032,
            "ComponentId": 9641,
            "ComponentStepId": 124951,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901032,
            "ComponentId": 9641,
            "ComponentStepId": 124952,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901033,
        "StepNumber": 16,
        "ActionId": 55,
        "ComponentId": 9360,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Dwelling_Home",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901033,
            "ComponentId": 9360,
            "ComponentStepId": 126865,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901049,
        "StepNumber": 17,
        "ActionId": 55,
        "ComponentId": 9359,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Dwelling_Construction_Home",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901049,
            "ComponentId": 9359,
            "ComponentStepId": 126810,
            "TestCase": null,
            "Value": "2021",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901049,
            "ComponentId": 9359,
            "ComponentStepId": 126812,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901049,
            "ComponentId": 9359,
            "ComponentStepId": 126813,
            "TestCase": null,
            "Value": "DT_ConstructionType",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901049,
            "ComponentId": 9359,
            "ComponentStepId": 126814,
            "TestCase": null,
            "Value": "DT_PrimaryHeating",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901049,
            "ComponentId": 9359,
            "ComponentStepId": 126816,
            "TestCase": null,
            "Value": "2",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901049,
            "ComponentId": 9359,
            "ComponentStepId": 126817,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901049,
            "ComponentId": 9359,
            "ComponentStepId": 126827,
            "TestCase": null,
            "Value": "DT_RoofShape",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901049,
            "ComponentId": 9359,
            "ComponentStepId": 126828,
            "TestCase": null,
            "Value": "DT_NoOfUnits",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901051,
        "StepNumber": 18,
        "ActionId": 55,
        "ComponentId": 9426,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Reports",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901051,
            "ComponentId": 9426,
            "ComponentStepId": 128058,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901051,
            "ComponentId": 9426,
            "ComponentStepId": 128060,
            "TestCase": null,
            "Value": "DT_InsuranceScoreOrdered",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901051,
            "ComponentId": 9426,
            "ComponentStepId": 128061,
            "TestCase": null,
            "Value": "3",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901037,
        "StepNumber": 19,
        "ActionId": 55,
        "ComponentId": 9392,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "PACoverage_AllFields",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901037,
            "ComponentId": 9392,
            "ComponentStepId": 127646,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901037,
            "ComponentId": 9392,
            "ComponentStepId": 127650,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901037,
            "ComponentId": 9392,
            "ComponentStepId": 127663,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901057,
        "StepNumber": 20,
        "ActionId": 55,
        "ComponentId": 9353,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Coverages_Home",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901057,
            "ComponentId": 9353,
            "ComponentStepId": 126723,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901057,
            "ComponentId": 9353,
            "ComponentStepId": 126735,
            "TestCase": null,
            "Value": "500",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901057,
            "ComponentId": 9353,
            "ComponentStepId": 126737,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901058,
        "StepNumber": 21,
        "ActionId": 55,
        "ComponentId": 9433,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Scheduled_Personal_Property_Home",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901058,
            "ComponentId": 9433,
            "ComponentStepId": 128194,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901058,
            "ComponentId": 9433,
            "ComponentStepId": 128195,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901059,
        "StepNumber": 22,
        "ActionId": 55,
        "ComponentId": 9432,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Risk_Analysis",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901059,
            "ComponentId": 9432,
            "ComponentStepId": 128190,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901059,
            "ComponentId": 9432,
            "ComponentStepId": 128191,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901059,
            "ComponentId": 9432,
            "ComponentStepId": 128192,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901059,
            "ComponentId": 9432,
            "ComponentStepId": 128193,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901048,
        "StepNumber": 23,
        "ActionId": 55,
        "ComponentId": 9403,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Policy_Review",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901048,
            "ComponentId": 9403,
            "ComponentStepId": 127869,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901048,
            "ComponentId": 9403,
            "ComponentStepId": 127870,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901048,
            "ComponentId": 9403,
            "ComponentStepId": 127871,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901044,
        "StepNumber": 24,
        "ActionId": 47,
        "ComponentId": null,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "Wait for SBSV2",
        "Locator": null,
        "Value": "10",
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901047,
        "StepNumber": 25,
        "ActionId": 55,
        "ComponentId": 9438,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": false,
        "SkipStep": false,
        "Description": "SideBySideVersion2",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901047,
            "ComponentId": 9438,
            "ComponentStepId": 128221,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901047,
            "ComponentId": 9438,
            "ComponentStepId": 128222,
            "TestCase": null,
            "Value": "DT_PaymentType",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901030,
        "StepNumber": 26,
        "ActionId": 53,
        "ComponentId": null,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": 7,
        "Screenshot": true,
        "SkipStep": true,
        "Description": null,
        "Locator": "(//span[text()='Side-by-Side Quoting'])[2]",
        "Value": "executenextSteps:2",
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901031,
        "StepNumber": 27,
        "ActionId": 55,
        "ComponentId": 9438,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": true,
        "Description": "SideBySideVersion2",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901031,
            "ComponentId": 9438,
            "ComponentStepId": 128222,
            "TestCase": null,
            "Value": "DT_PaymentType",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901027,
        "StepNumber": 28,
        "ActionId": 47,
        "ComponentId": null,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": true,
        "Description": null,
        "Locator": null,
        "Value": "3",
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901060,
        "StepNumber": 29,
        "ActionId": 55,
        "ComponentId": 9415,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Quote",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901060,
            "ComponentId": 9415,
            "ComponentStepId": 128009,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901060,
            "ComponentId": 9415,
            "ComponentStepId": 128010,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901036,
        "StepNumber": 30,
        "ActionId": 55,
        "ComponentId": 9370,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Forms_FL_Package",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901036,
            "ComponentId": 9370,
            "ComponentStepId": 127147,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901036,
            "ComponentId": 9370,
            "ComponentStepId": 127148,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901036,
            "ComponentId": 9370,
            "ComponentStepId": 127149,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901036,
            "ComponentId": 9370,
            "ComponentStepId": 127150,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901036,
            "ComponentId": 9370,
            "ComponentStepId": 127155,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901036,
            "ComponentId": 9370,
            "ComponentStepId": 127161,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901036,
            "ComponentId": 9370,
            "ComponentStepId": 127162,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901036,
            "ComponentId": 9370,
            "ComponentStepId": 127166,
            "TestCase": null,
            "Value": "6",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901036,
            "ComponentId": 9370,
            "ComponentStepId": 127168,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901036,
            "ComponentId": 9370,
            "ComponentStepId": 127169,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901036,
            "ComponentId": 9370,
            "ComponentStepId": 127170,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901036,
            "ComponentId": 9370,
            "ComponentStepId": 127171,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901036,
            "ComponentId": 9370,
            "ComponentStepId": 127172,
            "TestCase": null,
            "Value": "7",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901034,
        "StepNumber": 31,
        "ActionId": 1,
        "ComponentId": null,
        "CustomActionId": 12266,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "AutoCoverage_PackagePlan_Discount",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901035,
        "StepNumber": 32,
        "ActionId": 55,
        "ComponentId": 9370,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Forms_FL_Package",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127151,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127152,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127153,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127154,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127156,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127157,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127158,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127159,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127160,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127163,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127164,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127165,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127167,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901035,
            "ComponentId": 9370,
            "ComponentStepId": 127174,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901028,
        "StepNumber": 33,
        "ActionId": 53,
        "ComponentId": null,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": 7,
        "Screenshot": true,
        "SkipStep": false,
        "Description": null,
        "Locator": "(//span[contains(text(),'uote')])[2]",
        "Value": "executenextSteps:1",
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901029,
        "StepNumber": 34,
        "ActionId": 9,
        "ComponentId": null,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": 7,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "ClickQuoteScreen",
        "Locator": "(//span[contains(text(),'uote')])[2]",
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901045,
        "StepNumber": 35,
        "ActionId": 55,
        "ComponentId": 9395,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Payment",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901045,
            "ComponentId": 9395,
            "ComponentStepId": 127695,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901045,
            "ComponentId": 9395,
            "ComponentStepId": 127698,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901023,
        "StepNumber": 36,
        "ActionId": 55,
        "ComponentId": 9766,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "MakePaymentThroughAgentLogin",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901023,
            "ComponentId": 9766,
            "ComponentStepId": 129078,
            "TestCase": null,
            "Value": "CA (Cash)",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901023,
            "ComponentId": 9766,
            "ComponentStepId": 129081,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901023,
            "ComponentId": 9766,
            "ComponentStepId": 129082,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901023,
            "ComponentId": 9766,
            "ComponentStepId": 129083,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901023,
            "ComponentId": 9766,
            "ComponentStepId": 129084,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901023,
            "ComponentId": 9766,
            "ComponentStepId": 129086,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901026,
        "StepNumber": 37,
        "ActionId": 1,
        "ComponentId": null,
        "CustomActionId": 12039,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": true,
        "Description": "BindWithOutPayment",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901061,
        "StepNumber": 38,
        "ActionId": 55,
        "ComponentId": 9443,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Submission_bound",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901061,
            "ComponentId": 9443,
            "ComponentStepId": 128299,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901061,
            "ComponentId": 9443,
            "ComponentStepId": 128302,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901061,
            "ComponentId": 9443,
            "ComponentStepId": 128303,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901061,
            "ComponentId": 9443,
            "ComponentStepId": 128304,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 2901025,
        "StepNumber": 39,
        "ActionId": 55,
        "ComponentId": 9966,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": true,
        "Description": "CustomerDetails",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901025,
            "ComponentId": 9966,
            "ComponentStepId": 131520,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901025,
            "ComponentId": 9966,
            "ComponentStepId": 131521,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901025,
            "ComponentId": 9966,
            "ComponentStepId": 131522,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 11315,
            "TestCaseStepId": 2901025,
            "ComponentId": 9966,
            "ComponentStepId": 131523,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "Headers": [],
    "GalenGroups": [],
    "GalenObjects": [],
    "GalenSections": [],
    "TagNames": "",
    "GRDomainNameandId": null,
    "qTestTestCaseId": null,
    "Pester": null,
    "ExternalDT": null,
    "ExternalDTSheetName": null,
    "Name": "FSP_16937_PC_Reg32",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9966,
    "Description": "Generating the First Name, Last Name, House Number, Street Name randomly.",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 131520,
        "StepNumber": 1,
        "Description": "GetFirstName",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12446,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 131521,
        "StepNumber": 2,
        "Description": "GetLastName",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12447,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 131522,
        "StepNumber": 3,
        "Description": "GetHouseNumber",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12448,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 131523,
        "StepNumber": 4,
        "Description": "GetStreetName",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12449,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "CustomerDetails",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12446,
    "Description": "Generate the First Name Randomly",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class GetFirstName extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    try{\r\n        /* Get first Name */\r\n        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");  \r\n                 LocalDateTime now = LocalDateTime.now();  \r\n                 String s = dtf.format(now).toString();\r\n                 s = s.replace(\":\", \"\");\r\n                 s = s.replace(\"/\", \"\");\r\n                 s= s.replace(\" \", \"\");\r\n                 s = s.substring(s.length() - 4);\r\n        //String str=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".substring(i+1, i+2);\r\n\r\n        String ch;\r\n              String s1=\"\";\r\n              for(int i=0;i<s.length();i++)\r\n              {\r\n                     //System.out.println(s.charAt(i));\r\n            Integer val=Integer.parseInt(String.valueOf(s.charAt(i)));\r\n                     ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".substring(val+1, val+2);\r\n                     System.out.println(ch);\r\n                     s1=s1.concat(ch);\r\n              }\r\n\r\n        actionResult.SaveParameterValue(\"DT_DriversFirstName\", \"FNTest\"+s1);\r\n\r\n\r\n        actionResult.status = true;\r\n            actionResult.comments =  \"First Name Is: \"+s1;\r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n            actionResult.comments =  e.getMessage();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetFirstName",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12447,
    "Description": "Generating the Last Name randomly.",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class GetLastName extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry{\n\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");  \n                 LocalDateTime now = LocalDateTime.now();  \n                 String s = dtf.format(now).toString();\n                 s = s.replace(\":\", \"\");\n                 s = s.replace(\"/\", \"\");\n                 s= s.replace(\" \", \"\");\n                 s = s.substring(s.length() - 4);\n\t\t//String str=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".substring(i+1, i+2);\n\n\t\tString ch;\n              String s1=\"\";\n              for(int i=0;i<s.length();i++)\n              {\n                     //System.out.println(s.charAt(i));\n\t\t\tInteger val=Integer.parseInt(String.valueOf(s.charAt(i)));\n                     ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".substring(val+1, val+2);\n                     System.out.println(ch);\n                     s1=s1.concat(ch);\n              }\n\n\t\tactionResult.SaveParameterValue(\"DT_DriversLastName\", \"LNTest\"+s1);\n\n\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Last Name Is: \"+s1;\n\n\t}\n\tcatch(Exception e){\n\t\tactionResult.status = false;\n           \tactionResult.comments =  e.getMessage();\n\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetLastName",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12448,
    "Description": "Generating the House Number randomly",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class GetHouseNumber extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry{\n\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");  \n                 LocalDateTime now = LocalDateTime.now();  \n                 String s = dtf.format(now).toString();\n                 s = s.replace(\":\", \"\");\n                 s = s.replace(\"/\", \"\");\n                 s= s.replace(\" \", \"\");\n                 s = s.substring(s.length() - 4);\n\t\t\n\n\t\tactionResult.SaveParameterValue(\"DT_HouseNumber\", s);\n\n\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"The House Number Is: \"+s;\n\n\t}\n\tcatch(Exception e){\n\t\tactionResult.status = false;\n           \tactionResult.comments =  e.getMessage();\n\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetHouseNumber",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12449,
    "Description": "Generating the Street Name randomly.",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class GetStreetName extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ntry{\n\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");  \n                 LocalDateTime now = LocalDateTime.now();  \n                 String s = dtf.format(now).toString();\n                 s = s.replace(\":\", \"\");\n                 s = s.replace(\"/\", \"\");\n                 s= s.replace(\" \", \"\");\n                 s = s.substring(s.length() - 3);\n\t\t//String str=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".substring(i+1, i+2);\n\n\t\tString ch;\n              String s1=\"\";\n              for(int i=0;i<s.length();i++)\n              {\n                     //System.out.println(s.charAt(i));\n\t\t\tInteger val=Integer.parseInt(String.valueOf(s.charAt(i)));\n                     ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".substring(val+1, val+2);\n                     System.out.println(ch);\n                     s1=s1.concat(ch);\n              }\n\n\t\tactionResult.SaveParameterValue(\"DT_StreetName\", \"Street\"+s1);\n\n\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"First Name Is: Street\"+s1;\n\n\t}\n\tcatch(Exception e){\n\t\tactionResult.status = false;\n           \tactionResult.comments =  e.getMessage();\n\t}\n\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetStreetName",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9704,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 128638,
        "StepNumber": 1,
        "Description": "Launch Policy Center Agent Browser",
        "LocatorTypeId": null,
        "Locator": "",
        "ActionId": 27,
        "ParameterName": null,
        "ParameterValue": "GDT_GWEnv_URL",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128639,
        "StepNumber": 2,
        "Description": "Enter User Name",
        "LocatorTypeId": 3,
        "Locator": "form-elem-3",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "GDT_GWEnv_Username",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128640,
        "StepNumber": 3,
        "Description": "Enter Password",
        "LocatorTypeId": 3,
        "Locator": "form-elem-4",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "GDT_GWEnv_Password",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128641,
        "StepNumber": 4,
        "Description": "Click Submit",
        "LocatorTypeId": 4,
        "Locator": "submit",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Login_to_Agent_Browser_With_NoCondition",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 3500,
    "ProjectId": 99,
    "Key": "GDT_GWEnv_URL",
    "Value": "https://citipxyvip01.aaa-acg.net/aba/agentbrowser/",
    "GlobalSheetId": null,
    "IsEncrypted": false,
    "Name": null,
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 3501,
    "ProjectId": 99,
    "Key": "GDT_GWEnv_Username",
    "Value": "p77832",
    "GlobalSheetId": null,
    "IsEncrypted": false,
    "Name": null,
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 3502,
    "ProjectId": 99,
    "Key": "GDT_GWEnv_Password",
    "Value": "password123",
    "GlobalSheetId": null,
    "IsEncrypted": false,
    "Name": null,
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9351,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 126682,
        "StepNumber": 1,
        "Description": "Agent Browser HomeAgent Browser HomeSCREENRHSMENUBARQuick LinksMENUBegin QuoteCLICKCHOICE",
        "LocatorTypeId": 7,
        "Locator": "//div[contains(text(),'Begin Quote')]",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 10108,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126683,
        "StepNumber": 2,
        "Description": "Begin QuoteBegin QuoteSCREENSelect ProductFORMProductDROPDOWN",
        "LocatorTypeId": 7,
        "Locator": "//mat-label[text()='Product']/ancestor::mat-form-field//mat-select",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_BQProduct",
        "CustomActionId": null,
        "ObjectDictionaryId": 10109,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126684,
        "StepNumber": 3,
        "Description": "Begin QuoteBegin QuoteSCREENSelect ProductFORMStateDROPDOWN",
        "LocatorTypeId": 7,
        "Locator": "//mat-label[text()='State']/ancestor::mat-form-field//mat-select",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_BQState",
        "CustomActionId": null,
        "ObjectDictionaryId": 10110,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126685,
        "StepNumber": 4,
        "Description": "Begin QuoteBegin QuoteSCREENSelect ProductFORMEffective DateTEXTBOX",
        "LocatorTypeId": 7,
        "Locator": "//mat-label[text()='Effective Date']/ancestor::mat-form-field//input",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_BQEffectiveDate",
        "CustomActionId": null,
        "ObjectDictionaryId": 10111,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126686,
        "StepNumber": 5,
        "Description": "Begin QuoteBegin QuoteSCREENBegin QuoteBUTTON",
        "LocatorTypeId": 7,
        "Locator": "//button[contains(text(),'Begin Quote')]",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 10112,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "ClickBeginQuote_bkp",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10108,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//div[contains(text(),'Begin Quote')]",
    "PageId": 1176,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Agent Browser HomeAgent Browser HomeSCREENRHSMENUBARQuick LinksMENUBegin QuoteCLICKCHOICE",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1176,
    "EntityName": "Page",
    "ProjectId": 99,
    "DictionaryPageType": 1,
    "Name": "Agent Browser Home",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10109,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//mat-label[text()='Product']/ancestor::mat-form-field//mat-select",
    "PageId": 1177,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Begin QuoteBegin QuoteSCREENSelect ProductFORMProductDROPDOWN",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1177,
    "EntityName": "Page",
    "ProjectId": 99,
    "DictionaryPageType": 1,
    "Name": "Begin Quote",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10110,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//mat-label[text()='State']/ancestor::mat-form-field//mat-select",
    "PageId": 1177,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Begin QuoteBegin QuoteSCREENSelect ProductFORMStateDROPDOWN",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10111,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//mat-label[text()='Effective Date']/ancestor::mat-form-field//input",
    "PageId": 1177,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Begin QuoteBegin QuoteSCREENSelect ProductFORMEffective DateTEXTBOX",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10112,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//button[contains(text(),'Begin Quote')]",
    "PageId": 1177,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Begin QuoteBegin QuoteSCREENBegin QuoteBUTTON",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9522,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 122361,
        "StepNumber": 1,
        "Description": "Verify_EnterAccountInformationPage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12598,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122338,
        "StepNumber": 2,
        "Description": "Enter First Name",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'FirstName-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_FirstName",
        "CustomActionId": null,
        "ObjectDictionaryId": 10113,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122386,
        "StepNumber": 3,
        "Description": "Enter Account InformationEnter Account InformationSCREENEnter Account InformationFORMLast name\tTEXTBOX",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'LastName-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_LastName",
        "CustomActionId": null,
        "ObjectDictionaryId": 10114,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122387,
        "StepNumber": 4,
        "Description": "Enter Account InformationEnter Account InformationSCREENSearchBUTTON",
        "LocatorTypeId": 3,
        "Locator": "NewAccount:NewAccountScreen:NewAccountSearchDV:SearchAndResetInputSet:SearchLinksInputSet:Search",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 10115,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122339,
        "StepNumber": 5,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122340,
        "StepNumber": 6,
        "Description": "SelectPersonFromCreateNewAccountDropdown",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11758,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122370,
        "StepNumber": 7,
        "Description": "CreateNewAccount_FromAddressBook",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11781,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122385,
        "StepNumber": 8,
        "Description": "Verify_CreateAccountPage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12597,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122376,
        "StepNumber": 9,
        "Description": "Enter Middle name",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'MiddleInitial-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_MiddleName",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122377,
        "StepNumber": 10,
        "Description": "EnterSuffix",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Suffix",
        "CustomActionId": 11783,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122353,
        "StepNumber": 11,
        "Description": "selectGender",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_Gender",
        "CustomActionId": 11753,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122341,
        "StepNumber": 12,
        "Description": "EnterHomePhone",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_HomePhone",
        "CustomActionId": 11760,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122342,
        "StepNumber": 13,
        "Description": "EnterMobilePhone",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_MobilePhone",
        "CustomActionId": 11761,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122343,
        "StepNumber": 14,
        "Description": "EnterEmail",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PolicyInfo_Email",
        "CustomActionId": 11762,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122344,
        "StepNumber": 15,
        "Description": "EnterHouseNumber",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_HouseNumber",
        "CustomActionId": 11763,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122345,
        "StepNumber": 16,
        "Description": "EnterStreetName",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_StreetName",
        "CustomActionId": 11764,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122355,
        "StepNumber": 17,
        "Description": "Enter Random value for House Number",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'AddressLine1-inputEl')]",
        "ActionId": 65,
        "ParameterName": null,
        "ParameterValue": "numeric:6",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122346,
        "StepNumber": 18,
        "Description": "EnterCity",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_City",
        "CustomActionId": 11765,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122347,
        "StepNumber": 19,
        "Description": "SelectState",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_State",
        "CustomActionId": 11754,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122348,
        "StepNumber": 20,
        "Description": "EnterZIPCode",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_ZipCode",
        "CustomActionId": 11766,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122371,
        "StepNumber": 21,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "2",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122372,
        "StepNumber": 22,
        "Description": "Click on Standardize Button",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'EditPolicyAddressPopup:Standardize-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122367,
        "StepNumber": 23,
        "Description": "Enter Organization",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'Producer-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "The Auto Club Group",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122349,
        "StepNumber": 24,
        "Description": "EnterSSN",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_SSN",
        "CustomActionId": 11767,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122366,
        "StepNumber": 25,
        "Description": "SelectProducer",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_ProducerCode",
        "CustomActionId": 12604,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122350,
        "StepNumber": 26,
        "Description": "ClickOnStandardizeBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11768,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122382,
        "StepNumber": 27,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122362,
        "StepNumber": 28,
        "Description": "Verify_StandardizeAddrPage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12599,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122356,
        "StepNumber": 29,
        "Description": "Click if Select button is available ",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(text(),'Select')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122364,
        "StepNumber": 30,
        "Description": "StandardizeAddress_New",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12602,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122360,
        "StepNumber": 31,
        "Description": "Verify is Standardize city grid displayed",
        "LocatorTypeId": 7,
        "Locator": "//span[@id='AddressStandardize_AcgPopup:1']",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122354,
        "StepNumber": 32,
        "Description": "VerifyStandardizeCityGridIsDisplayed",
        "LocatorTypeId": 7,
        "Locator": "//span[@id='AddressStandardize_AcgPopup:1']",
        "ActionId": 28,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122357,
        "StepNumber": 33,
        "Description": "Select if standadised addressed are available",
        "LocatorTypeId": 7,
        "Locator": "(//a[contains(text(),'Select')])[2]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122365,
        "StepNumber": 34,
        "Description": "StandardizeCity",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_City",
        "CustomActionId": 11774,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122375,
        "StepNumber": 35,
        "Description": "Select the Standard Address",
        "LocatorTypeId": 7,
        "Locator": "(//a[contains(text(),'Select')])[3]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122378,
        "StepNumber": 36,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122369,
        "StepNumber": 37,
        "Description": "VerifyMSGForInvalidAddr",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11776,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122383,
        "StepNumber": 38,
        "Description": "Check if Override button is available",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'AddressStandardize_AcgPopup:override-btnInnerEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122384,
        "StepNumber": 39,
        "Description": "Click Override Button",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'AddressStandardize_AcgPopup:override-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122373,
        "StepNumber": 40,
        "Description": "Verify POPUP",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(text(),'OK')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122374,
        "StepNumber": 41,
        "Description": "Click OK",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(text(),'OK')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122379,
        "StepNumber": 42,
        "Description": "Check if Override button is available",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'AddressStandardize_AcgPopup:override-btnInnerEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122380,
        "StepNumber": 43,
        "Description": "Click Override Button",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'AddressStandardize_AcgPopup:override-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122381,
        "StepNumber": 44,
        "Description": "Verify_CreateAccountPage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12597,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122358,
        "StepNumber": 45,
        "Description": "Verify is Census Track is empty",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'censustract-inputEl') or contains(@id,'censustractnew-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122359,
        "StepNumber": 46,
        "Description": "Enter Census Track Number",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'censustract-inputEl') or contains(@id,'censustractnew-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_CensusTrack",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122368,
        "StepNumber": 47,
        "Description": "SelectOrgNameAndProducerCode",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "The Auto Club Group AND 70296176",
        "CustomActionId": 11775,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122351,
        "StepNumber": 48,
        "Description": "ClickOnUpdateBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11771,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122363,
        "StepNumber": 49,
        "Description": "Verify_AccFileSummaryScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12600,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122352,
        "StepNumber": 50,
        "Description": "GetAccountNumber",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11773,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "EnterAccInformation",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12598,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType; \r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\n//import java.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Verify_EnterAccountInformationPage extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            //WebDriverWait wait    = new WebDriverWait(driver, Duration.ofSeconds(10));\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act           = new Actions(driver);\r\n            String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            \r\n            for(int retry=0; retry<=1;retry++){\r\n                    try{\r\n                        WebElement pageTitleEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'NewAccountScreen:ttlBar')]\"))));;\r\n                        String actPageTitle = pageTitleEle.getText();\r\n                        if(actPageTitle.equals(\"Enter Account Information\")){\r\n                        \r\n                            try \r\n                            {   \r\n                            String dateOfBirth = \"01/01/1990\";\r\n                            WebElement DateOfBirthtxtField = driver.findElement(By.xpath(\"//input[contains(@id,'DateOfBirth-inputEl')]\"));      \r\n                            DateOfBirthtxtField.sendKeys(Keys.chord(Keys.CONTROL,\"a\"),dateOfBirth);\r\n                            actionResult.status = true;\r\n                            actionResult.comments =  \"The Date Of Birth is enter as :\"+dateOfBirth;\r\n \r\n                            }\r\n    \r\n                                catch(Exception ex) {\r\n                                    actionResult.comments =ex.getMessage();\r\n                                    actionResult.status = true;\r\n                            }\r\n                                \r\n                                actionResult.status = true;\r\n                                actionResult.comments =  \"Naviagted to 'Enter Account Information' screen successfully\";\r\n                                \r\n                        }\r\n\r\n                    }\r\n                    catch(Exception e) {\r\n                        actionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\r\n                        actionResult.status = false;\r\n                    }\r\n                }\r\n\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Naviagted to 'Enter Account Information' screen successfully\";\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n\r\n    }\r\n\r\n\r\n\r\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Verify_EnterAccountInformationPage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10113,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//input[contains(@id,'FirstName-inputEl')]",
    "PageId": 1178,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Enter First Name",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1178,
    "EntityName": "Page",
    "ProjectId": 99,
    "DictionaryPageType": 1,
    "Name": "Enter Account Information",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10114,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//input[contains(@id,'LastName-inputEl')]",
    "PageId": 1178,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Enter Account InformationEnter Account InformationSCREENEnter Account InformationFORMLast name\tTEXTBOX",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10115,
    "ProjectId": 99,
    "LocatorType": 3,
    "Locator": "NewAccount:NewAccountScreen:NewAccountSearchDV:SearchAndResetInputSet:SearchLinksInputSet:Search",
    "PageId": 1178,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Enter Account InformationEnter Account InformationSCREENSearchBUTTON",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11758,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n//import java.time.Duration;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectPersonFromCreateNewAccountDropdown extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);\r\n        WebDriverWait wait    = new WebDriverWait(driver,20);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act           = new Actions(driver);\r\n        Thread.sleep(5000);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//a[contains(@id,'NewAccountButton')])[1]\"))));\r\n\r\n        WebElement CreateNewAccoutTabElement = driver.findElement(By.xpath(\"(//a[contains(@id,'NewAccountButton')])[1]\"));\r\n\r\n        act.moveToElement(CreateNewAccoutTabElement).moveByOffset(40,0).click().build().perform();\r\n\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'NewAccount_Person-textEl')]\")));\r\n\r\n        //NewAccount:NewAccountScreen:NewAccountButton:NewAccount_Person-textEl\r\n\r\n        WebElement personElement = driver.findElement(By.xpath(\"//span[contains(@id,'NewAccount_Person-textEl')]\"));\r\n\r\n        //js.executeScript(\"arguments[0].click()\",CreateNewAccoutTabElement);\r\n        //Thread.sleep(1000);\r\n        //js.executeScript(\"arguments[0].click()\",personElement);\r\n        //CreateNewAccoutTabElement= driver.findElement(By.xpath(\"(//a[contains(@id,'NewAccountButton')])[1]\"));\r\n        //personElement= driver.findElement(By.xpath(\"//span[contains(@id,'NewAccount_Person-textEl')]\"));\r\n\r\n        act.moveToElement(personElement).moveByOffset(35,0).click().build().perform();\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"The 'Person' option has been selected from the Creat Account Dropdown\";\r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectPersonFromCreateNewAccountDropdown",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11781,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class CreateNewAccount_FromAddressBook extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\tdriver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tActions act = new Actions(driver);\n\t\tThread.sleep(5000);\n\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//a[contains(@id,'NewAccountButton')])[1]\"))));\n\t\tWebElement CreateNewAccoutTabElement = driver.findElement(By.xpath(\"(//a[contains(@id,'NewAccountButton')])[1]\"));\n\t\tact.moveToElement(CreateNewAccoutTabElement).moveByOffset(40,0).click().build().perform();\n\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'NewAccount_FromAB-textEl')]\")));\n\t\tWebElement personElement = driver.findElement(By.xpath(\"//span[contains(@id,'NewAccount_FromAB-textEl')]\"));\n\t\tact.moveToElement(personElement).moveByOffset(35,0).click().build().perform();\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"The 'From Address Book' option has been selected from the Create Account Dropdown\";\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "CreateNewAccount_FromAddressBook",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12597,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver; \r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n//import java.time.Duration;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Verify_CreateAccountPage extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++)\r\n    {\r\n    try\r\n    {\r\n        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\r\n\r\n        WebDriverWait wait = new WebDriverWait(driver, 20);\r\n             wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'Cancel-btnWrap')]\"))));\r\n        \r\n\r\n        WebElement pageTitleEle=driver.findElement(By.xpath(\"//span[contains(@id,'CreateAccountScreen:ttlBar')]\"));\r\n        \r\n        //WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'CreateAccountScreen:ttlBar')]\"));\r\n        String actPageTitle = pageTitleEle.getText();\r\n        if(actPageTitle.equals(\"Create account\")){\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Naviagted to 'Create account' screen successfully\";\r\n        }\r\n    \r\n\r\n    break;\r\n    }\r\ncatch(Exception e) {\r\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\nactionResult.status = false;\r\n    }\r\n}\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Verify_CreateAccountPage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11783,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType; \r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterSuffix extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act = new Actions(driver);\r\n            String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n            \r\n            for(int retry=0; retry<=2;retry++){\r\n                    try{\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'Suffix-inputEl')]\"))));\r\n                    WebElement suffixEle = driver.findElement(By.xpath(\"//input[contains(@id,'Suffix-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",suffixEle);\r\n                    suffixEle.sendKeys(selectText);\r\n                    act.moveToElement(suffixEle).sendKeys(Keys.DELETE).build().perform();\r\n                    //Thread.sleep(1000);\r\n                    js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",suffixEle);\r\n                    //Thread.sleep(2000);\r\n                    act.moveToElement(suffixEle).sendKeys(Keys.TAB).build().perform();\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                        actionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\r\n                        actionResult.status = false;\r\n                    }\r\n                }\r\n\r\n            \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Suffix has been selected as :\"+inputValue;\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n\r\n    }\r\n\r\n\r\n\r\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterSuffix",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11753,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType; \r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\n//import java.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class selectGender extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait    = new WebDriverWait(driver, 20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act           = new Actions(driver);\r\n            String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            \r\n            for(int retry=0; retry<=2;retry++){\r\n                    try{\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'GlobalPersonNameInputSet:Gender-inputEl')]\"))));\r\n                    WebElement genderEle = driver.findElement(By.xpath(\"//input[contains(@id,'GlobalPersonNameInputSet:Gender-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",genderEle);\r\n                    genderEle.sendKeys(selectText);\r\n                    act.moveToElement(genderEle).sendKeys(Keys.DELETE).build().perform();\r\n                    //Thread.sleep(1000);\r\n                    js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",genderEle);\r\n                    //Thread.sleep(2000);\r\n                    act.moveToElement(genderEle).sendKeys(Keys.TAB).build().perform();\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                        actionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\r\n                        actionResult.status = false;\r\n                    }\r\n                }\r\n\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Gender has been selected as :\"+inputValue;\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n\r\n    }\r\n\r\n\r\n\r\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "selectGender",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11760,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType; \r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\n//import java.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterHomePhone extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait    = new WebDriverWait(driver, 20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act           = new Actions(driver);\r\n            String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            \r\n            for(int retry=0; retry<=2;retry++){\r\n                    try{\r\n                        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HomePhone')]\"))));\r\n                        WebElement homePhoneEle = driver.findElement(By.xpath(\"//input[contains(@id,'HomePhone')]\"));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", homePhoneEle);\r\n                        //Thread.sleep(1000);\r\n                        js.executeScript(\"arguments[0].click();\",homePhoneEle);\r\n                        js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",homePhoneEle);\r\n                        //Thread.sleep(1000);\r\n                        act.moveToElement(homePhoneEle).sendKeys(Keys.TAB).build().perform();\r\n                        break;\r\n                    }\r\n                    catch(Exception e) {\r\n                        actionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\r\n                        actionResult.status = false;\r\n                    }\r\n                }\r\n\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Home Phone Number entered as :\"+inputValue;\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n\r\n    }\r\n\r\n\r\n\r\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterHomePhone",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11761,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType; \r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\n//import java.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterMobilePhone extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait    = new WebDriverWait(driver, 20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act           = new Actions(driver);\r\n            String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            \r\n            for(int retry=0; retry<=2;retry++){\r\n                    try{\r\n                        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'CellPhone')]\"))));\r\n                        WebElement MobPhoneEle = driver.findElement(By.xpath(\"//input[contains(@id,'CellPhone')]\"));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", MobPhoneEle);\r\n                        //Thread.sleep(1000);\r\n                        js.executeScript(\"arguments[0].click();\",MobPhoneEle);\r\n                        js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",MobPhoneEle);\r\n                        //Thread.sleep(1000);\r\n                        act.moveToElement(MobPhoneEle).sendKeys(Keys.TAB).build().perform();\r\n                        break;\r\n                    }\r\n                    catch(Exception e) {\r\n                        actionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\r\n                        actionResult.status = false;\r\n                    }\r\n                }\r\n\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Home Phone Number entered as :\"+inputValue;\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n\r\n    }\r\n\r\n\r\n\r\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterMobilePhone",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11762,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType; \r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\n//import java.time.Duration;\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterEmail extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait    = new WebDriverWait(driver, 20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act           = new Actions(driver);\r\n            String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            \r\n            for(int retry=0; retry<=2;retry++){\r\n                    try{\r\n                        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'EmailAddress1-inputEl')]\"))));\r\n                        WebElement emailEle = driver.findElement(By.xpath(\"//input[contains(@id,'EmailAddress1-inputEl')]\"));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", emailEle);\r\n                        //Thread.sleep(1000);\r\n                        js.executeScript(\"arguments[0].click();\",emailEle);\r\n                        js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",emailEle);\r\n                        //Thread.sleep(1000);\r\n                        act.moveToElement(emailEle).sendKeys(Keys.TAB).build().perform();\r\n                        break;\r\n                    }\r\n                    catch(Exception e) {\r\n                        actionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\r\n                        actionResult.status = false;\r\n                    }\r\n                }\r\n\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Home Phone Number entered as :\"+inputValue;\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n\r\n    }\r\n\r\n\r\n\r\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterEmail",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11763,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterHouseNumber extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver, 20);\r\n        WebElement houseNumEle;\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'AddressLine1-inputEl')]\")));\r\n        houseNumEle = driver.findElement(By.xpath(\"//input[contains(@id,'AddressLine1-inputEl')]\"));\r\n        wait.until(ExpectedConditions.elementToBeClickable(houseNumEle));\r\n        houseNumEle.click();\r\n        houseNumEle.sendKeys(inputValue);\r\n        Keys.chord(Keys.TAB);\r\n  \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"House Number entered as:\"+inputValue;\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterHouseNumber",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11764,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterStreetName extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver, 20);\r\n            WebElement streetNameEle;\r\n            streetNameEle=driver.findElement(By.xpath(\"//input[contains(@id,'AddressLine2-inputEl')]\"));\r\n            wait.until(ExpectedConditions.elementToBeClickable(streetNameEle));\r\n            streetNameEle.click();\r\n            streetNameEle.sendKeys(inputValue);\r\n            Keys.chord(Keys.TAB);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Street Name entered as:\"+inputValue;\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterStreetName",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11765,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterCity extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver, 20);\r\n    \r\n            WebElement cityEle=driver.findElement(By.xpath(\"//input[contains(@id,'City-inputEl')]\"));\r\n            wait.until(ExpectedConditions.elementToBeClickable(cityEle));\r\n            cityEle.click();\r\n            cityEle.sendKeys(inputValue);\r\n            Keys.chord(Keys.TAB);\r\n            Thread.sleep(750);\r\n            WebElement houseNumEle;\r\n            houseNumEle=driver.findElement(By.xpath(\"//input[contains(@id,'AddressLine1-inputEl')]\"));\r\n            houseNumEle.click();\r\n            Thread.sleep(1750);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"City Name entered as:\"+inputValue;\r\n \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterCity",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11754,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectState extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tActions act = new Actions(driver);\n\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\t\t\n\t\tWebElement state=driver.findElement(By.xpath(\"//input[contains(@id,'State-inputEl')]\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tstate.sendKeys(s);\n\t\tstate.sendKeys(Keys.DELETE);\n\t\tstate.sendKeys(inputValue);\n\t\tact.moveToElement(state).sendKeys(Keys.ENTER).build().perform();\n\t\tact.moveToElement(state).sendKeys(Keys.TAB).build().perform();\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";\n\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectState",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11766,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterZIPCode extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            WebElement zipCodeEle;\r\n            zipCodeEle=driver.findElement(By.xpath(\"//input[contains(@id,'PostalCode-inputEl')]\"));\r\n            wait.until(ExpectedConditions.elementToBeClickable(zipCodeEle));\r\n            zipCodeEle.click();\r\n            zipCodeEle.sendKeys(inputValue);\r\n            Keys.chord(Keys.TAB);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"ZIP is entered as:\"+inputValue;\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterZIPCode",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11767,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterSSN extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n        WebDriverWait wait = new WebDriverWait(driver,20);\r\n        WebElement SSNEle;\r\n        SSNEle=driver.findElement(By.xpath(\"//input[contains(@id,'OfficialIDDV_Input-inputEl')]\"));\r\n        wait.until(ExpectedConditions.elementToBeClickable(SSNEle));\r\n        SSNEle.click();\r\n        SSNEle.sendKeys(inputValue);\r\n        Keys.chord(Keys.TAB);\r\n        \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"SSN is entered as:\"+inputValue;\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterSSN",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12604,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.StaleElementReferenceException;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectProducer extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\t\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\t\tdriver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS); \n       \tWebDriverWait wait=new WebDriverWait(driver,15);\n\t\tWebElement producer= wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode-inputEl')]\"))));\n\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tproducer.sendKeys(s);\n\t\tproducer.sendKeys(Keys.DELETE);\n\n\t\tActions act = new Actions(driver);\n\t\tact.sendKeys(producer,inputValue).build().perform();\n        Thread.sleep(2000);\n\t\tproducer.sendKeys(Keys.TAB);\n\n      \tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";  \n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectProducer",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11768,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.*;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.util.*;\r\n//import java.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickOnStandardizeBtn extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,10);\r\n        \r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebElement standardizeBtnEle;\r\n        standardizeBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'CreateAccountScreen:Standardize')]\"));\r\n        wait.until(ExpectedConditions.elementToBeClickable(standardizeBtnEle));\r\n\r\n        //Wait<WebDriver> fluentWaiit = new FluentWait<WebDriver>(driver).withTimeout(3000, TimeUnit.MILLISECONDS).pollingEvery(100, TimeUnit.MILLISECONDS).ignoring(Exception.class);\r\n        //WebElement standardizeBtnEle= fluentWaiit.until(new Function<WebDriver, WebElement>() {\r\n            // public WebElement apply(WebDriver driver) {\r\n                // TODO Auto-generated method stub\r\n                // return driver.findElement(By.xpath(\"//a[contains(@id,'CreateAccountScreen:Standardize')]\"));\r\n            // }           \r\n        //});\r\n\r\n        js.executeScript(\"arguments[0].click()\",standardizeBtnEle);\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"Clicked on 'Standardize' button\";\r\n \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnStandardizeBtn",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12599,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n//import java.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Verify_StandardizeAddrPage extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++)\r\n    {\r\n    try\r\n    {   \r\n        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,20);\r\n        Thread.sleep(7000);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[@id='AddressStandardize_AcgPopup:override-btnInnerEl']\"))));\r\n        \r\n\r\n        WebElement pageTitleEle =driver.findElement(By.xpath(\"//span[contains(@id,'AddressStandardize_AcgPopup:ttlBar')]\"));\r\n        String actPageTitle = pageTitleEle.getText();\r\n        if(actPageTitle.equals(\"Select a Standardized Address\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Naviagted to 'Standardized Address' screen successfully\";\r\n        }\r\n\r\nbreak;\r\n  }\r\ncatch(Exception e) {\r\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\nactionResult.status = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Verify_StandardizeAddrPage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12602,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class StandardizeAddress_New extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tWebElement selectstandardizAddreBtnEle;\n\t\t\n\t\tselectstandardizAddreBtnEle=driver.findElement(By.xpath(\"//a[text()='Select']\"));\n\t\t\n\t\twait.until(ExpectedConditions.elementToBeClickable(selectstandardizAddreBtnEle));\n\t\tjs.executeScript(\"arguments[0].click()\",selectstandardizAddreBtnEle);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments =  \"The Address has been Standardized successfully\";\n\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "StandardizeAddress_New",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11774,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class StandardizeCity extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\t\t\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tWebElement SelectStandardizeCityBtnEle;\n\t\tWebElement overrideBtnEle;\n\t\tThread.sleep(10000);\n\t\t//selectstandardizAddreBtnEle=driver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/a\"));\n\t\t//SelectStandardizeCityBtnEle=driver.findElement(By.xpath(\"(//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/a)[2]\"));\n\t\t//overrideBtnEle=driver.findElement(By.xpath(\"//a[contains(@id,'AcgPopup:override')]\"));\n\n\t\tif(driver.findElement(By.xpath(\"(//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/a)[2]\")).isDisplayed()){\n\t\t\tSystem.out.println(\"City is existed\");\n\t\t\tSelectStandardizeCityBtnEle=driver.findElement(By.xpath(\"(//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/a)[2]\"));\n\n\t\t\tjs.executeScript(\"arguments[0].click()\",SelectStandardizeCityBtnEle);\n\t\t\n\t\t}else{\n\t\t\n\t\tSystem.out.println(\"City Standardization is not required\");\n\t\t\n\t\t}\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"The Address and City have been Standardized successfully\";\n\n\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = true;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "StandardizeCity",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11776,
    "Description": "Verifying the 'Unable to standardize address' message when enter the Invalid Addr details.",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyMSGForInvalidAddr extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\ttry{\n\t\t\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tActions act = new Actions(driver);\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//label[@id='AddressStandardize_AcgPopup:0']\"))));\n\t\t\tWebElement InvalidAddrMsgEle = driver.findElement(By.xpath(\"//label[@id='AddressStandardize_AcgPopup:0']\"));\n\t\t\t\n\t\t\tString actMsg = InvalidAddrMsgEle.getText();\n\t\t\tSystem.out.println(actMsg);\n\t\t\tif(actMsg.contains(\"Unable to standardize address.\")){\n\t\t\t\tactionResult.status = true;\n           \t\t\tactionResult.comments =  \"The Address cannot be standardized with invalid Address Details\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"The 'Select a Standardized Address' Screen not displayed\";\n\t\t\t}\n\t\t\t\n\t\t\t\n\n\n\t\t\n\t\t\n\n\t}\n\tcatch(Exception e){\n\t\tactionResult.status = true;\n        actionResult.comments =  e.getMessage();\n\n\t}\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyMSGForInvalidAddr",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11775,
    "Description": "Searching and selecting the required Organization Name on Create Account screen.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n//import java.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectOrgNameAndProducerCode extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       for(int i =1; i<=3; i++)\r\n{\r\n    try{\r\n    \r\n        String[] orgProducerCodeParams = inputValue.split(\" AND \");\r\n        String organizationName = orgProducerCodeParams[0].toString();\r\n        String ProducerCode = orgProducerCodeParams[1].toString();\r\n        driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\r\n        WebDriverWait wait    = new WebDriverWait(driver,10);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act           = new Actions(driver);\r\n        String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(@id,'Producer:SelectOrganization')]\"))));\r\n            WebElement searchOrgEle = driver.findElement(By.xpath(\"//div[contains(@id,'Producer:SelectOrganization')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchOrgEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'OrganizationSearchPopupScreen:ttlBar')]\"))));\r\n            WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'OrganizationSearchPopupScreen:ttlBar')]\"));\r\n            String actPageTitle = pageTitleEle.getText();\r\n            if(actPageTitle.equals(\"Organizations\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Organizations' Screen has been displayed\";\r\n            }\r\n            else{\r\n                actionResult.status = false;\r\n                actionResult.comments =  \"The 'Organizations' Screen not displayed\";\r\n            }\r\n            \r\n            WebElement OrgTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'OrganizationSearchDV:GlobalContactNameInputSet:Name-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", OrgTxtEle);\r\n            js.executeScript(\"arguments[0].click();\",OrgTxtEle);\r\n            Thread.sleep(1000);\r\n            //OrgTxtEle.sendKeys(organizationName);\r\n            //act.sendKeys(OrgTxtEle, organizationName).perform();\r\n            js.executeScript(\"arguments[0].value='\"+organizationName+\"'\",OrgTxtEle);\r\n            WebElement searchBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'SearchLinksInputSet:Search')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchBtnEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'OrganizationSearchResultsLV:0:_Select')]\"))));\r\n            WebElement selectOrgBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'OrganizationSearchResultsLV:0:_Select')]\"));\r\n            js.executeScript(\"arguments[0].click();\",selectOrgBtnEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'Screen:ttlBar')]\"))));\r\n            WebElement pageTitleEle1 = driver.findElement(By.xpath(\"//span[contains(@id,'Screen:ttlBar')]\"));\r\n            String actPageTitle1 = pageTitleEle1.getText();\r\n            if(actPageTitle1.equals(\"Create account\") || actPageTitle1.equals(\"New Submissions\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Create account' Screen has been displayed\";\r\n            }\r\n            else{\r\n                actionResult.status = false;\r\n                actionResult.comments =  \"The 'Create account' Screen not displayed\";\r\n            }\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode-inputEl')]\"))));\r\n            WebElement producerCodeEle = driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",producerCodeEle);\r\n            producerCodeEle.sendKeys(selectText);\r\n            Thread.sleep(2000);\r\n            producerCodeEle.sendKeys(Keys.DELETE);\r\n            Thread.sleep(2000);\r\n            if(ProducerCode.equals(\"70264529 - Test286 Captive GA\")){\r\n            ProducerCode = \"70264529 -  Test286 Captive GA\";\r\n            }\r\n            producerCodeEle.sendKeys(ProducerCode);\r\n            producerCodeEle.sendKeys(Keys.ENTER);\r\n            Thread.sleep(2000);\r\n\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"The required 'Organization' and 'Producer Code' have been selected\";\r\n \r\n        \r\n    break;\r\n    }\r\ncatch(Exception e) {\r\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\nactionResult.status = false;\r\n}\r\n}\r\n\r\n\r\nfor(int j =1; j<=1; j++)\r\n{\r\n    try{\r\n    \r\n        String[] orgProducerCodeParams = inputValue.split(\" AND \");\r\n        String organizationName = orgProducerCodeParams[0].toString();\r\n        String ProducerCode = orgProducerCodeParams[1].toString();\r\n        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\r\n        WebDriverWait wait    = new WebDriverWait(driver,10);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act           = new Actions(driver);\r\n        String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(@id,'Producer1:SelectOrganization')]\"))));\r\n            WebElement searchOrgEle = driver.findElement(By.xpath(\"//div[contains(@id,'Producer1:SelectOrganization')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchOrgEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'OrganizationSearchPopupScreen:ttlBar')]\"))));\r\n            WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'OrganizationSearchPopupScreen:ttlBar')]\"));\r\n            String actPageTitle = pageTitleEle.getText();\r\n            if(actPageTitle.equals(\"Organizations\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Organizations' Screen has been displayed\";\r\n            }\r\n            else{\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Organizations' Screen not displayed\";\r\n            }\r\n            \r\n            WebElement OrgTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'OrganizationSearchDV:GlobalContactNameInputSet:Name-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",OrgTxtEle);\r\n            OrgTxtEle.sendKeys(organizationName);\r\n            \r\n            WebElement searchBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'SearchLinksInputSet:Search')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchBtnEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'OrganizationSearchResultsLV:0:_Select')]\"))));\r\n            WebElement selectOrgBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'OrganizationSearchResultsLV:0:_Select')]\"));\r\n            js.executeScript(\"arguments[0].click();\",selectOrgBtnEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'Screen:ttlBar')]\"))));\r\n            WebElement pageTitleEle1 = driver.findElement(By.xpath(\"//span[contains(@id,'Screen:ttlBar')]\"));\r\n            String actPageTitle1 = pageTitleEle1.getText();\r\n            if(actPageTitle1.equals(\"Create account\") || actPageTitle1.equals(\"New Submissions\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Create account' Screen has been displayed\";\r\n            }\r\n            else{\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Create account' Screen not displayed\";\r\n            }\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode4-inputEl')]\"))));\r\n            WebElement producerCodeEle = driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode4-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",producerCodeEle);\r\n            producerCodeEle.sendKeys(selectText);\r\n            Thread.sleep(1000);\r\n            producerCodeEle.sendKeys(Keys.DELETE);\r\n            Thread.sleep(500);\r\n            producerCodeEle.sendKeys(ProducerCode);\r\n            producerCodeEle.sendKeys(Keys.ENTER);\r\n            Thread.sleep(1000);\r\n\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"The required 'Organization' and 'Producer Code' have been selected\";\r\n \r\n        \r\n    break;\r\n    }\r\ncatch(Exception e) {\r\nactionResult.comments =\"Max No. of Attepts reached : \" +j + \" Expection Type : \" + e.getMessage();\r\nactionResult.status = true;\r\n}\r\n}\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectOrgNameAndProducerCode",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11771,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickOnUpdateBtn extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        \r\n         WebDriverWait wait = new WebDriverWait(driver,20);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.xpath(\"//a[contains(@id,'CreateAccountScreen:Update')]\")));\r\n        WebElement updateBtnEle=driver.findElement(By.xpath(\"//a[contains(@id,'CreateAccountScreen:Update')]\"));\r\n        js.executeScript(\"arguments[0].scrollIntoView();\", updateBtnEle);\r\n        js.executeScript(\"arguments[0].click()\",updateBtnEle);\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"Click on 'Update' button successful\";\r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnUpdateBtn",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12600,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n//import java.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Verify_AccFileSummaryScreen extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {\r\n        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n        Thread.sleep(2000);\r\n        WebDriverWait wait      = new WebDriverWait(driver,45);\r\n        WebElement pageTitleEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'AccountFile_SummaryScreen:ttlBar')]\"))));\r\n        String actPageTitle     = pageTitleEle.getText();\r\n        if(actPageTitle.contains(\"Account File Summary\")){\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"Naviagted to 'Account File Summary' screen successfully\";\r\n        }\r\n    \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = true;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Verify_AccFileSummaryScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11773,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class GetAccountNumber extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    \r\nfor(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            WebElement accountNumEle;\r\n            accountNumEle=driver.findElement(By.xpath(\"//div[contains(@id,'AccountNumber-inputEl')]\"));\r\n            wait.until(ExpectedConditions.visibilityOf(accountNumEle));\r\n            String accountNumber = accountNumEle.getText();\r\n            actionResult.SaveParameterValue(\"DT_AccountNumber\", accountNumber);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Account Number : \"+accountNumber+\" has been created successfully\";\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetAccountNumber",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9401,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 127858,
        "StepNumber": 1,
        "Description": "My ActivitiesMy ActivitiesSCREENPolicy CenterMENUBAR",
        "LocatorTypeId": 3,
        "Locator": "Desktop:MenuLinks:Desktop_DesktopActivities",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 9925,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127859,
        "StepNumber": 2,
        "Description": "My ActivitiesMy ActivitiesSCREENPolicy CenterMENUBARPolicyMENU",
        "LocatorTypeId": 7,
        "Locator": "//span[@id='TabBar:PolicyTab-btnIconEl']",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 9926,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127861,
        "StepNumber": 3,
        "Description": "PC_PolicyTab_NewSubmission_Click",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11579,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127860,
        "StepNumber": 4,
        "Description": "My ActivitiesMy ActivitiesSCREENPolicy CenterMENUBARPolicyMENUNew SubmissionCLICKCHOICE",
        "LocatorTypeId": 3,
        "Locator": "TabBar:PolicyTab:PolicyTab_NewSubmission-textEl",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 9927,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Policy_Menu",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9925,
    "ProjectId": 99,
    "LocatorType": 3,
    "Locator": "Desktop:MenuLinks:Desktop_DesktopActivities",
    "PageId": 1144,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "My ActivitiesMy ActivitiesSCREENPolicy CenterMENUBAR",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1144,
    "EntityName": "Page",
    "ProjectId": 99,
    "DictionaryPageType": 1,
    "Name": "My Activities",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9926,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//span[@id='TabBar:PolicyTab-btnIconEl']",
    "PageId": 1144,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "My ActivitiesMy ActivitiesSCREENPolicy CenterMENUBARPolicyMENU",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11579,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class PC_PolicyTab_NewSubmission_Click extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           \r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n   \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n                WebElement policyTabElement;\r\n            WebElement policyTabNewSubmissionElement;\r\n            WebDriverWait wait = new WebDriverWait(driver,40);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[@id='TabBar:PolicyTab-btnInnerEl']\"))));\r\n            \r\n            policyTabElement= driver.findElement(By.xpath(\"//span[@id='TabBar:PolicyTab-btnInnerEl']\"));\r\n            Actions act = new Actions(driver);\r\n            act.moveToElement(policyTabElement).moveByOffset(40,0).click().build().perform();\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[@id='TabBar:PolicyTab:PolicyTab_NewSubmission-textEl']\"))));\r\n            \r\n            policyTabNewSubmissionElement= driver.findElement(By.xpath(\"//span[@id='TabBar:PolicyTab:PolicyTab_NewSubmission-textEl']\"));\r\n            act.moveToElement(policyTabNewSubmissionElement).moveByOffset(40,0).click().build().perform();\r\n\r\n            actionResult.status = true;\r\n            actionResult.comments = \"Executed Successfully\"; \r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }          \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PC_PolicyTab_NewSubmission_Click",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9927,
    "ProjectId": 99,
    "LocatorType": 3,
    "Locator": "TabBar:PolicyTab:PolicyTab_NewSubmission-textEl",
    "PageId": 1144,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "My ActivitiesMy ActivitiesSCREENPolicy CenterMENUBARPolicyMENUNew SubmissionCLICKCHOICE",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9442,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 128297,
        "StepNumber": 1,
        "Description": "VerifyNewSubmissionScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12082,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128293,
        "StepNumber": 2,
        "Description": "Enter Account Number",
        "LocatorTypeId": 3,
        "Locator": "NewSubmission:NewSubmissionScreen:SelectAccountAndProducerDV:Account-inputEl",
        "ActionId": 43,
        "ParameterName": "P_3_Account_Number",
        "ParameterValue": "DT_Start_Policy_Account_Number",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128294,
        "StepNumber": 3,
        "Description": "Click on Organisation",
        "LocatorTypeId": 3,
        "Locator": "NewSubmission:NewSubmissionScreen:SelectAccountAndProducerDV:ProducerSelectionInputSet:Producer-inputEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128290,
        "StepNumber": 4,
        "Description": "SelectOrgNameAndProducerCode",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_OrgNameAndProdCode",
        "CustomActionId": 11775,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128285,
        "StepNumber": 5,
        "Description": "SelectProducer",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_OrgNameAndProdCode",
        "CustomActionId": 12604,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128295,
        "StepNumber": 6,
        "Description": "EffectiveDateFromSystem",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12080,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128274,
        "StepNumber": 7,
        "Description": "EffectiveDate_FutureDatedWith30days",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12087,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128275,
        "StepNumber": 8,
        "Description": "YesOrNoHouseholdMembersEmployed",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": 13869,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128281,
        "StepNumber": 9,
        "Description": "Clear Effective date",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'nullDate-inputEl')]",
        "ActionId": 8,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128282,
        "StepNumber": 10,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128283,
        "StepNumber": 11,
        "Description": "EffectiveDate_FutureDatedWithAdditionOf8Days",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12874,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128287,
        "StepNumber": 12,
        "Description": "EffectiveDate_BackDated",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12084,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128289,
        "StepNumber": 13,
        "Description": "Clear Effective Date",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'nullDate-inputEl')]",
        "ActionId": 8,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128276,
        "StepNumber": 14,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128279,
        "StepNumber": 15,
        "Description": "EffectiveDate_FutureDated21_Copy",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12876,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128278,
        "StepNumber": 16,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128288,
        "StepNumber": 17,
        "Description": "EffectiveDate_FutureDated",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12086,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128284,
        "StepNumber": 18,
        "Description": "Enter Effective Date",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'nullDate-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128291,
        "StepNumber": 19,
        "Description": "New SubmissionsSingle or Multiple PoliciesSingle",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,\"CreateSingle_true-inputEl\")]",
        "ActionId": 7,
        "ParameterName": "P_4_Single_or_Multiple_PoliciesSingle_oliciesSingle_RADIOBUTTONGROUP",
        "ParameterValue": "DT_StartPolicySubmission_Single_or_Multiple_PoliciesSingle_oliciesSingle_RADIOBUTTONGROUP",
        "CustomActionId": null,
        "ObjectDictionaryId": 10134,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128273,
        "StepNumber": 20,
        "Description": "Random click",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'NewSubmission:NewSubmissionScreen:ttlBar')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128277,
        "StepNumber": 21,
        "Description": "Meemic_HOME_NewSubmission",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(text(),'Select Meemic Home')]/parent::td/preceding-sibling::td/div/a",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 25,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128292,
        "StepNumber": 22,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "P_6_Wait",
        "ParameterValue": "10",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128280,
        "StepNumber": 23,
        "Description": "Click on Select Button",
        "LocatorTypeId": 7,
        "Locator": "(//a[text()='Select'])[1]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128296,
        "StepNumber": 24,
        "Description": "Click on Select Button",
        "LocatorTypeId": 7,
        "Locator": "(//a[text()='Select'])[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128286,
        "StepNumber": 25,
        "Description": "Click Select Legacy",
        "LocatorTypeId": 7,
        "Locator": "(//a[text()='Select'])[3]",
        "ActionId": 9,
        "ParameterName": "OnlyForMILegacy",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "StartPolicySubmission_Home",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12082,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyNewSubmissionScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ntry{\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'NewSubmission:NewSubmissionScreen:ttlBar')]\"))));\n\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'NewSubmission:NewSubmissionScreen:ttlBar')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"New Submissions\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'New Submissions' screen successfully\";\n\t\t}\n\t}\n\tcatch(Exception e){\n\t\tString exceptionMsg = e.getMessage();\n\t\tactionResult.status = false;\n           \tactionResult.comments =  \"'New Submissions' screen is not displayed\";\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyNewSubmissionScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12080,
    "Description": "To get the required effective date from system icon",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EffectiveDateFromSystem extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\nfor(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\"));\r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        String settingText=settingContents.getText();\r\n        int dateTimeIndex=settingText.indexOf(\"Date/Time:\");\r\n        String dateTime=settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        System.out.println(\"date:\"+effectiveDate);\r\n        System.setProperty(\"EffectiveDate\", effectiveDate);\r\n              \r\n                    WebDriverWait wait=new WebDriverWait(driver, 20);\r\n            wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\"))));\r\n            WebElement effectiveDateEle=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\"));\r\n            String s=Keys.chord(Keys.CONTROL,\"a\");\r\n            effectiveDateEle.sendKeys(s);\r\n            effectiveDateEle.sendKeys(Keys.DELETE);\r\n             //driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).clear();\r\n             Thread.sleep(2000);\r\n             effectiveDateEle.sendKeys(effectiveDate);\r\n        //driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).sendKeys(effectiveDate);\r\n            actionResult.SaveParameterValue(\"DT_EffectiveDate\", effectiveDate);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"effective date entered\";\r\n            \r\n              /*  Build Number and Environment   */\r\n            \r\n            int builtNum=settingText.indexOf(\"Jenkins Build #:\");\r\n        String buildNumber=settingText.substring(builtNum).substring(0,21);\r\n        //System.out.println(\"Build Number is :\"+buildNumber);\r\n        \r\n        int serveriD=settingText.indexOf(\"Server ID:\");\r\n        String serverID=settingText.substring(serveriD).substring(0);\r\n        //System.out.println(\"Server is :\"+serverID);\r\n        \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"effective date entered and Build Number is :\"+buildNumber+ \"and Server is: \"+serverID;\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EffectiveDateFromSystem",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12087,
    "Description": "Change the Effective Date prior to 30 Days.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.Calendar;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EffectiveDate_FutureDatedWith30days extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n \r\n       for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\"));\r\n        Thread.sleep(2000);\r\n        defaultEffectiveDate.clear();\r\n        Thread.sleep(2000);\r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        String settingText=settingContents.getText();\r\n        int dateTimeIndex=settingText.indexOf(\"Date/Time:\");\r\n        String dateTime=settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        \r\n        // String[] date = effectiveDate.split(\"/\");\r\n        //   effectiveDate = date[1].toString();\r\n        //      int days = Integer.parseInt(effectiveDate);\r\n        //    int reqDays = days-8;\r\n        //    System.out.println(reqDays);\r\n        //    if(reqDays<0) {\r\n            //           reqDays = Math.abs(reqDays);\r\n            //       System.out.println(reqDays);\r\n                     \r\n        // }\r\n        //    String targetDay =  Integer.toString(reqDays);\r\n        //    targetDay = date[1].replace(effectiveDate, targetDay).toString();\r\n        //    String backDatedDate = date[0].toString()+\"/\"+targetDay+\"/\"+date[2].toString();\r\n        //    System.out.println(backDatedDate);\r\n        \r\n        //SimpleDateFormat date1=new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(targetFormat.parse(effectiveDate));\r\n        c.add(Calendar.DATE, +30);  // number of days to subtract\r\n        String futureDatedDate = targetFormat.format(c.getTime());\r\n        \r\n        Thread.sleep(2000);\r\n        //driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).clear();\r\n        //Thread.sleep(2000);\r\n        driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).sendKeys(futureDatedDate);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"effective date entered\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EffectiveDate_FutureDatedWith30days",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13869,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesOrNoHouseholdMembersEmployed extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\nfor(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {\r\n            WebElement educatedMemberYes = driver.findElement(By.xpath(\"//input[contains(@id, 'isAnyMemEducatorInd_true-inputEl')]\"));\r\n            WebElement educatedMemberNo  = driver.findElement(By.xpath(\"//input[contains(@id, 'isAnyMemEducatorInd_false-inputEl')]\"));\r\n        JavascriptExecutor js       = (JavascriptExecutor)driver;\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            js.executeScript(\"arguments[0].click()\",educatedMemberYes);\r\n            //AAADriveYesEle.click();\r\n                actionResult.status   = true;\r\n                actionResult.comments = \"'Household members employed in education community' has been selected as : 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            js.executeScript(\"arguments[0].click()\",educatedMemberNo);\r\n            //AAADriveNoEle.click();\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'Household members employed in education community' has been selected as : 'No'\";\r\n        }\r\n    \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoHouseholdMembersEmployed",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12874,
    "Description": "Change the Effective Date prior to 8 Days.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.Calendar;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EffectiveDate_FutureDatedWithAdditionOf8Days extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n \r\n       for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\"));\r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        String settingText=settingContents.getText();\r\n        int dateTimeIndex=settingText.indexOf(\"Date/Time:\");\r\n        String dateTime=settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        \r\n        // String[] date = effectiveDate.split(\"/\");\r\n        //   effectiveDate = date[1].toString();\r\n        //      int days = Integer.parseInt(effectiveDate);\r\n        //    int reqDays = days-8;\r\n        //    System.out.println(reqDays);\r\n        //    if(reqDays<0) {\r\n            //           reqDays = Math.abs(reqDays);\r\n            //       System.out.println(reqDays);\r\n                     \r\n        // }\r\n        //    String targetDay =  Integer.toString(reqDays);\r\n        //    targetDay = date[1].replace(effectiveDate, targetDay).toString();\r\n        //    String backDatedDate = date[0].toString()+\"/\"+targetDay+\"/\"+date[2].toString();\r\n        //    System.out.println(backDatedDate);\r\n        \r\n        //SimpleDateFormat date1=new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(targetFormat.parse(effectiveDate));\r\n        c.add(Calendar.DATE, +8);  // number of days to subtract\r\n        String futureDatedDate = targetFormat.format(c.getTime());\r\n        \r\n        System.out.println(futureDatedDate);\r\n        actionResult.SaveParameterValue(\"DT_FutureEffectiveDate\", futureDatedDate);\r\n\r\n        \r\n        driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).sendKeys(futureDatedDate);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"effective date entered\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EffectiveDate_FutureDatedWithAdditionOf8Days",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12084,
    "Description": "Change the Effective Date prior to 7 Days.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.Calendar;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EffectiveDate_BackDated extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n \r\n       for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\"));\r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        String settingText=settingContents.getText();\r\n        int dateTimeIndex=settingText.indexOf(\"Date/Time:\");\r\n        String dateTime=settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        \r\n        // String[] date = effectiveDate.split(\"/\");\r\n        //   effectiveDate = date[1].toString();\r\n        //      int days = Integer.parseInt(effectiveDate);\r\n        //    int reqDays = days-8;\r\n        //    System.out.println(reqDays);\r\n        //    if(reqDays<0) {\r\n            //           reqDays = Math.abs(reqDays);\r\n            //       System.out.println(reqDays);\r\n                     \r\n        // }\r\n        //    String targetDay =  Integer.toString(reqDays);\r\n        //    targetDay = date[1].replace(effectiveDate, targetDay).toString();\r\n        //    String backDatedDate = date[0].toString()+\"/\"+targetDay+\"/\"+date[2].toString();\r\n        //    System.out.println(backDatedDate);\r\n        \r\n        //SimpleDateFormat date1=new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(targetFormat.parse(effectiveDate));\r\n        c.add(Calendar.DATE, -8);  // number of days to subtract\r\n        String backDatedDate = targetFormat.format(c.getTime());\r\n\r\n        \r\n        driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).sendKeys(backDatedDate);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"effective date entered\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EffectiveDate_BackDated",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12876,
    "Description": "Change the Effective Date prior to 21 Days.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.Calendar;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EffectiveDate_FutureDated21_Copy extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n \r\n       for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\"));\r\n        Thread.sleep(2000);\r\n        defaultEffectiveDate.clear();\r\n        Thread.sleep(2000);\r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        String settingText=settingContents.getText();\r\n        int dateTimeIndex=settingText.indexOf(\"Date/Time:\");\r\n        String dateTime=settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        \r\n        // String[] date = effectiveDate.split(\"/\");\r\n        //   effectiveDate = date[1].toString();\r\n        //      int days = Integer.parseInt(effectiveDate);\r\n        //    int reqDays = days-8;\r\n        //    System.out.println(reqDays);\r\n        //    if(reqDays<0) {\r\n            //           reqDays = Math.abs(reqDays);\r\n            //       System.out.println(reqDays);\r\n                     \r\n        // }\r\n        //    String targetDay =  Integer.toString(reqDays);\r\n        //    targetDay = date[1].replace(effectiveDate, targetDay).toString();\r\n        //    String backDatedDate = date[0].toString()+\"/\"+targetDay+\"/\"+date[2].toString();\r\n        //    System.out.println(backDatedDate);\r\n        \r\n        //SimpleDateFormat date1=new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(targetFormat.parse(effectiveDate));\r\n        c.add(Calendar.DATE, +21);  // number of days to subtract\r\n        String futureDatedDate = targetFormat.format(c.getTime());\r\n        \r\n        Thread.sleep(2000);\r\n        //driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).clear();\r\n        //Thread.sleep(2000);\r\n        driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).sendKeys(futureDatedDate);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"effective date entered\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EffectiveDate_FutureDated21_Copy",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12086,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EffectiveDate_FutureDated extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n \r\n       for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\"));\r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        String settingText=settingContents.getText();\r\n        int dateTimeIndex=settingText.indexOf(\"Date/Time:\");\r\n        String dateTime=settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n        int nextMonthDay = 0;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        \r\n        String[] date = effectiveDate.split(\"/\");\r\n              effectiveDate = date[1].toString();\r\n              int days      = Integer.parseInt(effectiveDate);\r\n              int noOfDaysAhead = Integer.parseInt(inputValue);\r\n              int reqDays   = days + noOfDaysAhead;\r\n              System.out.println(reqDays);\r\n              if(reqDays<0) {\r\n                     reqDays = Math.abs(reqDays);\r\n                     System.out.println(reqDays);\r\n                     \r\n               } else if(reqDays > 31) {\r\n                   int extraDays = reqDays - 31;\r\n                   reqDays = nextMonthDay + extraDays;\r\n               }\r\n              String targetDay       = Integer.toString(reqDays);\r\n//              targetDay              = date[1].replace(effectiveDate, targetDay).toString();\r\n              String futureDatedDate = date[0].toString()+\"/\"+targetDay+\"/\"+date[2].toString();\r\n              System.out.println(futureDatedDate);\r\n\r\n        \r\n              driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).sendKeys(futureDatedDate);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"effective date entered\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EffectiveDate_FutureDated",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10134,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//*[contains(@id,\"CreateSingle_true-inputEl\")]",
    "PageId": 1145,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "New SubmissionsSingle or Multiple PoliciesSingle",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1145,
    "EntityName": "Page",
    "ProjectId": 99,
    "DictionaryPageType": 1,
    "Name": "New Submissions",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9414,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 127995,
        "StepNumber": 1,
        "Description": "VerifyQualificationScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11598,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127998,
        "StepNumber": 2,
        "Description": "Policy_Type_Selection",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Homeowners (HO3)",
        "CustomActionId": 11597,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128003,
        "StepNumber": 3,
        "Description": "Meemic_Policy_Selection",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Homeowners (HO3)",
        "CustomActionId": 13875,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128004,
        "StepNumber": 4,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12444,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128005,
        "StepNumber": 5,
        "Description": "QualificationQualificationSCREENAutofillBUTTON",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'AutoFill-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 10137,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127997,
        "StepNumber": 6,
        "Description": "Wait for page load",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128008,
        "StepNumber": 7,
        "Description": "EnterQualificationQuestions_Home",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_QualificationQuestions",
        "CustomActionId": 11601,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128000,
        "StepNumber": 8,
        "Description": "Are the premises used",
        "LocatorTypeId": 7,
        "Locator": "(//input[@data-ref='inputEl']) [29]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127999,
        "StepNumber": 9,
        "Description": "Do you rent your home",
        "LocatorTypeId": 7,
        "Locator": "(//input[@data-ref='inputEl']) [17]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128006,
        "StepNumber": 10,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128001,
        "StepNumber": 11,
        "Description": "rent home",
        "LocatorTypeId": 7,
        "Locator": "(//input[@data-ref='inputEl']) [22]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128002,
        "StepNumber": 12,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128007,
        "StepNumber": 13,
        "Description": "QualificationQualificationSCREENNext_BUTTON",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'Next-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 10138,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127996,
        "StepNumber": 14,
        "Description": "VarifyPageText",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Policy Info",
        "CustomActionId": 12443,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Qualification_Home",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11598,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class VerifyQualificationScreen extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n\r\n              WebDriverWait wait=new WebDriverWait(driver,15);\r\n              Thread.sleep(5000);\r\n        WebElement pageTitleEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'QualificationScreen:ttlBar')]\"))));\r\n\r\n\r\n        //WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'QualificationScreen:ttlBar')]\"));\r\n        String actPageTitle = pageTitleEle.getText();\r\n        if(actPageTitle.equals(\"Qualification\")){\r\n        if( driver.findElements(By.xpath(\"//*[contains(@id,'closureAcg-inputEl')]\")).size()>0){\r\n        driver.findElement(By.xpath(\"//*[contains(@id,'closureAcg-inputEl')]\")).click();}\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Naviagted to 'Qualification' screen successfully\";\r\n        }\r\n    }\r\n    catch(Exception e){\r\n        String exceptionMsg = e.getMessage();\r\n        actionResult.status = false;\r\n            actionResult.comments =  \"'Qualification' screen is not displayed\";\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyQualificationScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11597,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Policy_Type_Selection extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        \r\n   driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS);\r\n       for(int i =1; i<=5; i++) \r\n    {       \r\n    try{\r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,60);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PolicyType-inputEl') or contains(@id,'FLPKGHOPTRange-inputEl')]\"))));\r\n        \r\n        WebElement policyTypeEle=driver.findElement(By.xpath(\"//input[contains(@id,'PolicyType-inputEl') or contains(@id,'FLPKGHOPTRange-inputEl')]\"));\r\n    \r\n        policyTypeEle.click();\r\n        Thread.sleep(1000);\r\n        WebElement policyTypeValueEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n        policyTypeValueEle.click();\r\n        Thread.sleep(4000);\r\n        \r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        /* js.executeScript(\"window.scrollBy(0,250)\",\"\");\r\n         js.executeScript(\"arguments[0].scrollIntoView();\", babycare);\r\n         js.executeScript(\"arguments[0].click();\",babycare);*/\r\n        \r\n        \r\n         if(driver.findElements(By.xpath(\"//*[contains(text(),'Is there a daycare or licensed babysitting')]//parent::td//following-sibling::td//td[2]//input\")).size()>0)\r\n         {\r\n             WebElement babycare   = driver.findElement(By.xpath(\"//*[contains(text(),'Is there a daycare or licensed babysitting')]//parent::td//following-sibling::td//td[2]//input\"));\r\n             js.executeScript(\"window.scrollBy(0,250)\",\"\");\r\n             js.executeScript(\"arguments[0].scrollIntoView();\", babycare);\r\n             js.executeScript(\"arguments[0].click();\",babycare);\r\n             Thread.sleep(2000);\r\n        \r\n       \r\n       WebElement nextBtnEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//span[contains(@id,'ext') and contains(text(),'Next')]\")));\r\n\r\n        \r\n        js.executeScript(\"arguments[0].style.border='2px solid red'\", nextBtnEle);\r\n        js.executeScript(\"arguments[0].scrollIntoView();\", nextBtnEle);\r\n        js.executeScript(\"arguments[0].click();\",nextBtnEle);\r\n       \r\n    }\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n    \r\n    break;\r\n    }\r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Policy_Type_Selection",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13875,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Meemic_Policy_Selection extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n    try{\r\n        WebDriverWait wait = new WebDriverWait(driver,60);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id, 'MeemicHome-inputEl')]\"))));\r\n        \r\n        WebElement policyTypeEle=driver.findElement(By.xpath(\"//input[contains(@id, 'MeemicHome-inputEl')]\"));\r\n    \r\n        policyTypeEle.click();\r\n        Thread.sleep(1000);\r\n        WebElement policyTypeValueEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n        policyTypeValueEle.click();\r\n        Thread.sleep(2000);\r\n        \r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n    \r\n    break;\r\n    }\r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Meemic_Policy_Selection",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12444,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickOnNextBtn extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        try \r\n        {   \r\n            \r\n        WebElement nextBtnEle;\r\n        \r\n        driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,30);\r\n        Thread.sleep(2000);\r\n        nextBtnEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//span[contains(@id,'ext') and contains(text(),'Next')]\")));\r\n\r\n        //nextBtnEle=driver.findElement(By.xpath(\"//a[@id='SubmissionWizard:Next']\"));\r\n        //wait.until(ExpectedConditions.elementToBeClickable(nextBtnEle));\r\n\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        js.executeScript(\"arguments[0].style.border='2px solid red'\", nextBtnEle);\r\n        js.executeScript(\"arguments[0].scrollIntoView();\", nextBtnEle);\r\n        js.executeScript(\"arguments[0].click();\",nextBtnEle);\r\n        \r\n        actionResult.status = true;\r\n         actionResult.comments =  \"Clicked On NEXT button\";\r\n        //break;    \r\n        \r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }       \r\n    \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnNextBtn",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10137,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//*[contains(@id,'AutoFill-btnInnerEl')]",
    "PageId": 1146,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "QualificationQualificationSCREENAutofillBUTTON",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1146,
    "EntityName": "Page",
    "ProjectId": 99,
    "DictionaryPageType": 1,
    "Name": "Qualification",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11601,
    "Description": "Parameter Syntax: QualificationQuestion1 AND Yes/No , QualificationQuestion2 AND Yes/No\r\nEg: Is there a trampoline AND Yes , Is the insured property in foreclosure AND No",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterQualificationQuestions_Home extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        WebDriverWait wait    = new WebDriverWait(driver,30);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        String[] qualInfo = inputValue.split(\" , \");\r\n        int qualCount= qualInfo.length;\r\n        \r\n        for(int i=0;i<=qualCount-1;i++)\r\n        {\r\n        String[] qualDetails = qualInfo[i].split(\" AND \");\r\n        String qualQuestions  = qualDetails[0].toString();\r\n        String qualValue      = qualDetails[1].toString();\r\n        String qualValueInput = \"\";\r\n        if(qualValueInput.equalsIgnoreCase(\"Yes\")){\r\n            qualValueInput = \"true\";\r\n            System.out.println(qualValueInput);\r\n            }else if(qualValueInput.equalsIgnoreCase(\"No\")){\r\n                qualValueInput = \"false\";\r\n                System.out.println(qualValueInput);\r\n            }\r\n        \r\n        try{            \r\n            WebElement radioElemt = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'\"+qualQuestions+\"')]/parent::td/following-sibling::td//input[contains(@id,'radio') and @inputvalue='\"+qualValueInput+\"']\"))));\r\n            System.out.println(qualValueInput);\r\n            js.executeScript(\"arguments[0].scrollIntoView();\", radioElemt);\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", radioElemt); \r\n            Thread.sleep(2000);\r\n            //js.executeScript(\"arguments[0].click();\",radioElemt);\r\n            radioElemt.click();\r\n            Thread.sleep(2000); \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Executed Successfully\";\r\n        }\r\n        catch(Exception e){\r\n            actionResult.comments = \"Exception at Value Element\"+e.getMessage();\r\n            actionResult.status   = false;\r\n        }\r\n        }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterQualificationQuestions_Home",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10138,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//*[contains(@id,'Next-btnInnerEl')]",
    "PageId": 1146,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "QualificationQualificationSCREENNext_BUTTON",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12443,
    "Description": "Verify the expected text from the page body text",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VarifyPageText extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \nString bodyText=\"\";\n\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\n\t\tWebDriverWait wait = new WebDriverWait(driver, 30);\t\t\t\n\t\tbodyText = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.tagName(\"body\")))).getText();\n\t\tif(bodyText.contains(inputValue))\n\t\t{\n\t\t\tactionResult.status = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tactionResult.status = false;\n\t\t}\n\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VarifyPageText",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9398,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 127802,
        "StepNumber": 1,
        "Description": "Wait for page to display",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127793,
        "StepNumber": 2,
        "Description": "VerifyPolicyInfoScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11602,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127780,
        "StepNumber": 3,
        "Description": "Clear ",
        "LocatorTypeId": 7,
        "Locator": "(//input[@class='x-form-field x-form-text x-form-text-default  '])[2]",
        "ActionId": 8,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127748,
        "StepNumber": 4,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127779,
        "StepNumber": 5,
        "Description": "Effective date ",
        "LocatorTypeId": 7,
        "Locator": "(//input[@class='x-form-field x-form-text x-form-text-default  '])[2]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "12/01/2025",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127782,
        "StepNumber": 6,
        "Description": "EnterEffectiveDate",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "12/01/2025",
        "CustomActionId": 11632,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127789,
        "StepNumber": 7,
        "Description": "EffectiveDateFromSystem",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12080,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127790,
        "StepNumber": 8,
        "Description": "EnterEffectiveDateOnPolicyInfo",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12832,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127751,
        "StepNumber": 9,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127778,
        "StepNumber": 10,
        "Description": "ClickOnAutoFillButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "ForOnlyMILegacy",
        "ParameterValue": null,
        "CustomActionId": 12452,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127774,
        "StepNumber": 11,
        "Description": "Enter Legacy NI1 value",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'Legacy_NI_1-inputEl')]",
        "ActionId": 65,
        "ParameterName": "ForMILegacyOnly",
        "ParameterValue": "numeric:6",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127775,
        "StepNumber": 12,
        "Description": "PolicyType_Home",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "OnlyForMILegacy",
        "ParameterValue": "DT_PolicyType",
        "CustomActionId": 11630,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127784,
        "StepNumber": 13,
        "Description": "Verify Educational commuity",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'isAnyMemEducatorInd_false-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127773,
        "StepNumber": 14,
        "Description": "Click No Educational commuity",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'isAnyMemEducatorInd_false-inputEl')]",
        "ActionId": 9,
        "ParameterName": "ForFLPackage",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127797,
        "StepNumber": 15,
        "Description": "YesorNoPreviousAddress",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PolicyInfoYesorNoPreviousAddress",
        "CustomActionId": 11603,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127803,
        "StepNumber": 16,
        "Description": "Wait ",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127798,
        "StepNumber": 17,
        "Description": "YesorNoAAAMembership",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PolicyInfoYesorNoAAAMembership",
        "CustomActionId": 11604,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127750,
        "StepNumber": 18,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127785,
        "StepNumber": 19,
        "Description": "EnterMemberShipID",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'MembershipPNIInputSet:membership-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 20,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127786,
        "StepNumber": 20,
        "Description": "EnterMemberShipYear",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'MembershipPNIInputSet:membersince-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127752,
        "StepNumber": 21,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127772,
        "StepNumber": 22,
        "Description": "BypassMembership",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12626,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127753,
        "StepNumber": 23,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127760,
        "StepNumber": 24,
        "Description": "Verify ByPass validation",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'MembershipPNIInputSet:byPassValidation-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127749,
        "StepNumber": 25,
        "Description": "ClickByPassValidation",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11617,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127777,
        "StepNumber": 26,
        "Description": "PolicyInfo_MembershipDetails",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11619,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127805,
        "StepNumber": 27,
        "Description": "YesorNoFirstCompanyForInsurance",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PolicyInfoYesorNoFirstCompanyForInsurance",
        "CustomActionId": 11605,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127754,
        "StepNumber": 28,
        "Description": "ClickByPassValidation",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11617,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127788,
        "StepNumber": 29,
        "Description": "Bypass validation",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'byPassValidation-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127799,
        "StepNumber": 30,
        "Description": "YesorNoForPaperlessComm",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PolicyInfoYesorNoPaperlessComm",
        "CustomActionId": 11606,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127771,
        "StepNumber": 31,
        "Description": "ScrollToPaperless",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12941,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127770,
        "StepNumber": 32,
        "Description": "PaperlessAsNO",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'PaperlessPreferenceID-table')]/descendant::td[3]/descendant::div/input",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127800,
        "StepNumber": 33,
        "Description": "YesorNoDocsConsent",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PolicyInfoYesorNoDocsConsent",
        "CustomActionId": 11607,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127764,
        "StepNumber": 34,
        "Description": "Click Yes for LIFE",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'AcgInputSet:life-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127755,
        "StepNumber": 35,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127762,
        "StepNumber": 36,
        "Description": "ACG Life Policy Number",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'acgLifePolicyNumber-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "1234567879",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127761,
        "StepNumber": 37,
        "Description": "Click Yes for Flood",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'AcgInputSet:flood-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127756,
        "StepNumber": 38,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127765,
        "StepNumber": 39,
        "Description": "ACG Flood Policy Number",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'acgFloodPolicyNumber-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "1234567879",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127791,
        "StepNumber": 40,
        "Description": "YesorNoHouseholdMembersEmployedIntheEducationalComunity",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PolicyInfoYesorNoHouseholdmembersEmployed",
        "CustomActionId": 11616,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127768,
        "StepNumber": 41,
        "Description": "Verify SelectOrgNameAndProducerCode_Bindingagent",
        "LocatorTypeId": 7,
        "Locator": "//div[contains(@id,'Producer1:SelectOrganization')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127787,
        "StepNumber": 42,
        "Description": "SelectOrgNameAndProducerCode_Bindingagent",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11640,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127794,
        "StepNumber": 43,
        "Description": "Policy InfoPolicy InfoSCREENNamed InsuredFORMPolicy InfoSCREENNamed InsuredFORMInsured NameHYPERLINK",
        "LocatorTypeId": 7,
        "Locator": "//div[contains(@id,'AccountInfoInputSet:Name-bodyEl') and @data-ref='bodyEl']",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 9944,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 45,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127767,
        "StepNumber": 44,
        "Description": "Wait For Page Load",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "7",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127804,
        "StepNumber": 45,
        "Description": "EnterDateofBirthInContactDetails",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PolicyInfoDOB",
        "CustomActionId": 11610,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127792,
        "StepNumber": 46,
        "Description": "EducationLevelStateWise",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PolicyInfoEducationLevel",
        "CustomActionId": 11752,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127776,
        "StepNumber": 47,
        "Description": "Verify Education Level",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,':EducationLevel-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127806,
        "StepNumber": 48,
        "Description": "Education_Level",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Graduate Work or Degree",
        "CustomActionId": 11679,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127801,
        "StepNumber": 49,
        "Description": "EnterMaritalStatus",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PolicyInfoMaritalStatus",
        "CustomActionId": 11614,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127781,
        "StepNumber": 50,
        "Description": "PrimaryContactTypeAndValue",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11634,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127759,
        "StepNumber": 51,
        "Description": "EnterCensusTractNumberInPolicyInfoScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11661,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127795,
        "StepNumber": 52,
        "Description": "Named InsuredNamed InsuredSCREENOKBUTTON",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'ContactDetailScreen:Update-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 9950,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127783,
        "StepNumber": 53,
        "Description": "Verify Prior insurence ",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:LOBWizardStepGroup:SubmissionWizard_PolicyInfoScreen:SubmissionWizard_PolicyInfoDV:AccountInfoInputSet:PreviousAddInfo_AcgInputSet:prevstaylessthan3_false-inputEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": "NO",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127766,
        "StepNumber": 54,
        "Description": "Does anyone on the Policy own and occupy one of the following?",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'question_option3-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127757,
        "StepNumber": 55,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127769,
        "StepNumber": 56,
        "Description": "Has the Named Insured lived at the Policy Address for less than 3 years?",
        "LocatorTypeId": 7,
        "Locator": "//input[@id='SubmissionWizard:LOBWizardStepGroup:SubmissionWizard_PolicyInfoScreen:SubmissionWizard_PolicyInfoDV:AccountInfoInputSet:PreviousAddInfo_AcgInputSet:prevstaylessthan3_false-inputEl']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127758,
        "StepNumber": 57,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127763,
        "StepNumber": 58,
        "Description": "Verify MembershipWaiverExpirationDate",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(text(),'Membership Waiver Expiration Date')]",
        "ActionId": 62,
        "ParameterName": null,
        "ParameterValue": "Membership Waiver Expiration Date",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127796,
        "StepNumber": 59,
        "Description": "Policy InfoPolicy InfoSCREENNext_BUTTON",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:Next-btnInnerEl",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 9952,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Policy_Info_Home",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11602,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyPolicyInfoScreen extends ActionResult\n   {\n        /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n\n\t//</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\n       actionResult.comments =  \"Before try block\";\n\tString screenTitle=\"\";\n\t\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t    wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'PolicyInfoScreen:ttlBar')]\"))));\n\n\t\tWebElement titlePolicyInfoScreen = driver.findElement(By.xpath(\"//span[contains(@id,'PolicyInfoScreen:ttlBar')]\"));\n\t\tscreenTitle = titlePolicyInfoScreen.getText();\n\t\tactionResult.comments =  \"Before if block\"+screenTitle;\n\t\tif(screenTitle.equals(\"Policy Info\")){\n           \t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"Inside if block\"+screenTitle;\n\t\t\tactionResult.comments =  \"User is on :\"+screenTitle+\" Screen\";\n\t\t}\n\t\telse{\n           \t\tactionResult.status = false;\n\t\t\tactionResult.comments =  screenTitle+\" Screen is not displayed\";\n\n\n\t\t}\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\t\n\t       \n \t///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n\t   return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyPolicyInfoScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11632,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnterEffectiveDate extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\t\t\n\t\tWebElement effectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'EffectiveDate-inputEl')]\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\teffectiveDate.sendKeys(s);\n\t\teffectiveDate.sendKeys(Keys.DELETE);\nThread.sleep(400) ;\n\t\teffectiveDate.sendKeys(inputValue);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";\n\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterEffectiveDate",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12832,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterEffectiveDateOnPolicyInfo extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n       \r\n        for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'EffectiveDate-inputEl')]\"));\r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        String settingText=settingContents.getText();\r\n        int dateTimeIndex=settingText.indexOf(\"Date/Time:\");\r\n        String dateTime=settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        System.out.println(\"date:\"+effectiveDate);\r\n        System.setProperty(\"EffectiveDate\", effectiveDate);\r\n              \r\n                    WebDriverWait wait=new WebDriverWait(driver, 20);\r\n            wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'EffectiveDate-inputEl')]\"))));\r\n            WebElement effectiveDateEle=driver.findElement(By.xpath(\"//input[contains(@id,'EffectiveDate-inputEl')]\"));\r\n            String s=Keys.chord(Keys.CONTROL,\"a\");\r\n            effectiveDateEle.sendKeys(s);\r\n            effectiveDateEle.sendKeys(Keys.DELETE);\r\n             //driver.findElement(By.xpath(\"//input[contains(@id,'EffectiveDate-inputEl')]\")).clear();\r\n             Thread.sleep(2000);\r\n             effectiveDateEle.sendKeys(effectiveDate);\r\n        //driver.findElement(By.xpath(\"//input[contains(@id,'EffectiveDate-inputEl')]\")).sendKeys(effectiveDate);\r\n            actionResult.SaveParameterValue(\"DT_EffectiveDate\", effectiveDate);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"effective date entered\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterEffectiveDateOnPolicyInfo",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12452,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickOnAutoFillButton extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\n\t\tWebElement autoFillBtnEle;\n   \t\tdriver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\tThread.sleep(2000);\n\t\tautoFillBtnEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//*[text()='Autofill']\")));\n\n\t       JavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t//js.executeScript(\"arguments[0].style.border='2px solid red'\", autoFillBtnEle);\n\t\tjs.executeScript(\"arguments[0].click();\",autoFillBtnEle);\n\n\t\tThread.sleep(3000);\n\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Clicked On AutoFill button\";\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = true;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnAutoFillButton",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11630,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class PolicyType_Home extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t//driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\tWebDriverWait wait = new WebDriverWait(driver,20);\n\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\tActions act = new Actions(driver);\n\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\tString inputValueVariable = inputValue;\n\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\t\n\ttry \n\t\t{\t\n\t\t\t\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HOPolicyType-inputEl')]\"))));\n\t\tWebElement policyTypeEle = driver.findElement(By.xpath(\"//input[contains(@id,'HOPolicyType-inputEl')]\"));\n\t\tjs.executeScript(\"arguments[0].setAttribute('style', 'border:2px solid red; background:yellow')\", policyTypeEle);\n\t\tjs.executeScript(\"arguments[0].click();\",policyTypeEle);\n\t\tpolicyTypeEle.sendKeys(selectText);\n\t\tact.moveToElement(policyTypeEle).sendKeys(Keys.DELETE).build().perform();\n\t\tjs.executeScript(\"arguments[0].value='\"+inputValueVariable+\"'\",policyTypeEle);\n\t\t//act.moveToElement(PriorAutoInsEle).sendKeys(Keys.ENTER).build().perform();\n\t\tact.moveToElement(policyTypeEle).sendKeys(Keys.TAB).build().perform();\n\t\t\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"The Value for the Field has been Selected as : \"+inputValueVariable;\n\n\t\tbreak;\n\t\t}\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\t\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PolicyType_Home",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11603,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesorNoPreviousAddress extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++)\r\n    {   \r\n    try\r\n    {\r\n        WebElement previousAddrYes = driver.findElement(By.xpath(\"(//input[contains(@id,'prevstaylessthan3_true-inputEl')])[1]\"));\r\n        WebElement previousAddrNo  = driver.findElement(By.xpath(\"(//input[contains(@id,'prevstaylessthan3_false-inputEl')])[1]\"));\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            previousAddrYes.click();\r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Has the Named Insured lived at the Policy Address for less than 3 years? : Answered as 'Yes'\";;\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            previousAddrNo.click();\r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Has the Named Insured lived at the Policy Address for less than 3 years? : Answered as 'No'\";;\r\n        }\r\n    \r\n    \r\n\r\n    break;\r\n    }\r\n    catch(Exception e) {\r\n    actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n    actionResult.status = false;\r\n    }\r\n    }\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoPreviousAddress",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11604,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesorNoAAAMembership extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++)\n\t{\n\ttry\n\t{ \t\t\n\t\tWebElement AAAMembershipYes = driver.findElement(By.xpath(\"//input[contains(@id,'PNIMemberShipID_true-inputEl')]\"));\n\t\tWebElement AAAMembershipNo = driver.findElement(By.xpath(\"//input[contains(@id,'PNIMemberShipID_false-inputEl')]\"));\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\tAAAMembershipYes.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Does Named Insured have a current AAA membership? - Answered as 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\tAAAMembershipNo.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Does Named Insured have a current AAA membership? - Answered as 'No'\";\n\t\t}\n\t\n\nbreak;\n\t}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n//actionResult.comments = \"'Does Named Insured have a current AAA membership?' is not displayed on the Policy Info screen\";\nactionResult.status = false;\n}\n}\n\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoAAAMembership",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12626,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class BypassMembership extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n        Thread.sleep(2000);\r\n        WebDriverWait wait = new WebDriverWait(driver,20);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebElement byPasscheckbox;\r\n        byPasscheckbox = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//*[contains(@id,'byPassValidation-inputEl')]\")));\r\n\r\n        //js.executeScript(\"arguments[0].style.border='2px solid red'\", nextBtnEle);\r\n        js.executeScript(\"arguments[0].click();\",byPasscheckbox);\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"Clicked On bypass button\";\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status   = true;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "BypassMembership",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11617,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickByPassValidation extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\nfor(int i =1; i<=5; i++)\r\n{       \r\n    try{\r\n            \r\n        WebElement byPass;\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        \r\n        byPass=driver.findElement(By.xpath(\"//input[contains(@id,'MembershipPNIInputSet:byPassValidation-inputEl')]\"));\r\n\r\n        WebDriverWait wait = new WebDriverWait(driver,25);\r\n    \r\n            wait.until(ExpectedConditions.visibilityOf(byPass));\r\n            js.executeScript(\"arguments[0].click()\",byPass);\r\n            \r\n            actionResult.status = true;\r\n                actionResult.comments =  \"Bypass Validation is Clicked successfully\";\r\n                break;\r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n            actionResult.comments = e.getMessage();\r\n\r\n    }\r\n}\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickByPassValidation",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11619,
    "Description": "Providing the Membership Details and Bypassing the Validation on Policy Info Screen.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class PolicyInfo_MembershipDetails extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n        try{\r\n        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,20);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        if(actionResult.getDTParameter(\"DT_PolicyInfoYesorNoAAAMembership\").contains(\"Yes\")){\r\n        String[] membershipParams = inputValue.split(\" AND \");\r\n        String membershipID   = membershipParams[0].toString();\r\n        String membershipYear = membershipParams[1].toString();\r\n        Actions act           = new Actions(driver);\r\n        String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PNIInputSet:membership-inputEl')]\"))));\r\n            WebElement membershipIDEle = driver.findElement(By.xpath(\"//input[contains(@id,'PNIInputSet:membership-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",membershipIDEle);\r\n            membershipIDEle.sendKeys(membershipID);\r\n            Thread.sleep(1000);\r\n            WebElement membershipSinceEle = driver.findElement(By.xpath(\"//input[contains(@id,'PNIInputSet:membersince-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",membershipSinceEle);\r\n            membershipSinceEle.sendKeys(membershipYear);\r\n            Thread.sleep(1000);\r\n                \r\n            //WebElement byPassValidationEle = driver.findElement(By.xpath(\"//input[contains(@id,'MembershipPNIInputSet:byPassValidation-inputEl')]\"));\r\n            //js.executeScript(\"arguments[0].click();\",byPassValidationEle);\r\n                \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Membership Information provided\";\r\n        }else{\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Membership not required\";\r\n        }\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PolicyInfo_MembershipDetails",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11605,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesorNoFirstCompanyForInsurance extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\n\t\tdriver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);\n\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'isFirst')][contains(@componentid,'true')]\")));\n\n\t\tWebElement firstCompanyYes = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'isFirst')][contains(@componentid,'true')]\"))));\n\t\tWebElement firstCompanyNo = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'isFirst')][contains(@componentid,'false')]\"))));\n\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\tjs.executeScript(\"arguments[0].click()\",firstCompanyYes);\n\t\t\tfirstCompanyYes.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Are we the first company you have contacted for an auto insurance quote? : Answered as 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\tjs.executeScript(\"arguments[0].click()\",firstCompanyNo);\n\t\t\tfirstCompanyNo.click();\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Are we the first company you have contacted for an auto insurance quote? : Answered as 'No'\";\n\t\t}\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoFirstCompanyForInsurance",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11606,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesorNoForPaperlessComm extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       for(int i =1; i<=2; i++) \r\n    {\r\n        try \r\n        {\r\n        Thread.sleep(3000);\r\n        driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);\r\n        WebDriverWait wait=new WebDriverWait(driver,30);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n\r\n        WebElement PaperlessCommYes = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'PaperlessCommunication_true-inputEl') or contains(@id,'PaperlessDiscount_true-inputEl')]\")));\r\n        js.executeScript(\"arguments[0].scrollIntoView();\", PaperlessCommYes);\r\n        // driver.findElement(By.xpath(\"//input[contains(@id,'PaperlessCommunication_true-inputEl') or contains(@id,'PaperlessDiscount_true-inputEl')]\"));\r\n        WebElement PaperlessCommNo = driver.findElement(By.xpath(\"//input[contains(@id,'PaperlessCommunication_false-inputEl') or contains(@id,'PaperlessDiscount_false-inputEl')]\"));\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            Thread.sleep(2000);\r\n            PaperlessCommYes.click();\r\n                actionResult.status = true; \r\n                actionResult.comments =  \"'Sign up for 'Paperless Communication'?' : Answered as 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            Thread.sleep(2000);\r\n            PaperlessCommNo.click(); \r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'Sign up for 'Paperless Communication'?' : Answered as 'No'\";\r\n        }\r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status   = true;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoForPaperlessComm",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12941,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ScrollToPaperless extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n       try \r\n        {           \r\n         WebDriverWait wait    = new WebDriverWait(driver,30);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        \r\n        WebElement paper = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//*[text()='Mobile Number']\"))));\r\n        js.executeScript(\"arguments[0].style.border='2px solid red'\", paper);\r\n        js.executeScript(\"arguments[0].scrollIntoView();\", paper);\r\n        \r\n        actionResult.status   = true;\r\n        actionResult.comments = \"Scrolled to element\"; \r\n        }\r\n        catch(Exception e) {\r\n            actionResult.status   = false;\r\n            actionResult.comments = \"Element is not found\";\r\n        }\r\n    \r\n        \r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ScrollToPaperless",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11607,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesorNoDocsConsent extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       for(int i =1; i<=3; i++) \r\n    {\r\n        try \r\n        {\r\n            //driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,10);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'GeneralDocumentsCTT_true')]\")));\r\n        WebElement GenDocsConsentYes= wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'GeneralDocumentsCTT_true')]\")));\r\n        WebElement GenDocsConsentNo= wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'GeneralDocumentsCTT_false')]\")));\r\n\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            GenDocsConsentYes.click(); \r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'General Documents Consent to Text' : Answered as 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            GenDocsConsentNo.click(); \r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'General Documents Consent to Text' : Answered as 'No'\";\r\n        }\r\n    \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status   = true;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoDocsConsent",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11616,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesorNoHouseholdMembersEmployedIntheEducationalComunity extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\n\t\tdriver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);\n\n\t\tWebDriverWait wait=new WebDriverWait(driver,30);\n\t\tWebElement pageTitleEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'isAnyMemEducatorInd_true-inputEl')]\"))));\n\t\t\n\t\tWebElement houseHoldYes = driver.findElement(By.xpath(\"//input[contains(@id,'isAnyMemEducatorInd_true-inputEl')]\"));\n\t\tWebElement houseHoldNo = driver.findElement(By.xpath(\"//input[contains(@id,'isAnyMemEducatorInd_false-inputEl')]\"));\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\thouseHoldYes.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Are any household members employed in the educational community? : Answered as 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\thouseHoldNo.click();\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Are any household members employed in the educational community? : Answered as 'No'\";;\n\t\t}\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\t\n\t\t}\n\t\tactionResult.status = true;\n\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoHouseholdMembersEmployedIntheEducationalComunity",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11640,
    "Description": "Searching and selecting the required Organization Name on Create Account screen.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectOrgNameAndProducerCode_Bindingagent extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++)\r\n{\r\n    try{\r\n    \r\n        String[] orgProducerCodeParams = inputValue.split(\" AND \");\r\n        String organizationName = orgProducerCodeParams[0].toString();\r\n        String ProducerCode = orgProducerCodeParams[1].toString();\r\n        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,20);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act = new Actions(driver);\r\n        String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(@id,'Producer1:SelectOrganization')]\"))));\r\n            WebElement searchOrgEle = driver.findElement(By.xpath(\"//div[contains(@id,'Producer1:SelectOrganization')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchOrgEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'OrganizationSearchPopupScreen:ttlBar')]\"))));\r\n            WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'OrganizationSearchPopupScreen:ttlBar')]\"));\r\n            String actPageTitle = pageTitleEle.getText();\r\n            if(actPageTitle.equals(\"Organizations\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Organizations' Screen has been displayed\";\r\n            }\r\n            else{\r\n                actionResult.status = false;\r\n                actionResult.comments =  \"The 'Organizations' Screen not displayed\";\r\n            }\r\n            \r\n            WebElement OrgTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'OrganizationSearchDV:GlobalContactNameInputSet:Name-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",OrgTxtEle);\r\n            OrgTxtEle.sendKeys(organizationName);\r\n            \r\n            WebElement searchBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'SearchLinksInputSet:Search')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchBtnEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'OrganizationSearchResultsLV:0:_Select')]\"))));\r\n            WebElement selectOrgBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'OrganizationSearchResultsLV:0:_Select')]\"));\r\n            js.executeScript(\"arguments[0].click();\",selectOrgBtnEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'Screen:ttlBar')]\"))));\r\n            WebElement pageTitleEle1 = driver.findElement(By.xpath(\"//span[contains(@id,'Screen:ttlBar')]\"));\r\n            String actPageTitle1 = pageTitleEle1.getText();\r\n            if(actPageTitle1.equals(\"Create account\") || actPageTitle1.equals(\"New Submissions\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Create account' Screen has been displayed\";\r\n            }\r\n            else{\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Create account' Screen not displayed\";\r\n            }\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode4-inputEl')]\"))));\r\n            WebElement producerCodeEle = driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode4-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",producerCodeEle);\r\n            producerCodeEle.sendKeys(selectText);\r\n            Thread.sleep(1000);\r\n            producerCodeEle.sendKeys(Keys.DELETE);\r\n            Thread.sleep(500);\r\n            producerCodeEle.sendKeys(ProducerCode);\r\n            producerCodeEle.sendKeys(Keys.ENTER);\r\n            Thread.sleep(1000);\r\n\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"The required 'Organization' and 'Producer Code' have been selected\";\r\n \r\n        \r\n    break;\r\n    }\r\ncatch(Exception e) {\r\nactionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\nactionResult.status   = true;\r\n}\r\n}\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectOrgNameAndProducerCode_Bindingagent",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9944,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//div[contains(@id,'AccountInfoInputSet:Name-bodyEl') and @data-ref='bodyEl']",
    "PageId": 1147,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Policy InfoPolicy InfoSCREENNamed InsuredFORMPolicy InfoSCREENNamed InsuredFORMInsured NameHYPERLINK",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1147,
    "EntityName": "Page",
    "ProjectId": 99,
    "DictionaryPageType": 1,
    "Name": "Policy Info",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11610,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnterDateofBirthInContactDetails extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\tWebElement DateOfBirthtxtField = driver.findElement(By.xpath(\"//input[contains(@id,'DateOfBirth-inputEl')]\"));\t\t\n\t\tDateOfBirthtxtField.sendKeys(Keys.chord(Keys.CONTROL,\"a\"),inputValue);\n\t\t///DateOfBirthtxtField.sendKeys(inputValue);\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"The Date Of Birth is enter as :\"+inputValue;\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterDateofBirthInContactDetails",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11752,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EducationLevelStateWise extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\n\n\tWebDriverWait wait = new WebDriverWait(driver,40);\n\t\t\n\tWebElement education=driver.findElement(By.xpath(\"//input[contains(@id,':EducationLevel-inputEl')]\"));\n\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\teducation.sendKeys(s);\n\teducation.sendKeys(Keys.DELETE);\n       education.sendKeys(inputValue);\n\tThread.sleep(2000);\n\teducation.sendKeys(Keys.ENTER);\n\teducation.sendKeys(Keys.TAB);\n\tThread.sleep(2000);\n\n\n}\ncatch(Exception e){\n\n           actionResult.comments =  \"No Education Level Required\";\n}\n\nactionResult.status = true;\nactionResult.comments = \"Executed Successfully\"; \n\n\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EducationLevelStateWise",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11679,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Education_Level extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tWebDriverWait wait=new WebDriverWait(driver, 20);\n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,':EducationLevel-inputEl')]\"))));\n\t\t\t\n\t\t\tWebElement education=driver.findElement(By.xpath(\"//input[contains(@id,':EducationLevel-inputEl')]\"));\n\t\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\teducation.sendKeys(s);\n\t\t\teducation.sendKeys(Keys.DELETE);\n\t\t\teducation.sendKeys(inputValue);\n\t\t\t\n\t\t\tThread.sleep(2000);\n\t\t\teducation.sendKeys(Keys.ENTER);\n\t\t\teducation.sendKeys(Keys.TAB);\n\t\t\t\n\t\t\tThread.sleep(2000);\n\t\t\t\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Education_Level",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11614,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterMaritalStatus extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n\r\nfor(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n        WebElement gender=driver.findElement(By.xpath(\"//input[contains(@id,'MaritalStatus-inputEl')]\"));\r\n        String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        gender.sendKeys(s);\r\n        gender.sendKeys(Keys.DELETE);\r\n        gender.sendKeys(inputValue);\r\n        //gender.sendKeys(Keys.ENTER);\r\n        Thread.sleep(1500);\r\n        gender.sendKeys(Keys.TAB);\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterMaritalStatus",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11634,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class PrimaryContactTypeAndValue extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\t\n\ttry \n\t\t{\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tActions act = new Actions(driver);\n\t\t\n\t\tWebElement primaryPhoneNo = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PrimaryPhone-inputEl')]\"))));\n\t\t\n\t\tjs.executeScript(\"arguments[0].setAttribute('style', 'border:2px solid red; background:yellow')\", primaryPhoneNo);\n\t\tjs.executeScript(\"arguments[0].click();\",primaryPhoneNo);\n\t\tThread.sleep(1000);\n\t\t\n\t\tWebElement primaryPhoneNoType = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'Home')]\"))));\n\t\tjs.executeScript(\"arguments[0].click();\",primaryPhoneNoType);\n\t\tThread.sleep(2000);\n\t\t\n\t\tWebElement primaryPhoneNoValue = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HomePhone:GlobalPhoneInputSet:NationalSubscriberNumber-inputEl')]\"))));\n\t\t\n\t\tjs.executeScript(\"arguments[0].setAttribute('style', 'border:2px solid red; background:yellow')\", primaryPhoneNoValue);\n\t\tjs.executeScript(\"arguments[0].click();\",primaryPhoneNoValue);\n\t\tprimaryPhoneNoValue.clear();\n\t\tThread.sleep(1000);\n\t\tjs.executeScript(\"arguments[0].click();\",primaryPhoneNoValue);\n\t\tprimaryPhoneNoValue.sendKeys(\"2311231234\");\n\t\tprimaryPhoneNoValue.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\t\t\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";\n\n\t\tbreak;\n\t\t}\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PrimaryContactTypeAndValue",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11661,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterCensusTractNumberInPolicyInfoScreen extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n        JavascriptExecutor js  = (JavascriptExecutor)driver;\r\n        Actions act            = new Actions(driver);\r\n        \r\n            try \r\n            {   \r\n                WebElement censusTract = driver.findElement(By.xpath(\"//input[contains(@id,'PolicyAddressDisplayInputSet:censustract') or contains(@id,':censustract-inputEl')]\"));\r\n                //String censusTractValue = censusTract.getAttribute(\"value\");\r\n                censusTract.click();\r\n                js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",censusTract);\r\n                Thread.sleep(1500);\r\n                act.moveToElement(censusTract).sendKeys(Keys.TAB).build().perform();\r\n                actionResult.status   = true;\r\n                actionResult.comments = \"Entered CensusTract Value : \" + inputValue;\r\n                \r\n                 \r\n            }\r\n    \r\n            catch(Exception e) {\r\n                actionResult.status   = true;\r\n                actionResult.comments = \"CensusTract value found: \";\r\n            }     \r\n            \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterCensusTractNumberInPolicyInfoScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9950,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//*[contains(@id,'ContactDetailScreen:Update-btnInnerEl')]",
    "PageId": 1149,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Named InsuredNamed InsuredSCREENOKBUTTON",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1149,
    "EntityName": "Page",
    "ProjectId": 99,
    "DictionaryPageType": 1,
    "Name": "Named Insured",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9952,
    "ProjectId": 99,
    "LocatorType": 3,
    "Locator": "SubmissionWizard:Next-btnInnerEl",
    "PageId": 1147,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Policy InfoPolicy InfoSCREENNext_BUTTON",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9331,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 126341,
        "StepNumber": 1,
        "Description": "Select_the_driver1",
        "LocatorTypeId": 7,
        "Locator": "//td[@class='x-grid-cell x-grid-td x-grid-cell-rowcheckcolumn-1501 x-grid-cell-checkcolumn x-grid-cell-first']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126342,
        "StepNumber": 2,
        "Description": "Add button",
        "LocatorTypeId": 7,
        "Locator": "(//a[@class='x-btn x-unselectable x-box-item x-toolbar-item x-btn-default-toolbar-small'])[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126340,
        "StepNumber": 3,
        "Description": "Selec_the_driver",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(text(),'Driver Name')]/following::td[1]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126339,
        "StepNumber": 4,
        "Description": "ClickOnNextBtn_On_AddandReconcileDriverScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'PrefillDriversLV_tb:next')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": 10268,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126343,
        "StepNumber": 5,
        "Description": "Verify Add And Reconcile",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'PrefillDriversLV_tb:next')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126345,
        "StepNumber": 6,
        "Description": "Verify Add And Reconcile",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'PAPrefillDriversScreen:0')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126344,
        "StepNumber": 7,
        "Description": "AddANdReconcileNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12377,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Add_and_Reconcile_Driver",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10268,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//a[contains(@id,'PrefillDriversLV_tb:next')]",
    "PageId": 1150,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnNextBtn_On_AddandReconcileDriverScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1150,
    "EntityName": "Page",
    "ProjectId": 99,
    "DictionaryPageType": 1,
    "Name": "Add and Reconcile Driver",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12377,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class AddANdReconcileNextBtn extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(100, TimeUnit.SECONDS);\t\n\t\t\t\t\t\n\t\t\tWebElement nextBtnEle;\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\t\tnextBtnEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//a[contains(@id,'PrefillDriversLV_tb:next')]\")));\n\n\t\t\t//nextBtnEle=driver.findElement(By.xpath(\"//a[@id='SubmissionWizard:Next']\"));\n\t\t\t//wait.until(ExpectedConditions.elementToBeClickable(nextBtnEle));\n\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", nextBtnEle);\n\t\t\tjs.executeScript(\"arguments[0].click();\",nextBtnEle);\n\t\t\n\t\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Clicked On NEXT button\";\n \n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddANdReconcileNextBtn",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9469,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 121838,
        "StepNumber": 1,
        "Description": "VarifyPageText",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Drivers",
        "CustomActionId": 12443,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 121833,
        "StepNumber": 2,
        "Description": "ClickOnAutoFillButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "DoNotUseForRegression",
        "ParameterValue": null,
        "CustomActionId": 12452,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 121837,
        "StepNumber": 3,
        "Description": "SelectExistingDriver",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "OnlyForUWFlow",
        "ParameterValue": null,
        "CustomActionId": 11704,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 121832,
        "StepNumber": 4,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "8",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 121839,
        "StepNumber": 5,
        "Description": "EnterLicenseNumber",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "S240139564032",
        "CustomActionId": 13990,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 121834,
        "StepNumber": 6,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 121836,
        "StepNumber": 7,
        "Description": "SelectExistingDriver",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11704,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 121835,
        "StepNumber": 8,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Add New Driver",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11704,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.*;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\nimport org.openqa.selenium.StaleElementReferenceException;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectExistingDriver extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,20);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act = new Actions(driver);\r\n        String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n        String inputValueVariable = inputValue;\r\n        //Use this below code for click actions//   \r\n        \r\n        try \r\n        {   \r\n        wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'DriversLV_tb:AddDriver-btnEl')]\"))));\r\n        WebElement addBtn = driver.findElement(By.xpath(\"//span[contains(@id,'DriversLV_tb:AddDriver-btnEl')]\"));\r\n        js.executeScript(\"arguments[0].click();\",addBtn);\r\n        Thread.sleep(250);\r\n        \r\n        WebElement ExistingPerson = driver.findElement(By.xpath(\"//span[contains(@id,'AddDriver:AddExistingContact-textEl')]\"));\r\n        Thread.sleep(450);\r\n        //js.executeScript(\"arguments[0].click();\",ExistingPerson);\r\n        ExistingPerson.click();\r\n        \r\n        WebElement selectExistingPerson = driver.findElement(By.xpath(\"//*[contains(text(),\"+inputValueVariable+\")]\"));\r\n        Thread.sleep(450);\r\n        //js.executeScript(\"arguments[0].click();\",selectExistingPerson);\r\n        selectExistingPerson.click();\r\n        \r\n        actionResult.comments =\"Selected Successfully\";\r\n        actionResult.status = true;\r\n        \r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n        \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectExistingDriver",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13990,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.StaleElementReferenceException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnterLicenseNumber extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'LicenseNumber-inputEl')]\")));\n\t\tWebElement licenseNumber;\n\t\tlicenseNumber=driver.findElement(By.xpath(\"//input[contains(@id,'LicenseNumber-inputEl')]\"));\n\t\tlicenseNumber.click();\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tlicenseNumber.sendKeys(s);\n\t\tlicenseNumber.sendKeys(Keys.DELETE);\n\t\tlicenseNumber.sendKeys(inputValue);\n\t\tKeys.chord(Keys.TAB);\n\t\tThread.sleep(1000);\n\t\tactionResult.status = true;\n       \tactionResult.comments =  \"License number entered as:\"+inputValue;\n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterLicenseNumber",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9517,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 122229,
        "StepNumber": 1,
        "Description": null,
        "LocatorTypeId": 9,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122208,
        "StepNumber": 2,
        "Description": "VerifyAdditionalDetailsTabOpened",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11684,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122228,
        "StepNumber": 3,
        "Description": "DoesDriverHavePriorAutoInsurance_Copy_1",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_PriorAutoInsurance",
        "CustomActionId": 12613,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122231,
        "StepNumber": 4,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "10",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122237,
        "StepNumber": 5,
        "Description": "Click on EmpStatus",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'EmpStatus-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122216,
        "StepNumber": 6,
        "Description": "Employement_Status",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_EmpStatus",
        "CustomActionId": 11676,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122234,
        "StepNumber": 7,
        "Description": "SelectFranchiseGroup",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13870,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122236,
        "StepNumber": 8,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "8",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122224,
        "StepNumber": 9,
        "Description": "Select if Industry Available",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'IndustryType-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122218,
        "StepNumber": 10,
        "Description": "Industry",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Industry",
        "CustomActionId": 11677,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122225,
        "StepNumber": 11,
        "Description": "Select if occupation is available",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'SpecificIndustryType-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122219,
        "StepNumber": 12,
        "Description": "Occupation",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Occupation",
        "CustomActionId": 11678,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122226,
        "StepNumber": 13,
        "Description": "Select if Educational Level is available",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,':EducationLevel-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122220,
        "StepNumber": 14,
        "Description": "Education_Level",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_EducationLevel",
        "CustomActionId": 11679,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122227,
        "StepNumber": 15,
        "Description": "Select If Work Loss Coordination is available",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'WorkLossCoordination')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122223,
        "StepNumber": 16,
        "Description": "Work_Loss_Coordination",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_WorklossCoordi",
        "CustomActionId": 13989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122209,
        "StepNumber": 17,
        "Description": "YesorNoAAADrive",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_AAADriveParticipation",
        "CustomActionId": 11685,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122210,
        "StepNumber": 18,
        "Description": "DoesDriverHavePriorAutoInsurance",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Continuous for prior 6 months or more",
        "CustomActionId": 11680,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122233,
        "StepNumber": 19,
        "Description": "Select_Carrier_Name",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_CarrierName",
        "CustomActionId": 12612,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122211,
        "StepNumber": 20,
        "Description": "BodilyInjuryLimit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_BidilyInjuryLimit",
        "CustomActionId": 11682,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122217,
        "StepNumber": 21,
        "Description": "ExpirationDate",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_ExpirationDate",
        "CustomActionId": 11691,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122212,
        "StepNumber": 22,
        "Description": "FullYearWithPriorCarrier",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_FullYearWithPriorCarrier",
        "CustomActionId": 11683,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122214,
        "StepNumber": 23,
        "Description": "RemoveDrivers",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "MARION JOHNSTON",
        "CustomActionId": 11688,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122221,
        "StepNumber": 24,
        "Description": "RemoveAllDrivers",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DAN BUCKNER",
        "CustomActionId": 11693,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122232,
        "StepNumber": 25,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "6",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122222,
        "StepNumber": 26,
        "Description": "SelectSingleDriver",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_AssignDriver",
        "CustomActionId": 11694,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122230,
        "StepNumber": 27,
        "Description": "SelectSingleDriver_Test",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11698,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122235,
        "StepNumber": 28,
        "Description": "SelectSingleDriver_UsingAllDriverCheckBox",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_AssignDriver",
        "CustomActionId": 11745,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122213,
        "StepNumber": 29,
        "Description": "ClickOnSaveDraftBtnOnDriversScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'ToolbarButtonSet:Draft')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122215,
        "StepNumber": 30,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 122207,
        "StepNumber": 31,
        "Description": "ClickOnNextBtnOnDriversScreen",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:Next-btnEl",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 9967,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Add_AdditionalDetails",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11684,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.StaleElementReferenceException;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyAdditionalDetailsTabOpened extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry\n\t{\n\t  for(int retry=0; retry<5; retry++)\n\t  {\n\t\ttry\n\t\t{\n\t\tdriver.manage().timeouts().implicitlyWait(70, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,100);\n       \n\t\t//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//a[contains(@id,'AdditionalDetailcCardTab')]\")));\n\t\t//WebElement AdditionalDetailsTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'AdditionalDetailcCardTab')]\"));\n\n\t\tWait<WebDriver> fluentWaiit = new FluentWait<WebDriver>(driver).withTimeout(50, TimeUnit.SECONDS).pollingEvery(1000, TimeUnit.MILLISECONDS).ignoring(Exception.class);\n\t\tWebElement AdditionalDetailsTabEle = fluentWaiit.until(new Function<WebDriver, WebElement>() {\n\t\t\tpublic WebElement apply(WebDriver driver) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\treturn driver.findElement(By.xpath(\"//a[contains(@id,'AdditionalDetailcCardTab')]\"));\n\t\t\t}\t\t\t\n\t\t\t});\n\t\t\n\t\tAdditionalDetailsTabEle.click();\n\t\tString getAdditonalDetailsTabIndex = AdditionalDetailsTabEle.getAttribute(\"tabindex\");\n\t\t//Thread.sleep(2000);\n\t\tif(getAdditonalDetailsTabIndex.equals(\"0\")){\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"User is on 'Additional Details Tab' in Drivers screen\";\n\t\t}\n\t\telse{\n           \t\tactionResult.status = false;\n\t\t\tactionResult.comments =  \" 'Additional Details Tab' is not opened\";\n\t\t} \n\t\t\n\t\tbreak;\n\t\t}\n\t\t\n\t\tcatch(StaleElementReferenceException e)\n\t\t{\t\n\t\t\tactionResult.comments =  e.getMessage();\n\t\t}\n\t  }\n\t}  \n\tcatch(Exception e){\n\t\tString exceptionMsg = e.getMessage();\n           \tactionResult.status = false;\n\t\tactionResult.comments =  \" 'Additional Details Tab' is not available in Drivers screen: \"+exceptionMsg;\n\t}\n\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyAdditionalDetailsTabOpened",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12613,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class DoesDriverHavePriorAutoInsurance_Copy_1_Copy_1 extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\nfor(int i =1; i<=1; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);\n\n\t\t\tWebDriverWait wait = new WebDriverWait(driver, 30);\n\t\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'HasPriorPolicy-inputEl')]\")));\n\n\t\t\tWebElement priorAutoInsuranceEle=driver.findElement(By.xpath(\"//input[contains(@id,'HasPriorPolicy-inputEl')]\"));\n\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tpriorAutoInsuranceEle.sendKeys(s);\n\t\t\tpriorAutoInsuranceEle.sendKeys(Keys.DELETE);\n\t\t\tSystem.out.println(\"inputValue \"+inputValue );\n\n\t\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\t\tjs.executeScript(\"arguments[0].click()\", priorAutoInsuranceEle);\n\t\t\t\tjs.executeScript(\"arguments[0].value = '\" + inputValue + \"'\", priorAutoInsuranceEle);\n\t\t\t\tpriorAutoInsuranceEle.sendKeys(Keys.ENTER);\n\t\t\t\tThread.sleep(2000);\n\n\t\t\t//driver.findElement(By.xpath(\"//input[contains(@id,'Premium-inputEl')]\")).click();\n\t\t\tdriver.findElement(By.xpath(\"//span[text()='Driver']\")).click();\n\t\t\tThread.sleep(2000);\n\n\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n\n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "DoesDriverHavePriorAutoInsurance_Copy_1",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11676,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Employement_Status extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'EmpStatus-inputEl')]\"))));\n\t\t\t\n\t\t\tWebElement empStatusEle=driver.findElement(By.xpath(\"//input[contains(@id,'EmpStatus-inputEl')]\"));\n\t\t\tempStatusEle.click();\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tempStatusEle.sendKeys(s);\n\t\t\tempStatusEle.sendKeys(Keys.DELETE);\n\t\t\tempStatusEle.sendKeys(inputValue);\n\t\t\t//empStatusEle.sendKeys(Keys.ENTER);\n\t\t\tempStatusEle.sendKeys(Keys.TAB);\n\t\t\t\n\t\t\tThread.sleep(2000);\n      \t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n \n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Employement_Status",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13870,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectFranchiseGroup extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver,30);\r\n            wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id, 'FranchiseGroup-inputEl')]\"))));\r\n            \r\n            WebElement empStatusEle=driver.findElement(By.xpath(\"//input[contains(@id, 'FranchiseGroup-inputEl')]\"));\r\n            empStatusEle.click();\r\n            String s=Keys.chord(Keys.CONTROL,\"a\");\r\n            empStatusEle.sendKeys(s);\r\n            empStatusEle.sendKeys(Keys.DELETE);\r\n            empStatusEle.sendKeys(inputValue);\r\n            //empStatusEle.sendKeys(Keys.ENTER);\r\n            empStatusEle.sendKeys(Keys.TAB);\r\n            \r\n            Thread.sleep(2000);\r\n            actionResult.status = true;\r\n            actionResult.comments = \"Executed Successfully\"; \r\n \r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectFranchiseGroup",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11677,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Industry extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'IndustryType-inputEl')]\"))));\n\n\t\t\tWebElement industry=driver.findElement(By.xpath(\"//input[contains(@id,'IndustryType-inputEl')]\"));\n\t\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tindustry.sendKeys(s);\n\t\t\tindustry.sendKeys(Keys.DELETE);\n\t\t\tindustry.sendKeys(inputValue);\n\t\n\t\t\tThread.sleep(2000);\n\t\t\t//industry.sendKeys(Keys.ENTER);\n\t\t\tindustry.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000);\n\n      \t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n\n \n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n       \n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Industry",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11678,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.StaleElementReferenceException;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Occupation extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\t\tdriver.manage().timeouts().implicitlyWait(100, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,40);\n\t\twait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//input[contains(@id,'SpecificIndustryType-inputEl')]\")));\n\t\tWebElement occupation=driver.findElement(By.xpath(\"//input[contains(@id,'SpecificIndustryType-inputEl')]\"));\n\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\toccupation.sendKeys(s);\n\t\toccupation.sendKeys(Keys.DELETE);\n\t\toccupation.sendKeys(inputValue);\n\t\tThread.sleep(1000);\n\t\toccupation.sendKeys(Keys.ENTER);\n\t\toccupation.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";  \n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Occupation",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13989,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Work_Loss_Coordination extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\nfor(int i =1; i<=5; i++)\n{\ntry\n{ \t\t\n\t\tWebElement workLoss=driver.findElement(By.xpath(\"//input[contains(@id,'WorkLossCoordination')]\"));\n\t\tworkLoss.click();\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tworkLoss.sendKeys(s);\n\t\tworkLoss.sendKeys(Keys.DELETE);\n\t\t//Thread.sleep(2000);\n       \tworkLoss.sendKeys(inputValue);\n\t\n\t\tworkLoss.sendKeys(Keys.ENTER);\n\t\t//empStatusEle.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\n      \t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Work_Loss_Coordination",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11685,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesorNoAAADrive extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {\r\n        WebElement AAADriveYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'AAADrive_true-inputEl')]\"));\r\n        WebElement AAADriveNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'AAADrive_false-inputEl')]\"));\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            js.executeScript(\"arguments[0].click()\",AAADriveYesEle);\r\n            //AAADriveYesEle.click();\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Driver's AAA Drive has been selected as : 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            js.executeScript(\"arguments[0].click()\",AAADriveNoEle);\r\n            //AAADriveNoEle.click();\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Driver's AAA Drive has been selected as : 'No'\";\r\n        }\r\n    \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status   = true;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoAAADrive",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11680,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class DoesDriverHavePriorAutoInsurance extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\nfor(int i =1; i<=5; i++) \r\n    {\r\ntry{\r\n\r\n\r\nWebElement priorAutoInsuranceEle=driver.findElement(By.xpath(\"//input[contains(@id,'HasPriorPolicy-inputEl')]\"));\r\n    String s=Keys.chord(Keys.CONTROL,\"a\");\r\n    Actions act           = new Actions(driver);\r\n    priorAutoInsuranceEle.sendKeys(s);\r\n    priorAutoInsuranceEle.sendKeys(Keys.DELETE);\r\n    \r\nJavascriptExecutor js = (JavascriptExecutor)driver;\r\n    js.executeScript(\"arguments[0].click()\", priorAutoInsuranceEle);\r\n        js.executeScript(\"arguments[0].value = '\" + inputValue + \"'\", priorAutoInsuranceEle);\r\n        Thread.sleep(1000);\r\n        act.moveToElement(priorAutoInsuranceEle).sendKeys(Keys.TAB).build().perform();\r\n        //driver.findElement(By.xpath(\"//span[contains(text(),'Employment Status')]\")).click();\r\n\r\n\r\nThread.sleep(3000);\r\n        //priorAutoInsuranceEle.sendKeys(Keys.TAB);\r\n\r\n//Actions act = new Actions(driver);\r\n//act.sendKeys(priorAutoInsuranceEle,inputValue).build().perform();\r\n//priorAutoInsuranceEle.sendKeys(Keys.ENTER);\r\n//driver.findElement(By.xpath(\"//input[contains(@id,'Premium-inputEl')]\")).click();\r\n\r\n\r\n\r\n\r\n\r\nactionResult.status = true;\r\nactionResult.comments = \"Executed Successfully\"; \r\n\r\nbreak;\r\n}\r\ncatch(Exception e){\r\n\r\nactionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "DoesDriverHavePriorAutoInsurance",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12612,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.StaleElementReferenceException;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Select_Carrier_Name extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\tThread.sleep(2000);\n        \tdriver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);\n\t\tWebElement carrierNameEle=driver.findElement(By.xpath(\"//input[contains(@id,'CarrierName')]\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tcarrierNameEle.sendKeys(s);\n\t\tcarrierNameEle.sendKeys(Keys.DELETE);\n\t\tThread.sleep(1000);\n       \tcarrierNameEle.sendKeys(inputValue);\n\t\tThread.sleep(1000);\n\n\t\t//Actions act = new Actions(driver);\n\t\t//act.sendKeys(carrierNameEle,inputValue).build().perform();\n\t\tcarrierNameEle.sendKeys(Keys.TAB);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Select_Carrier_Name",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11682,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class BodilyInjuryLimit extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n\r\nfor(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait=new WebDriverWait(driver, 20);\r\n            wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'BodilyInjuryLimitType-inputEl')]\"))));\r\n            WebElement bodilyInjuryLimitEle=driver.findElement(By.xpath(\"//input[contains(@id,'BodilyInjuryLimitType-inputEl')]\"));\r\nbodilyInjuryLimitEle.click();           \r\nString s=Keys.chord(Keys.CONTROL,\"a\");\r\n            bodilyInjuryLimitEle.sendKeys(s);\r\n            bodilyInjuryLimitEle.sendKeys(Keys.DELETE);\r\n                     Thread.sleep(2000);\r\n                     \r\n            if(inputValue.equals(\"250\")){\r\n   inputValue = \"250,000/500,000\";\r\n        }         \r\n            bodilyInjuryLimitEle.sendKeys(inputValue);\r\n            Thread.sleep(2000);\r\n                  //bodilyInjuryLimitEle.sendKeys(s);\r\n                  // bodilyInjuryLimitEle.sendKeys(Keys.TAB);\r\n\r\n            //bodilyInjuryLimitEle.sendKeys(Keys.ENTER);\r\n            driver.findElement(By.xpath(\"//*[contains(@id,'AdditionalDetailcCardTab-btnInnerEl')]\")).click();\r\n                    Thread.sleep(1000);\r\n                    //bodilyInjuryLimitEle.sendKeys(Keys.TAB);\r\n            Thread.sleep(1000);\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments = \"Executed Successfully\";  \r\n\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "BodilyInjuryLimit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11691,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ExpirationDate extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'ExpirationDate')]\")));\n\t\tWebElement expirationDate;\n\t\texpirationDate=driver.findElement(By.xpath(\"//input[contains(@id,'ExpirationDate')]\"));\n\t\texpirationDate.click();\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\texpirationDate.sendKeys(s);\n\t\texpirationDate.sendKeys(Keys.DELETE);\n\t\texpirationDate.sendKeys(inputValue);\n\t\tKeys.chord(Keys.TAB);\n\t\tThread.sleep(2000);\n\t\tactionResult.status = true;\n        actionResult.comments =  \"The Prior Insurance Expiration Date entered as:\"+inputValue;\n \n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ExpirationDate",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11683,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class FullYearWithPriorCarrier extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n          \r\n        try \r\n        {   \r\n            \r\n        WebDriverWait wait=new WebDriverWait(driver, 30);\r\n            WebElement carrier = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'YearsWithPriorCarrier-inputEl')]\"))));\r\n            \r\n            String s=Keys.chord(Keys.CONTROL,\"a\");\r\n            carrier.sendKeys(s);\r\n            carrier.sendKeys(Keys.DELETE);\r\n            carrier.sendKeys(inputValue);\r\n            \r\n           \r\n            //carrier.sendKeys(Keys.ENTER);\r\n            /*  driver.findElement(By.xpath(\"//input[contains(@id,'Premium-inputEl')]\")).click();\r\n            // Thread.sleep(2000);\r\n            Keys.chord(Keys.TAB);*/\r\n            Actions act = new Actions(driver);\r\n            act.moveToElement(carrier).sendKeys(Keys.TAB).build().perform();\r\n             Thread.sleep(2000);\r\n\r\n            actionResult.status = true;\r\n            actionResult.comments = \"Executed Successfully\"; \r\n \r\n        \r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments = \" Expection Type : \" + e.getMessage();\r\n        actionResult.status   = false;\r\n        }\r\n      \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "FullYearWithPriorCarrier",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11688,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class RemoveDrivers extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n       try{     \r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebDriverWait wait = new WebDriverWait(driver, 30);\r\n        String nextPagePath = \"//a[contains(@id,'gbutton') and @data-qtip='Next Page']\";\r\n                \r\n        if(driver.findElement(By.xpath(nextPagePath)).isDisplayed())\r\n        {\r\n            while(!driver.findElement(By.xpath(nextPagePath)).isDisplayed()){\r\n                \r\n            List<WebElement> driverSelectChkBox =  driver.findElements(By.xpath(\"//div[contains(@id,'DriversLV-body')]//img\"));\r\n            int numberOfChkBox = driverSelectChkBox.size();\r\n            System.out.println(\"No Of Drivers \"+numberOfChkBox);\r\n            Thread.sleep(2000);\r\n        if(numberOfChkBox>=1){\r\n            for(int x =1; x<=numberOfChkBox; x++) \r\n            {\r\n                WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'DriversLV-body')]//img)[\"+x+\"]\"))));\r\n                js.executeScript(\"arguments[0].style.border='2px solid red'\", allCheckboxEle);\r\n                js.executeScript(\"arguments[0].click();\", allCheckboxEle);\r\n                Thread.sleep(2000);\r\n            }}\r\n                WebElement romoveBtnEle       = driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"));\r\n                WebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\r\n                Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\", romoveBtnEle);\r\n                wait.until(ExpectedConditions.elementToBeClickable(saveAndDraftBtnEle));\r\n                js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n                \r\n            } \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Driver is available\";\r\n\r\n            }else{\r\n                List<WebElement> driverSelectChkBox =  driver.findElements(By.xpath(\"//div[contains(@id,'DriversLV-body')]//img\"));\r\n                int numberOfChkBox = driverSelectChkBox.size();\r\n                System.out.println(\"No Of Drivers \"+numberOfChkBox);\r\n            if(numberOfChkBox>=1){\r\n            for(int x =1; x<=numberOfChkBox; x++) \r\n            {\r\n            WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'DriversLV-body')]//img)[\"+x+\"]\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", allCheckboxEle);\r\n            js.executeScript(\"arguments[0].click();\", allCheckboxEle);\r\n            Thread.sleep(2000);\r\n            }}\r\n                Thread.sleep(4000);\r\n                WebElement romoveBtnEle       = driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"));\r\n                WebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\r\n                js.executeScript(\"arguments[0].click();\", romoveBtnEle);\r\n                js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n                actionResult.status = true;\r\n                actionResult.comments = \"Driver is available\";\r\n            }\r\n\r\n\r\n        }catch(Exception e){\r\n            actionResult.status = true;\r\n           actionResult.comments = \"Driver not available\"+e.getMessage();\r\n        }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "RemoveDrivers",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11693,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class RemoveAllDrivers extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\n    try{   \n\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tWebDriverWait wait = new WebDriverWait(driver, 30);\n\t\tString nextPagePath = \"//a[contains(@id,'gbutton') and @data-qtip='Next Page']\";\n\t\t\t\t\n\t\tif(driver.findElement(By.xpath(nextPagePath)).isDisplayed())\n\t\t{\n\t\t\twhile(!driver.findElement(By.xpath(nextPagePath)).isDisplayed()){\n\t\t\t\t\n\t\t\t\tWebElement allCheckboxEle = driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\"));\n\t\t\t\tWebElement romoveBtnEle =driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"));\n\t\t\t\tWebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\n\t\t\t\tThread.sleep(2000);\n\t\t\t\tallCheckboxEle.click();\n\t\t\t\tThread.sleep(4000);\n\t\t\t\tdriver.findElement(By.xpath(\"//div[text()='\"+inputValue+\"']/parent::td/preceding-sibling::td/div\")).click();\n\t\t\t\tromoveBtnEle.click();\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(saveAndDraftBtnEle));\n\t\t\t\tjs.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\n\t\t\t\t\n\t\t\t} \n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"Driver is available\";\n\n\t\t}else{\n\t\t\tWebElement allCheckboxEle = driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\"));\n\t\t\tWebElement romoveBtnEle =driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"));\n\t\t\tWebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\n\t\t\tThread.sleep(2000);\n\t\t\tallCheckboxEle.click();\n\t\t\tThread.sleep(4000);\n\t\t\tdriver.findElement(By.xpath(\"//div[text()='\"+inputValue+\"']/parent::td/preceding-sibling::td/div\")).click();\n\t\t\tromoveBtnEle.click();\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"Driver is available\";\n\t\t}\n\n\n\t\t}catch(Exception e){\n\t\t\tactionResult.status = false;\n\t\t\tactionResult.comments =  \"Driver not available\"+e.getMessage();\n\t\t\t\n\t\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "RemoveAllDrivers",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11694,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.List;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectSingleDriver extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        WebDriverWait wait = new WebDriverWait(driver,120);\r\n        JavascriptExecutor js=(JavascriptExecutor)driver;\r\n        WebElement totalRowsEle=driver.findElement(By.xpath(\"//div[contains(@options,'start')]\"));\r\n        String getRowCnt=totalRowsEle.getAttribute(\"total\");\r\n        System.out.println(getRowCnt);\r\n        String[] pageLimit = totalRowsEle.getAttribute(\"options\").split(\":\");\r\n        System.out.println(pageLimit[2]);\r\n        int totalRows=Integer.parseInt(getRowCnt);\r\n        System.out.println(totalRows);\r\n        int pageLimitVal = Integer.parseInt(pageLimit[2].toString().replace(\";\",\"\"));\r\n        System.out.println(pageLimitVal);\r\n        int pageCount = totalRows/pageLimitVal;\r\n        System.out.println(pageCount);      \r\n    \r\n            while(totalRows>=15){\r\n                /**WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]/div\"))));\r\n                Thread.sleep(1000);\r\n                allCheckboxEle.click();\r\n                Thread.sleep(2000);**/\r\n                List<WebElement> driverSelectChkBox =  driver.findElements(By.xpath(\"//div[contains(@id,'DriversLV-body')]//img\"));\r\n                     int numberOfChkBox = driverSelectChkBox.size();\r\n        System.out.println(\"No Of Drivers \"+numberOfChkBox);\r\n        if(numberOfChkBox>1){\r\n        for(int x =2; x<=numberOfChkBox; x++) \r\n        {\r\n            WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'DriversLV-body')]//img)[\"+x+\"]\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", allCheckboxEle);\r\n            js.executeScript(\"arguments[0].click();\", allCheckboxEle);\r\n            Thread.sleep(2000);\r\n        }}\r\n                \r\n        //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/img\")))).click();\r\n        //Thread.sleep(1500);\r\n                WebElement romoveBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"))));\r\n                romoveBtnEle.click();\r\n                Thread.sleep(2500);\r\n                   \r\n                WebElement saveAndDraftBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n                js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n                Thread.sleep(1500);\r\n                \r\n                getRowCnt = driver.findElement(By.xpath(\"//div[contains(@options,'start')]\")).getAttribute(\"total\");\r\n            \r\n                System.out.println(getRowCnt);\r\n                totalRows = Integer.parseInt(getRowCnt);\r\n                System.out.println(totalRows);\r\n            }  \r\n                \r\n            if(totalRows<15){\r\n                Thread.sleep(4000);\r\n                /**WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]/div\"))));\r\n                Thread.sleep(2000);\r\n                allCheckboxEle.click();\r\n                Thread.sleep(4000);**/\r\n                 List<WebElement> driverSelectChkBox =  driver.findElements(By.xpath(\"//div[contains(@id,'DriversLV-body')]//img\"));\r\n                     int numberOfChkBox = driverSelectChkBox.size();\r\n        System.out.println(\"No Of Drivers \"+numberOfChkBox);\r\n        if(numberOfChkBox>1){\r\n        for(int x =2; x<=numberOfChkBox; x++) \r\n        {\r\n            WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'DriversLV-body')]//img)[\"+x+\"]\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", allCheckboxEle);\r\n            js.executeScript(\"arguments[0].click();\", allCheckboxEle);\r\n            Thread.sleep(2000);\r\n        }}\r\n             \r\n        //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/img\")))).click();\r\n        //Thread.sleep(1500);\r\n                WebElement romoveBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"))));\r\n                romoveBtnEle.click();\r\n                Thread.sleep(2500);\r\n                   \r\n                WebElement saveAndDraftBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n                js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n                Thread.sleep(4000);\r\n                \r\n            }       \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"All Drivers removed\";\r\n            \r\n            break;\r\n        }\r\n        catch(Exception e) {\r\n            actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n            actionResult.status   = false;\r\n        }\r\n    } \r\n \r\n       \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectSingleDriver",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11698,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectSingleDriver_Test extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry{\n\t\n\t\tdriver.manage().timeouts().implicitlyWait(100, TimeUnit.SECONDS);\n\n\t\tWebDriverWait wait = new WebDriverWait(driver,120);\n\t\tWait<WebDriver> fluentWaiit = new FluentWait<WebDriver>(driver).withTimeout(3000, TimeUnit.MILLISECONDS).pollingEvery(100, TimeUnit.MILLISECONDS).ignoring(Exception.class);\n\t\tJavascriptExecutor js=(JavascriptExecutor)driver;\n\t\t//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[contains(@options,'start')]\")));\n\t\twait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//div[contains(@options,'start')]\")));\n\t\tWebElement totalRowsEle;\n\t\ttotalRowsEle=driver.findElement(By.xpath(\"//div[contains(@options,'start')]\"));\n\t\tString getRowCnt=totalRowsEle.getAttribute(\"total\");\n\t\tSystem.out.println(\"row cnt \"+getRowCnt);\n\t\tString[] pageLimit = totalRowsEle.getAttribute(\"options\").split(\":\");\n\t\tSystem.out.println(\"page limir \"+pageLimit[2]);\n\t\tint totalRows=Integer.parseInt(getRowCnt);\n\t\tSystem.out.println(\"total rows \"+totalRows);\n\t\tint pageLimitVal = Integer.parseInt(pageLimit[2].toString().replace(\";\",\"\"));\n\t\tSystem.out.println(\"pagelimit value \"+pageLimitVal);\n\t\tint pageCount = totalRows/pageLimitVal;\n\t\tSystem.out.println(\"page count \"+pageCount);\n\t\t\n\t\t\n\t\n\t\t\twhile(totalRows>=15)\n\t\t\t{\n                driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);\n\t\t\t\t//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\")));\t\n\t\t\t\t//WebElement allCheckboxEle = driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\"));\n\t\t\t\t\n\t\t\t\tWebElement allCheckboxEle = fluentWaiit.until(new Function<WebDriver, WebElement>() {\n\t\t\t\tpublic WebElement apply(WebDriver driver) {\n\t\t\t\treturn driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\"));}});\n\t\t\t\t\n\t\t\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\")));\t\n\t\t\t\tWebElement romoveBtnEle =driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"));\n\t\t\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//a[contains(@id,'Draft')]\")));\t\n\t\t\t\tWebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\n\t\t\t\tThread.sleep(500);\n\t\t\t\tallCheckboxEle.click();\t\t\t\t\n\t\t\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div\")));\t\n\t\t\t\tdriver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div\")).click();\n\t\t\t\tromoveBtnEle.click();\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(saveAndDraftBtnEle));\n\t\t\t\tjs.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\n\t\t\t\tThread.sleep(4000);\n\n\t\t\t\t//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[contains(@options,'start')]\")));\t\n\t\t\t\tgetRowCnt=driver.findElement(By.xpath(\"//div[contains(@options,'start')]\")).getAttribute(\"total\");\n\t\t\t\n\t\t\t\tSystem.out.println(\"New row cnt \"+getRowCnt);\n\t\t\t\ttotalRows=Integer.parseInt(getRowCnt);\n\t\t\t\tSystem.out.println(\"Total new rows \"+totalRows);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif(totalRows<15)\n\t\t\t{\n\t\t\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\t\t\n\t\t\t\t//WebElement allCheckboxEle = driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\"));\n\t\t\t\tWebElement allCheckboxEle = fluentWaiit.until(new Function<WebDriver, WebElement>() {\n\t\t\t\tpublic WebElement apply(WebDriver driver) {\n\t\t\t\treturn driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\"));}});\n\t\t\t\t\n\t\t\t\tWebElement romoveBtnEle =driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"));\n\t\t\t\tWebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\t\t\t\n\t\t\t\tThread.sleep(2000);\n\t\t\t\tallCheckboxEle.click();\n\t\t\t\tThread.sleep(4000);\n\t\t\t\tdriver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div\")).click();\n\t\t\t\tromoveBtnEle.click();\n\t\t\t\t//wait.until(ExpectedConditions.elementToBeClickable(saveAndDraftBtnEle));\n\t\t\t\tjs.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\n\t\t\t\tThread.sleep(4000);\n\n\t\t\t}\n\t\t\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"All Drivers removed\";\n\n\t}\n\tcatch(Exception e){\n\t\tactionResult.status = false;\n           \tactionResult.comments =  e.getMessage();\n\n\t}\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectSingleDriver_Test",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11745,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.List;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectSingleDriver_UsingAllDriverCheckBox extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        WebDriverWait wait = new WebDriverWait(driver,120);\r\n        JavascriptExecutor js=(JavascriptExecutor)driver;\r\n        WebElement totalRowsEle=driver.findElement(By.xpath(\"//div[contains(@options,'start')]\"));\r\n        String getRowCnt=totalRowsEle.getAttribute(\"total\");\r\n        System.out.println(getRowCnt);\r\n        String[] pageLimit = totalRowsEle.getAttribute(\"options\").split(\":\");\r\n        System.out.println(pageLimit[2]);\r\n        int totalRows=Integer.parseInt(getRowCnt);\r\n        System.out.println(totalRows);\r\n        int pageLimitVal = Integer.parseInt(pageLimit[2].toString().replace(\";\",\"\"));\r\n        System.out.println(pageLimitVal);\r\n        int pageCount = totalRows/pageLimitVal;\r\n        System.out.println(pageCount);      \r\n    \r\n            while(totalRows>=15){\r\n               WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]/div\"))));\r\n                Thread.sleep(1000);\r\n                allCheckboxEle.click();\r\n                Thread.sleep(2000);\r\n                /**List<WebElement> driverSelectChkBox =  driver.findElements(By.xpath(\"//div[contains(@id,'DriversLV-body')]//img\"));\r\n                     int numberOfChkBox = driverSelectChkBox.size();\r\n        System.out.println(\"No Of Drivers \"+numberOfChkBox);\r\n        if(numberOfChkBox>1){\r\n        for(int x =2; x<=numberOfChkBox; x++) \r\n        {\r\n            WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'DriversLV-body')]//img)[\"+x+\"]\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", allCheckboxEle);\r\n            js.executeScript(\"arguments[0].click();\", allCheckboxEle);\r\n            Thread.sleep(2000);\r\n        }}**/\r\n                \r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/img\")))).click();\r\n        Thread.sleep(1500);\r\n                WebElement romoveBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"))));\r\n                romoveBtnEle.click();\r\n                Thread.sleep(2500);\r\n                   \r\n                WebElement saveAndDraftBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n                js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n                Thread.sleep(1500);\r\n                \r\n                getRowCnt = driver.findElement(By.xpath(\"//div[contains(@options,'start')]\")).getAttribute(\"total\");\r\n            \r\n                System.out.println(getRowCnt);\r\n                totalRows = Integer.parseInt(getRowCnt);\r\n                System.out.println(totalRows);\r\n            }  \r\n                \r\n            if(totalRows<15){\r\n                Thread.sleep(4000);\r\n                WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]/div\"))));\r\n                Thread.sleep(2000);\r\n                allCheckboxEle.click();\r\n                Thread.sleep(4000);\r\n                /**List<WebElement> driverSelectChkBox =  driver.findElements(By.xpath(\"//div[contains(@id,'DriversLV-body')]//img\"));\r\n                     int numberOfChkBox = driverSelectChkBox.size();\r\n        System.out.println(\"No Of Drivers \"+numberOfChkBox);\r\n        if(numberOfChkBox>1){\r\n        for(int x =2; x<=numberOfChkBox; x++) \r\n        {\r\n            WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'DriversLV-body')]//img)[\"+x+\"]\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", allCheckboxEle);\r\n            js.executeScript(\"arguments[0].click();\", allCheckboxEle);\r\n            Thread.sleep(2000);\r\n        }}**/\r\n             \r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/img\")))).click();\r\n        Thread.sleep(1500);\r\n                WebElement romoveBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"))));\r\n                romoveBtnEle.click();\r\n                Thread.sleep(2500);\r\n                   \r\n                WebElement saveAndDraftBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n                js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n                Thread.sleep(4000);\r\n                \r\n            }       \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"All Drivers removed\";\r\n            \r\n            break;\r\n        }\r\n        catch(Exception e) {\r\n            actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n            actionResult.status   = false;\r\n        }\r\n    } \r\n \r\n       \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectSingleDriver_UsingAllDriverCheckBox",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9967,
    "ProjectId": 99,
    "LocatorType": 3,
    "Locator": "SubmissionWizard:Next-btnEl",
    "PageId": 1151,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "DriversDriversSCREENNext_BUTTON",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1151,
    "EntityName": "Page",
    "ProjectId": 99,
    "DictionaryPageType": 1,
    "Name": "Drivers",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9341,
    "Description": "Adding more vehicles on the Vehicle Screen to bind the policy.",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 126582,
        "StepNumber": 1,
        "Description": "VehicleDeletion",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12553,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126583,
        "StepNumber": 2,
        "Description": "WaitToCreateNewVehicle",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126584,
        "StepNumber": 3,
        "Description": "AddAdditionalVehicles",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11813,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126576,
        "StepNumber": 4,
        "Description": "AddAdditionalVehiclesRewrite",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12670,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126581,
        "StepNumber": 5,
        "Description": "AddAdditionalVehicles_Updated",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11815,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126585,
        "StepNumber": 6,
        "Description": "Title holder No",
        "LocatorTypeId": 7,
        "Locator": "(//input[@data-ref='inputEl']) [28]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126586,
        "StepNumber": 7,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126587,
        "StepNumber": 8,
        "Description": "Text area 1 ",
        "LocatorTypeId": 7,
        "Locator": "(//textarea[@role='textbox']) [1]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "San",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126588,
        "StepNumber": 9,
        "Description": "Text area 2",
        "LocatorTypeId": 7,
        "Locator": "(//textarea[@role='textbox']) [2]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "Notmandatory",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126577,
        "StepNumber": 10,
        "Description": "AddAdditionalVehicles_tnc",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11821,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126578,
        "StepNumber": 11,
        "Description": "Vehicle_Usage_Screenshot",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11820,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126579,
        "StepNumber": 12,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "3",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126580,
        "StepNumber": 13,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12444,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "AddAdditionalVehicles",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12553,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class VehicleDeletion extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    for(int j =1; j<=5; j++) \r\n    {\r\n        try \r\n        {   WebDriverWait wait = new WebDriverWait(driver,30);  \r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            int rowsize =driver.findElements(By.xpath(\"//div[contains(@id,'PAVehiclesPanelSet:VehiclesListDetailPanel:VehiclesLV')]//table\")).size();\r\n            System.out.println(rowsize);\r\n            if(rowsize>0){\r\n            for(int i=1;i<=rowsize;i++){\r\n                \r\n                WebElement chckBox = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'PAVehiclesPanelSet:VehiclesListDetailPanel:VehiclesLV-body')]/descendant::img)[\"+i+\"]\"))));\r\n                js.executeScript(\"arguments[0].style.border='2px solid red'\", chckBox);\r\n                js.executeScript(\"arguments[0].click();\",chckBox);\r\n                Thread.sleep(500);\r\n            }\r\n            Thread.sleep(1000);\r\n            WebElement removeBtn = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'PAVehiclesPanelSet:VehiclesListDetailPanel_tb:Remove') or contains(@id,'PAVehiclesPanelSet:VehiclesListDetailPanel_tb:removeButton_Acg-btnInnerEl')]\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", removeBtn);\r\n            js.executeScript(\"arguments[0].click();\",removeBtn);\r\n            Thread.sleep(1000);     \r\n            }\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Vehicle Deleted Successfully\";\r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +j + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VehicleDeletion",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11813,
    "Description": "Adding multiple vehicles on the Vehicle screen to bind the policy.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement; \r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddAdditionalVehicles extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    try{\r\n\r\n        driver.manage().timeouts().implicitlyWait(150, TimeUnit.SECONDS);\r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act = new Actions(driver);\r\n        String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n        String[] VehiclesInfo = inputValue.split(\"@@\");\r\n        int vehicleCount= VehiclesInfo.length;\r\n        System.out.println(vehicleCount);\r\n        for(int i=0;i<=vehicleCount-1;i++){\r\n        System.out.println(VehiclesInfo[i]);\r\n        String[] addVehicleParams = VehiclesInfo[i].split(\" AND \");\r\n        int paramsCount = addVehicleParams.length;\r\n\r\n        for(int j=0;j<=vehicleCount-1;j++){\r\n             Thread.sleep(3000);\r\n             for(int retryy=0; retryy<5; retryy++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"))));\r\n            WebElement createVehicleBtn = driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"));\r\n            js.executeScript(\"arguments[0].click()\",createVehicleBtn);\r\n            Thread.sleep(3000);\r\n            break;\r\n            }catch(Exception ex){\r\n                actionResult.comments = ex.getMessage();\r\n            }}\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"))));         \r\n            WebElement vehicleDetailsTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"));\r\n            String getVehicleDetailsTabEle = vehicleDetailsTabEle.getAttribute(\"tabindex\");\r\n            if(getVehicleDetailsTabEle.equals(\"0\")){\r\n                actionResult.status = true;\r\n                    actionResult.comments =  \"User is on 'Vehicle Details Tab' in 'Vehicles Screen'\";\r\n            }\r\n            else{\r\n                           \r\n                actionResult.status = false;\r\n                actionResult.comments =  \" 'Vehicle Details Tab' is not opened\";\r\n            }\r\n                  Thread.sleep(2000);\r\n            \r\n                  for(int retry=0; retry<1; retry++){\r\n            try{\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"))));\r\n            WebElement vehicleTypeEle = driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleTypeEle);\r\n            vehicleTypeEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[0]+\"'\",vehicleTypeEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.TAB).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retry++;\r\n            }\r\n                \r\n            }\r\n            \r\n            \r\n\r\n            String vehiclesYearPrior1981 = addVehicleParams[2].toString();\r\n            System.out.println(vehiclesYearPrior1981);\r\n        \r\n           for(int retryAA=0; retryAA<5; retryAA++){\r\n            try{\r\n             wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"))));\r\n            WebElement vehiclesYearPrior1981YesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"));\r\n            WebElement vehiclesYearPrior1981NoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));\r\n            if(vehiclesYearPrior1981.equalsIgnoreCase(\"Yes\")){\r\n            Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981YesEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'Yes'\";\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981NoEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'No'\";\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAA++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryB=0; retryB<5; retryB++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"))));\r\n            WebElement searchByEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchByEle);\r\n            searchByEle.sendKeys(selectText);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[3]+\"'\",searchByEle);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(searchByEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryB++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryC=0; retryC<5; retryC++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"))));\r\n            WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[4]+\"'\",VINNoTxtEle);\r\n            act.moveToElement(VINNoTxtEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryC++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAC=0; retryAC<5; retryAC++){\r\n            try{\r\n            String AirBag = addVehicleParams[5].toString();\r\n            System.out.println(AirBag);\r\n            Thread.sleep(4000);\r\n\r\n            if(AirBag.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"))));\r\n                WebElement AirBagYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagYesEle);\r\n                AirBagYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                             Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"))));\r\n                WebElement AirBagNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagNoEle);\r\n                AirBagNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n                      Thread.sleep(3000);\r\n            String ABS = addVehicleParams[6].toString();\r\n            System.out.println(ABS);\r\n            \r\n                   Thread.sleep(4000);\r\n            if(ABS.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"))));\r\n                WebElement ABSYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSYesEle);\r\n                ABSYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"))));\r\n                WebElement ABSNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSNoEle);\r\n                ABSNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAC++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryD=0; retryD<5; retryD++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"))));\r\n            WebElement antiTheftEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",antiTheftEle);\r\n            antiTheftEle.sendKeys(selectText);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[7]+\"'\",antiTheftEle);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryD++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String AAASafetyInsp = addVehicleParams[8].toString();\r\n            \r\n            Thread.sleep(2000);\r\n            for(int retryE=0; retryE<5; retryE++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"))));\r\n            WebElement vehicleUsageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleUsageEle);\r\n            vehicleUsageEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[9]+\"'\",vehicleUsageEle);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.TAB).build().perform();\r\n            String vehicleusagevalue = addVehicleParams[9].toString();\r\n                if (vehicleusagevalue.equalsIgnoreCase(\"Business\")) {\r\n                    WebElement useOfVehicle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:TradesmanType-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].click();\",useOfVehicle);\r\n                    useOfVehicle.sendKeys(selectText);\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.DELETE).build().perform();\r\n                    js.executeScript(\"arguments[0].value='\"+addVehicleParams[19]+\"'\",useOfVehicle);\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.ENTER).build().perform();\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.TAB).build().perform(); \r\n                        String useOfVehicleValue = addVehicleParams[19].toString();\r\n                        if (useOfVehicleValue.equalsIgnoreCase(\"other\")) {\r\n                        WebElement OtherReason = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:TradesmanOther-inputEl')]\"))));\r\n                            js.executeScript(\"arguments[0].click();\",OtherReason);\r\n                            js.executeScript(\"arguments[0].value='\"+addVehicleParams[19]+\"'\",OtherReason);\r\n                            act.moveToElement(OtherReason).sendKeys(Keys.TAB).build().perform();  \r\n                        }\r\n                }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryE++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryF=0; retryF<5; retryF++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"))));\r\n            WebElement AnnualMileageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",AnnualMileageEle);\r\n            Thread.sleep(750);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[10]+\"'\",AnnualMileageEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AnnualMileageEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryF++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAF=0; retryAF<5; retryAF++){\r\n            try{\r\n            String PreviouslyTitled = addVehicleParams[11].toString(); \r\n            System.out.println(PreviouslyTitled);\r\n            Thread.sleep(2000);\r\n            if(PreviouslyTitled.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"))));\r\n                WebElement PreviouslyTitledYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledYesEle);\r\n                //PreviouslyTitledYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle);\r\n                //Thread.sleep(2000);\r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"))));\r\n                WebElement PreviouslyTitledNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledNoEle);\r\n                Thread.sleep(1000);\r\n                //PreviouslyTitledNoEle.sendKeys(Keys.TAB);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle); \r\n                //Thread.sleep(1000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryF++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryG=0; retryG<5; retryG++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"))));\r\n            WebElement ownershipEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",ownershipEle);\r\n            ownershipEle.sendKeys(selectText);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[12]+\"'\",ownershipEle);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryG++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAG=0; retryAG<5; retryAG++){\r\n            try{\r\n           \r\n            String VehicleModification = addVehicleParams[13].toString();\r\n            System.out.println(VehicleModification);\r\n            Thread.sleep(3000);\r\n            if(VehicleModification.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"))));\r\n                WebElement VehicleModificationYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationYesEle);\r\n                //VehicleModificationYesEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"))));\r\n                wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\")));\r\n                WebElement VehicleModificationNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationNoEle);\r\n                //VehicleModificationNoEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAG++;\r\n            }\r\n                \r\n            }\r\n                Thread.sleep(2000);\r\n            for(int retryAH=0; retryAH<5; retryAH++){\r\n            try{\r\n            String StateName = addVehicleParams[17].toString();\r\n            System.out.println(StateName);\r\n            String Snowplow = addVehicleParams[18].toString();\r\n            System.out.println(StateName);\r\n            if(StateName.equalsIgnoreCase(\"MI\") || StateName.equalsIgnoreCase(\"TN\")){\r\n                if(Snowplow.equalsIgnoreCase(\"Yes\")){\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"))));\r\n                    WebElement snowPlowYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowYesEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n                else{\r\n                                   Thread.sleep(2000);\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"))));\r\n                    WebElement snowPlowNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowNoEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n            }\r\n            else{\r\n                            Thread.sleep(3000);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The SnowPlow is not applicable for all other States.\";\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAG++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(3000);\r\n            for(int retryH=0; retryH<5; retryH++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"))));\r\n            WebElement ExistingDamageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"));\r\n            WebElement setClick = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));          \r\n            js.executeScript(\"arguments[0].click();\",ExistingDamageEle);\r\n            ExistingDamageEle.sendKeys(selectText);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.DELETE).build().perform();\r\n            Thread.sleep(300);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[14]+\"'\",ExistingDamageEle);\r\n            Thread.sleep(300);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.ENTER).build().perform();\r\n                     // act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n\r\n            setClick.click();\r\n            //act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n            \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryH++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryI=0; retryI<5; retryI++){\r\n            try{\r\n            String assigneedriver = addVehicleParams[15].toString().trim();\r\n            boolean value         = assigneedriver.isEmpty();\r\n            String result         = String.valueOf(value);\r\n            if(result.equalsIgnoreCase(\"false\")){\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"))));\r\n            WebElement AssignedDriverEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",AssignedDriverEle);\r\n            AssignedDriverEle.sendKeys(selectText);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",AssignedDriverEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.TAB).build().perform();\r\n            }else{\r\n                System.out.println(\"Assigned Driver Automatically\");\r\n            }break;\r\n            }\r\n            catch(Exception ex){\r\n                //retryI++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAI=0; retryAI<5; retryAI++){\r\n            try{\r\n           \r\n            String NamedInsured = addVehicleParams[16].toString();\r\n            System.out.println(NamedInsured);\r\n            Thread.sleep(2000);\r\n            if(NamedInsured.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"))));\r\n                WebElement NamedInsuredYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredYesEle);\r\n                //Thread.sleep(500);\r\n                //NamedInsuredYesEle.click();\r\n                //NamedInsuredYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n    \r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"))));\r\n                WebElement NamedInsuredNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredNoEle);\r\n                Thread.sleep(350);\r\n                NamedInsuredNoEle.click();\r\n                //NamedInsuredNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryI++;\r\n            }\r\n                \r\n            }\r\n\r\n            for(int retryJ=0; retryJ<5; retryJ++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"))));\r\n            WebElement VehicleNamedInsuredEle = driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",VehicleNamedInsuredEle);\r\n            //VehicleNamedInsuredEle.click();\r\n            //driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\")).click();\r\n\r\n            VehicleNamedInsuredEle.sendKeys(selectText);\r\n                    Thread.sleep(1000);\r\n                     //VehicleNamedInsuredEle.sendKeys(Keys.DELETE);\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.DELETE).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",VehicleNamedInsuredEle);\r\n            Thread.sleep(2000);\r\n                            VehicleNamedInsuredEle.sendKeys(selectText);\r\n                     // driver.findElement(By.xpath(\"//*[contains(@id,'VehicleDetailCardTab-btnInnerEl')]\")).click();\r\n                       Thread.sleep(2000);\r\n                     act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.TAB).build().perform();\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.ENTER).build().perform();\r\n            \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                \r\n            }\r\n                \r\n            }\r\n            \r\n            if(addVehicleParams[1].equals(\"Private Passenger\")){\r\n              addVehicleParams[1]=\"Private  Passenger\";\r\n            }\r\n            for(int retryA=0; retryA<5; retryA++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"))));\r\n            WebElement vehicleDescEle = driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"));       \r\n            js.executeScript(\"arguments[0].click();\",vehicleDescEle);\r\n            vehicleDescEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[1]+\"'\",vehicleDescEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            //js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.TAB).build().perform();\r\n            //WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            //js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryA++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryK=0; retryK<3; retryK++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"))));\r\n            WebElement vehicleLookupBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"));\r\n            js.executeScript(\"arguments[0].click();\", vehicleLookupBtnEle);\r\n            Thread.sleep(4000); \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryK++;\r\n            }\r\n                \r\n            }\r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n            WebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\r\n            js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n            Thread.sleep(4000);         \r\n            break;          \r\n            \r\n        }\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Additional Vehicles added\";       \r\n\r\n        }\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'Next') and contains(text(),'Next')]\"))));\r\n            WebElement nextBtnEle = driver.findElement(By.xpath(\"//span[contains(@id,'Next') and contains(text(),'Next')]\"));\r\n            js.executeScript(\"arguments[0].click();\", nextBtnEle);\r\n            Thread.sleep(2000);\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n            actionResult.comments =  e.getMessage();\r\n    }\r\n       \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddAdditionalVehicles",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12670,
    "Description": "Adding multiple vehicles on the Vehicle screen to bind the policy.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement; \r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddAdditionalVehiclesRewrite extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    try{\r\n\r\n        driver.manage().timeouts().implicitlyWait(150, TimeUnit.SECONDS);\r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act = new Actions(driver);\r\n        String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n        String[] VehiclesInfo = inputValue.split(\",\");\r\n        int vehicleCount= VehiclesInfo.length;\r\n        System.out.println(vehicleCount);\r\n        for(int i=0;i<=vehicleCount-1;i++){\r\n        System.out.println(VehiclesInfo[i]);\r\n        String[] addVehicleParams = VehiclesInfo[i].split(\" AND \");\r\n        int paramsCount = addVehicleParams.length;\r\n\r\n        for(int j=0;j<=vehicleCount-1;j++){\r\n             Thread.sleep(3000);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"))));\r\n            WebElement createVehicleBtn = driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"));\r\n            js.executeScript(\"arguments[0].click()\",createVehicleBtn);\r\n            Thread.sleep(3000);\r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"))));         \r\n            WebElement vehicleDetailsTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"));\r\n            String getVehicleDetailsTabEle = vehicleDetailsTabEle.getAttribute(\"tabindex\");\r\n            if(getVehicleDetailsTabEle.equals(\"0\")){\r\n                actionResult.status = true;\r\n                    actionResult.comments =  \"User is on 'Vehicle Details Tab' in 'Vehicles Screen'\";\r\n            }\r\n            else{\r\n                           \r\n                actionResult.status = false;\r\n                actionResult.comments =  \" 'Vehicle Details Tab' is not opened\";\r\n            }\r\n                  Thread.sleep(2000);\r\n            \r\n            for(int retry=0; retry<5; retry++){\r\n            try{\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"))));\r\n            WebElement vehicleTypeEle = driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleTypeEle);\r\n            vehicleTypeEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[0]+\"'\",vehicleTypeEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retry++;\r\n            }\r\n                \r\n            }\r\n            \r\n            \r\n\r\n            String vehiclesYearPrior1981 = addVehicleParams[2].toString();\r\n            System.out.println(vehiclesYearPrior1981);\r\n        \r\n           for(int retryAA=0; retryAA<5; retryAA++){\r\n            try{\r\n             wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"))));\r\n            WebElement vehiclesYearPrior1981YesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"));\r\n            WebElement vehiclesYearPrior1981NoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));\r\n            if(vehiclesYearPrior1981.equalsIgnoreCase(\"Yes\")){\r\n            Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981YesEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'Yes'\";\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981NoEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'No'\";\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAA++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryB=0; retryB<5; retryB++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"))));\r\n            WebElement searchByEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchByEle);\r\n            searchByEle.sendKeys(selectText);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[3]+\"'\",searchByEle);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(searchByEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryB++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryC=0; retryC<5; retryC++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"))));\r\n            WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[4]+\"'\",VINNoTxtEle);\r\n            act.moveToElement(VINNoTxtEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryC++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAC=0; retryAC<5; retryAC++){\r\n            try{\r\n            String AirBag = addVehicleParams[5].toString();\r\n            System.out.println(AirBag);\r\n            Thread.sleep(4000);\r\n\r\n            if(AirBag.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"))));\r\n                WebElement AirBagYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagYesEle);\r\n                AirBagYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                             Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"))));\r\n                WebElement AirBagNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagNoEle);\r\n                AirBagNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n                      Thread.sleep(3000);\r\n            String ABS = addVehicleParams[6].toString();\r\n            System.out.println(ABS);\r\n            \r\n                   Thread.sleep(4000);\r\n            if(ABS.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"))));\r\n                WebElement ABSYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSYesEle);\r\n                ABSYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"))));\r\n                WebElement ABSNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSNoEle);\r\n                ABSNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAC++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryD=0; retryD<5; retryD++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"))));\r\n            WebElement antiTheftEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",antiTheftEle);\r\n            antiTheftEle.sendKeys(selectText);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[7]+\"'\",antiTheftEle);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryD++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String AAASafetyInsp = addVehicleParams[8].toString();\r\n            \r\n            Thread.sleep(2000);\r\n            for(int retryE=0; retryE<5; retryE++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"))));\r\n            WebElement vehicleUsageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleUsageEle);\r\n            vehicleUsageEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[9]+\"'\",vehicleUsageEle);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.TAB).build().perform();\r\n            String vehicleusagevalue = addVehicleParams[9].toString();\r\n                if (vehicleusagevalue.equalsIgnoreCase(\"Business\")) {\r\n                    WebElement useOfVehicle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:TradesmanType-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].click();\",useOfVehicle);\r\n                    useOfVehicle.sendKeys(selectText);\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.DELETE).build().perform();\r\n                    js.executeScript(\"arguments[0].value='\"+addVehicleParams[19]+\"'\",useOfVehicle);\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.ENTER).build().perform();\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.TAB).build().perform();   \r\n                }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryE++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryF=0; retryF<5; retryF++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"))));\r\n            WebElement AnnualMileageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",AnnualMileageEle);\r\n            Thread.sleep(750);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[10]+\"'\",AnnualMileageEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AnnualMileageEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryF++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAF=0; retryAF<5; retryAF++){\r\n            try{\r\n            String PreviouslyTitled = addVehicleParams[11].toString(); \r\n            System.out.println(PreviouslyTitled);\r\n            Thread.sleep(2000);\r\n            if(PreviouslyTitled.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"))));\r\n                WebElement PreviouslyTitledYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledYesEle);\r\n                //PreviouslyTitledYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle);\r\n                //Thread.sleep(2000);\r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"))));\r\n                WebElement PreviouslyTitledNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledNoEle);\r\n                Thread.sleep(1000);\r\n                //PreviouslyTitledNoEle.sendKeys(Keys.TAB);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle); \r\n                //Thread.sleep(1000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryF++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryG=0; retryG<5; retryG++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"))));\r\n            WebElement ownershipEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",ownershipEle);\r\n            ownershipEle.sendKeys(selectText);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[12]+\"'\",ownershipEle);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryG++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAG=0; retryAG<5; retryAG++){\r\n            try{\r\n           \r\n            String VehicleModification = addVehicleParams[13].toString();\r\n            System.out.println(VehicleModification);\r\n            Thread.sleep(3000);\r\n            if(VehicleModification.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"))));\r\n                WebElement VehicleModificationYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationYesEle);\r\n                //VehicleModificationYesEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"))));\r\n                wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\")));\r\n                WebElement VehicleModificationNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationNoEle);\r\n                //VehicleModificationNoEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAG++;\r\n            }\r\n                \r\n            }\r\n                Thread.sleep(2000);\r\n            for(int retryAH=0; retryAH<5; retryAH++){\r\n            try{\r\n            String StateName = addVehicleParams[17].toString();\r\n            System.out.println(StateName);\r\n            String Snowplow = addVehicleParams[18].toString();\r\n            System.out.println(StateName);\r\n            if(StateName.equalsIgnoreCase(\"MI\") || StateName.equalsIgnoreCase(\"TN\")){\r\n                if(Snowplow.equalsIgnoreCase(\"Yes\")){\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"))));\r\n                    WebElement snowPlowYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowYesEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n                else{\r\n                                   Thread.sleep(2000);\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"))));\r\n                    WebElement snowPlowNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowNoEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n            }\r\n            else{\r\n                            Thread.sleep(3000);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The SnowPlow is not applicable for all other States.\";\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAG++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(3000);\r\n            for(int retryH=0; retryH<5; retryH++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"))));\r\n            WebElement ExistingDamageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"));\r\n            WebElement setClick = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));          \r\n            js.executeScript(\"arguments[0].click();\",ExistingDamageEle);\r\n            ExistingDamageEle.sendKeys(selectText);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.DELETE).build().perform();\r\n            Thread.sleep(300);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[14]+\"'\",ExistingDamageEle);\r\n            Thread.sleep(300);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.ENTER).build().perform();\r\n                     // act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n\r\n            setClick.click();\r\n            //act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n            \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryH++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryI=0; retryI<5; retryI++){\r\n            try{\r\n            String assigneedriver = addVehicleParams[15].toString().trim();\r\n            boolean value         = assigneedriver.isEmpty();\r\n            String result         = String.valueOf(value);\r\n            if(result.equalsIgnoreCase(\"false\")){\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"))));\r\n            WebElement AssignedDriverEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",AssignedDriverEle);\r\n            AssignedDriverEle.sendKeys(selectText);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",AssignedDriverEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.TAB).build().perform();\r\n            }else{\r\n                System.out.println(\"Assigned Driver Automatically\");\r\n            }break;\r\n            }\r\n            catch(Exception ex){\r\n                //retryI++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAI=0; retryAI<5; retryAI++){\r\n            try{\r\n           \r\n            String NamedInsured = addVehicleParams[16].toString();\r\n            System.out.println(NamedInsured);\r\n            Thread.sleep(2000);\r\n            if(NamedInsured.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"))));\r\n                WebElement NamedInsuredYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredYesEle);\r\n                //Thread.sleep(500);\r\n                //NamedInsuredYesEle.click();\r\n                //NamedInsuredYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n    \r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"))));\r\n                WebElement NamedInsuredNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredNoEle);\r\n                Thread.sleep(350);\r\n                NamedInsuredNoEle.click();\r\n                //NamedInsuredNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryI++;\r\n            }\r\n                \r\n            }\r\n\r\n            for(int retryJ=0; retryJ<5; retryJ++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"))));\r\n            WebElement VehicleNamedInsuredEle = driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",VehicleNamedInsuredEle);\r\n            //VehicleNamedInsuredEle.click();\r\n            //driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\")).click();\r\n\r\n            VehicleNamedInsuredEle.sendKeys(selectText);\r\n                    Thread.sleep(1000);\r\n                     //VehicleNamedInsuredEle.sendKeys(Keys.DELETE);\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.DELETE).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",VehicleNamedInsuredEle);\r\n            Thread.sleep(2000);\r\n                            VehicleNamedInsuredEle.sendKeys(selectText);\r\n                     // driver.findElement(By.xpath(\"//*[contains(@id,'VehicleDetailCardTab-btnInnerEl')]\")).click();\r\n                       Thread.sleep(2000);\r\n                     act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.TAB).build().perform();\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.ENTER).build().perform();\r\n            \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                \r\n            }\r\n                \r\n            }\r\n            \r\n            if(addVehicleParams[1].equals(\"Private Passenger\")){\r\n              addVehicleParams[1]=\"Private  Passenger\";\r\n            }\r\n            for(int retryA=0; retryA<5; retryA++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"))));\r\n            WebElement vehicleDescEle = driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"));       \r\n            js.executeScript(\"arguments[0].click();\",vehicleDescEle);\r\n            vehicleDescEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[1]+\"'\",vehicleDescEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            //js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.TAB).build().perform();\r\n            //WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            //js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryA++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryK=0; retryK<3; retryK++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"))));\r\n            WebElement vehicleLookupBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"));\r\n            js.executeScript(\"arguments[0].click();\", vehicleLookupBtnEle);\r\n            Thread.sleep(4000); \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryK++;\r\n            }\r\n                \r\n            }\r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n            WebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\r\n            js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n            Thread.sleep(4000);         \r\n            break;          \r\n            \r\n        }\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Additional Vehicles added\";       \r\n\r\n        }\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'RewriteWizard:Next')]\"))));\r\n            WebElement nextBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'RewriteWizard:Next')]\"));\r\n            js.executeScript(\"arguments[0].click();\", nextBtnEle);\r\n            Thread.sleep(2000);\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n            actionResult.comments =  e.getMessage();\r\n    }\r\n       \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddAdditionalVehiclesRewrite",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11815,
    "Description": "Binding the Auto policy with Multiple Vehicles.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement; \r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddAdditionalVehicles_Updated extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n\r\n        driver.manage().timeouts().implicitlyWait(150, TimeUnit.SECONDS);\r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act = new Actions(driver);\r\n        String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n        String[] VehiclesInfo = inputValue.split(\"@@\");\r\n        int vehicleCount= VehiclesInfo.length;\r\n        System.out.println(vehicleCount);\r\n        for(int i=0;i<=vehicleCount-1;i++){\r\n        System.out.println(VehiclesInfo[i]);\r\n        String[] addVehicleParams = VehiclesInfo[i].split(\" AND \");\r\n        int paramsCount = addVehicleParams.length;\r\n\r\n            \r\n\r\n        for(int j=0;j<=vehicleCount-1;j++){\r\n             Thread.sleep(3000);\r\n\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"))));\r\n            WebElement createVehicleBtn = driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"));\r\n            js.executeScript(\"arguments[0].click()\",createVehicleBtn);\r\n            Thread.sleep(3000);\r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"))));         \r\n            WebElement vehicleDetailsTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"));\r\n            String getVehicleDetailsTabEle = vehicleDetailsTabEle.getAttribute(\"tabindex\");\r\n            if(getVehicleDetailsTabEle.equals(\"0\")){\r\n                actionResult.status = true;\r\n                    actionResult.comments =  \"User is on 'Vehicle Details Tab' in 'Vehicles Screen'\";\r\n            }\r\n            else{\r\n                           \r\n                    actionResult.status = false;\r\n                actionResult.comments =  \" 'Vehicle Details Tab' is not opened\";\r\n            }\r\n                  Thread.sleep(2000);\r\n            \r\n            for(int retry=0; retry<5; retry++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"))));\r\n            WebElement vehicleTypeEle = driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleTypeEle);\r\n            vehicleTypeEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[0]+\"'\",vehicleTypeEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retry++;\r\n            }\r\n                \r\n            }\r\n            \r\n            \r\n\r\n            String vehiclesYearPrior1981 = addVehicleParams[2].toString();\r\n            System.out.println(vehiclesYearPrior1981);\r\n        \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"))));\r\n            WebElement vehiclesYearPrior1981YesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"));\r\n            WebElement vehiclesYearPrior1981NoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));\r\n            if(vehiclesYearPrior1981.equalsIgnoreCase(\"Yes\")){\r\n            Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981YesEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'Yes'\";\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981NoEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'No'\";\r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryB=0; retryB<5; retryB++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"))));\r\n            WebElement searchByEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchByEle);\r\n            searchByEle.sendKeys(selectText);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[3]+\"'\",searchByEle);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(searchByEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryB++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryC=0; retryC<5; retryC++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"))));\r\n            WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[4]+\"'\",VINNoTxtEle);\r\n            act.moveToElement(VINNoTxtEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryC++;\r\n            }\r\n                \r\n            }\r\n            \r\n            String AirBag = addVehicleParams[5].toString();\r\n            System.out.println(AirBag);\r\n            Thread.sleep(4000);\r\n\r\n            if(AirBag.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"))));\r\n                WebElement AirBagYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagYesEle);\r\n                AirBagYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                             Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"))));\r\n                WebElement AirBagNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagNoEle);\r\n                AirBagNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n                      Thread.sleep(3000);\r\n            String ABS = addVehicleParams[6].toString();\r\n            System.out.println(ABS);\r\n            \r\n                   Thread.sleep(4000);\r\n            if(ABS.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"))));\r\n                WebElement ABSYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSYesEle);\r\n                ABSYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"))));\r\n                WebElement ABSNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSNoEle);\r\n                ABSNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            \r\n            for(int retryD=0; retryD<5; retryD++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"))));\r\n            WebElement antiTheftEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",antiTheftEle);\r\n            antiTheftEle.sendKeys(selectText);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[7]+\"'\",antiTheftEle);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryD++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String AAASafetyInsp = addVehicleParams[8].toString();\r\n            \r\n            Thread.sleep(2000);\r\n            for(int retryE=0; retryE<5; retryE++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"))));\r\n            WebElement vehicleUsageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleUsageEle);\r\n            vehicleUsageEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[9]+\"'\",vehicleUsageEle);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryE++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryF=0; retryF<5; retryF++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"))));\r\n            WebElement AnnualMileageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",AnnualMileageEle);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[10]+\"'\",AnnualMileageEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AnnualMileageEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryF++;\r\n            }\r\n                \r\n            }\r\n            \r\n            String PreviouslyTitled = addVehicleParams[11].toString(); \r\n            System.out.println(PreviouslyTitled);\r\n            Thread.sleep(2000);\r\n            if(PreviouslyTitled.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"))));\r\n                WebElement PreviouslyTitledYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledYesEle);\r\n                //PreviouslyTitledYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle);\r\n                //Thread.sleep(2000);\r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"))));\r\n                WebElement PreviouslyTitledNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledNoEle);\r\n                Thread.sleep(1000);\r\n                //PreviouslyTitledNoEle.sendKeys(Keys.TAB);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle); \r\n                //Thread.sleep(1000);\r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryG=0; retryG<5; retryG++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"))));\r\n            WebElement ownershipEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",ownershipEle);\r\n            ownershipEle.sendKeys(selectText);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[12]+\"'\",ownershipEle);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryG++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String VehicleModification = addVehicleParams[13].toString();\r\n            System.out.println(VehicleModification);\r\n            Thread.sleep(3000);\r\n            if(VehicleModification.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"))));\r\n                WebElement VehicleModificationYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationYesEle);\r\n                //VehicleModificationYesEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"))));\r\n                wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\")));\r\n                WebElement VehicleModificationNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationNoEle);\r\n                //VehicleModificationNoEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n                Thread.sleep(2000);\r\n            String StateName = addVehicleParams[17].toString();\r\n            System.out.println(StateName);\r\n            String Snowplow = addVehicleParams[18].toString();\r\n            System.out.println(StateName);\r\n            if(StateName.equalsIgnoreCase(\"MI\") || StateName.equalsIgnoreCase(\"TN\")){\r\n                if(Snowplow.equalsIgnoreCase(\"Yes\")){\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"))));\r\n                    WebElement snowPlowYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowYesEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n                else{\r\n                                   Thread.sleep(2000);\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"))));\r\n                    WebElement snowPlowNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowNoEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n            }\r\n            else{\r\n                            Thread.sleep(3000);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The SnowPlow is not applicable for all other States.\";\r\n            }\r\n            Thread.sleep(3000);\r\n            for(int retryH=0; retryH<5; retryH++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"))));\r\n            WebElement ExistingDamageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",ExistingDamageEle);\r\n            ExistingDamageEle.sendKeys(selectText);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[14]+\"'\",ExistingDamageEle);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryH++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryI=0; retryI<5; retryI++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"))));\r\n            WebElement AssignedDriverEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"));\r\n\r\n            //js.executeScript(\"document.getElementById(\\\"SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:PAVehiclesScreen:PAVehiclesPanelSet:VehiclesListDetailPanel:VehiclesDetailsCV:PersonalAuto_VehicleDV:AssignedDriver_Acg-inputEl\\\").click()\");           \r\n            \r\n            js.executeScript(\"arguments[0].click();\",AssignedDriverEle);\r\n            AssignedDriverEle.sendKeys(selectText);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",AssignedDriverEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryI++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String NamedInsured = addVehicleParams[16].toString();\r\n            System.out.println(NamedInsured);\r\n            Thread.sleep(2000);\r\n        \r\n            \r\n\r\n            if(NamedInsured.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"))));\r\n                WebElement NamedInsuredYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredYesEle);\r\n                //Thread.sleep(500);\r\n                //NamedInsuredYesEle.click();\r\n                //NamedInsuredYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n    \r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"))));\r\n                WebElement NamedInsuredNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredNoEle);\r\n                Thread.sleep(350);\r\n                NamedInsuredNoEle.click();\r\n                //NamedInsuredNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n            }\r\n        \r\n\r\n            for(int retryJ=0; retryJ<5; retryJ++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"))));\r\n            WebElement VehicleNamedInsuredEle = driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"));\r\n            //js.executeScript(\"arguments[0].click();\",VehicleNamedInsuredEle);\r\n            //VehicleNamedInsuredEle.click();\r\n            driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\")).click();\r\n\r\n            VehicleNamedInsuredEle.sendKeys(selectText);\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",VehicleNamedInsuredEle);\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                \r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryA=0; retryA<5; retryA++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"))));\r\n            WebElement vehicleDescEle = driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"));       \r\n            js.executeScript(\"arguments[0].click();\",vehicleDescEle);\r\n            vehicleDescEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[1]+\"'\",vehicleDescEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            //js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            //act.moveToElement(vehicleDescEle).sendKeys(Keys.TAB).build().perform();\r\n            //WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            //js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryA++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryK=0; retryK<3; retryK++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"))));\r\n            WebElement vehicleLookupBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"));\r\n            js.executeScript(\"arguments[0].click();\", vehicleLookupBtnEle);\r\n            Thread.sleep(4000); \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryK++;\r\n            }\r\n                \r\n            }\r\n    \r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n            WebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\r\n            js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n            Thread.sleep(4000);         \r\n            break;\r\n\r\n            \r\n            \r\n        }\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Additional Vehicles added\";\r\n        \r\n\r\n        }\r\n            \r\n                     wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'SubmissionWizard:Next')]\"))));\r\n            WebElement nextBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'SubmissionWizard:Next')]\"));\r\n            js.executeScript(\"arguments[0].click();\", nextBtnEle);\r\n            Thread.sleep(2000);\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n            actionResult.comments =  e.getMessage();\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddAdditionalVehicles_Updated",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11821,
    "Description": "Adding multiple vehicles on the Vehicle screen to bind the policy.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement; \r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddAdditionalVehicles_tnc extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n\r\n        driver.manage().timeouts().implicitlyWait(150, TimeUnit.SECONDS);\r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act = new Actions(driver);\r\n        String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n        String[] VehiclesInfo = inputValue.split(\"@@\");\r\n        int vehicleCount= VehiclesInfo.length;\r\n        System.out.println(vehicleCount);\r\n        for(int i=0;i<=vehicleCount-1;i++){\r\n        System.out.println(VehiclesInfo[i]);\r\n        String[] addVehicleParams = VehiclesInfo[i].split(\" AND \");\r\n        int paramsCount = addVehicleParams.length;\r\n\r\n            \r\n\r\n        for(int j=0;j<=vehicleCount-1;j++){\r\n             Thread.sleep(3000);\r\n\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"))));\r\n            WebElement createVehicleBtn = driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"));\r\n            js.executeScript(\"arguments[0].click()\",createVehicleBtn);\r\n            Thread.sleep(3000);\r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"))));         \r\n            WebElement vehicleDetailsTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"));\r\n            String getVehicleDetailsTabEle = vehicleDetailsTabEle.getAttribute(\"tabindex\");\r\n            if(getVehicleDetailsTabEle.equals(\"0\")){\r\n                actionResult.status = true;\r\n                    actionResult.comments =  \"User is on 'Vehicle Details Tab' in 'Vehicles Screen'\";\r\n            }\r\n            else{\r\n                           \r\n                actionResult.status = false;\r\n                actionResult.comments =  \" 'Vehicle Details Tab' is not opened\";\r\n            }\r\n                  Thread.sleep(2000);\r\n            \r\n            for(int retry=0; retry<5; retry++){\r\n            try{\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"))));\r\n            WebElement vehicleTypeEle = driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleTypeEle);\r\n            vehicleTypeEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[0]+\"'\",vehicleTypeEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retry++;\r\n            }\r\n                \r\n            }\r\n            \r\n            \r\n\r\n            String vehiclesYearPrior1981 = addVehicleParams[2].toString();\r\n            System.out.println(vehiclesYearPrior1981);\r\n        \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"))));\r\n            WebElement vehiclesYearPrior1981YesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"));\r\n            WebElement vehiclesYearPrior1981NoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));\r\n            if(vehiclesYearPrior1981.equalsIgnoreCase(\"Yes\")){\r\n            Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981YesEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'Yes'\";\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981NoEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'No'\";\r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryB=0; retryB<5; retryB++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"))));\r\n            WebElement searchByEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchByEle);\r\n            searchByEle.sendKeys(selectText);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[3]+\"'\",searchByEle);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(searchByEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryB++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryC=0; retryC<5; retryC++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"))));\r\n            WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[4]+\"'\",VINNoTxtEle);\r\n            act.moveToElement(VINNoTxtEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryC++;\r\n            }\r\n                \r\n            }\r\n            \r\n            String AirBag = addVehicleParams[5].toString();\r\n            System.out.println(AirBag);\r\n            Thread.sleep(4000);\r\n\r\n            if(AirBag.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"))));\r\n                WebElement AirBagYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagYesEle);\r\n                AirBagYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                             Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"))));\r\n                WebElement AirBagNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagNoEle);\r\n                AirBagNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n                      Thread.sleep(3000);\r\n            String ABS = addVehicleParams[6].toString();\r\n            System.out.println(ABS);\r\n            \r\n                   Thread.sleep(4000);\r\n            if(ABS.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"))));\r\n                WebElement ABSYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSYesEle);\r\n                ABSYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"))));\r\n                WebElement ABSNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSNoEle);\r\n                ABSNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            \r\n            for(int retryD=0; retryD<5; retryD++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"))));\r\n            WebElement antiTheftEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",antiTheftEle);\r\n            antiTheftEle.sendKeys(selectText);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[7]+\"'\",antiTheftEle);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryD++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String AAASafetyInsp = addVehicleParams[8].toString();\r\n            \r\n            Thread.sleep(2000);\r\n            for(int retryE=0; retryE<5; retryE++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"))));\r\n            WebElement vehicleUsageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleUsageEle);\r\n            vehicleUsageEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[9]+\"'\",vehicleUsageEle);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.TAB).build().perform();\r\n            String vehicleusagevalue = addVehicleParams[9].toString();\r\n                if (vehicleusagevalue.equalsIgnoreCase(\"Business\")) {\r\n                    WebElement useOfVehicle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:TradesmanType-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].click();\",useOfVehicle);\r\n                    useOfVehicle.sendKeys(selectText);\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.DELETE).build().perform();\r\n                    js.executeScript(\"arguments[0].value='\"+addVehicleParams[19]+\"'\",useOfVehicle);\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.ENTER).build().perform();\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.TAB).build().perform();   \r\n                }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryE++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryF=0; retryF<5; retryF++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"))));\r\n            WebElement AnnualMileageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",AnnualMileageEle);\r\n            Thread.sleep(750);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[10]+\"'\",AnnualMileageEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AnnualMileageEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryF++;\r\n            }\r\n                \r\n            }\r\n            \r\n            String PreviouslyTitled = addVehicleParams[11].toString(); \r\n            System.out.println(PreviouslyTitled);\r\n            Thread.sleep(2000);\r\n            if(PreviouslyTitled.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"))));\r\n                WebElement PreviouslyTitledYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledYesEle);\r\n                //PreviouslyTitledYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle);\r\n                //Thread.sleep(2000);\r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"))));\r\n                WebElement PreviouslyTitledNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledNoEle);\r\n                Thread.sleep(1000);\r\n                //PreviouslyTitledNoEle.sendKeys(Keys.TAB);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle); \r\n                //Thread.sleep(1000);\r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryG=0; retryG<5; retryG++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"))));\r\n            WebElement ownershipEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",ownershipEle);\r\n            ownershipEle.sendKeys(selectText);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[12]+\"'\",ownershipEle);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryG++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String VehicleModification = addVehicleParams[13].toString();\r\n            System.out.println(VehicleModification);\r\n            Thread.sleep(3000);\r\n            if(VehicleModification.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"))));\r\n                WebElement VehicleModificationYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationYesEle);\r\n                //VehicleModificationYesEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"))));\r\n                wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\")));\r\n                WebElement VehicleModificationNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationNoEle);\r\n                //VehicleModificationNoEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n                Thread.sleep(2000);\r\n            String StateName = addVehicleParams[17].toString();\r\n            System.out.println(StateName);\r\n            String Snowplow = addVehicleParams[18].toString();\r\n            System.out.println(StateName);\r\n            if(StateName.equalsIgnoreCase(\"MI\") || StateName.equalsIgnoreCase(\"TN\")){\r\n                if(Snowplow.equalsIgnoreCase(\"Yes\")){\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"))));\r\n                    WebElement snowPlowYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowYesEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n                else{\r\n                                   Thread.sleep(2000);\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"))));\r\n                    WebElement snowPlowNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowNoEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n            }\r\n            else{\r\n                            Thread.sleep(3000);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The SnowPlow is not applicable for all other States.\";\r\n            }\r\n            Thread.sleep(3000);\r\n            for(int retryH=0; retryH<5; retryH++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"))));\r\n            WebElement ExistingDamageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"));\r\n            WebElement setClick = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));          \r\n            js.executeScript(\"arguments[0].click();\",ExistingDamageEle);\r\n            ExistingDamageEle.sendKeys(selectText);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.DELETE).build().perform();\r\n            Thread.sleep(300);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[14]+\"'\",ExistingDamageEle);\r\n            Thread.sleep(300);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.ENTER).build().perform();\r\n                     // act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n\r\n            setClick.click();\r\n            //act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n            \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryH++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryI=0; retryI<5; retryI++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"))));\r\n            WebElement AssignedDriverEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",AssignedDriverEle);\r\n            AssignedDriverEle.sendKeys(selectText);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",AssignedDriverEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryI++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String NamedInsured = addVehicleParams[16].toString();\r\n            System.out.println(NamedInsured);\r\n            Thread.sleep(2000);\r\n        \r\n            \r\n\r\n            if(NamedInsured.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"))));\r\n                WebElement NamedInsuredYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredYesEle);\r\n                //Thread.sleep(500);\r\n                //NamedInsuredYesEle.click();\r\n                //NamedInsuredYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n    \r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"))));\r\n                WebElement NamedInsuredNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredNoEle);\r\n                Thread.sleep(350);\r\n                NamedInsuredNoEle.click();\r\n                //NamedInsuredNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n            }\r\n        \r\n\r\n            for(int retryJ=0; retryJ<5; retryJ++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"))));\r\n            WebElement VehicleNamedInsuredEle = driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",VehicleNamedInsuredEle);\r\n            //VehicleNamedInsuredEle.click();\r\n            //driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\")).click();\r\n\r\n            VehicleNamedInsuredEle.sendKeys(selectText);\r\n                    Thread.sleep(1000);\r\n                     //VehicleNamedInsuredEle.sendKeys(Keys.DELETE);\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.DELETE).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",VehicleNamedInsuredEle);\r\n            Thread.sleep(2000);\r\n                            VehicleNamedInsuredEle.sendKeys(selectText);\r\n                            \r\n                     // driver.findElement(By.xpath(\"//*[contains(@id,'VehicleDetailCardTab-btnInnerEl')]\")).click();\r\n                       Thread.sleep(2000);\r\n                     act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.TAB).build().perform();\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.ENTER).build().perform();\r\n            \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                \r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryA=0; retryA<5; retryA++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"))));\r\n            WebElement vehicleDescEle = driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"));       \r\n            js.executeScript(\"arguments[0].click();\",vehicleDescEle);\r\n            vehicleDescEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[1]+\"'\",vehicleDescEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            //js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.TAB).build().perform();\r\n            //WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            //js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryA++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryK=0; retryK<3; retryK++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"))));\r\n            WebElement vehicleLookupBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"));\r\n            js.executeScript(\"arguments[0].click();\", vehicleLookupBtnEle);\r\n            Thread.sleep(4000); \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryK++;\r\n            }\r\n                \r\n            }\r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n            WebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\r\n            js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n            Thread.sleep(4000);         \r\n            break;          \r\n            \r\n        }\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Additional Vehicles added\";       \r\n\r\n        }\r\n            \r\n        /*wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'SubmissionWizard:Next')]\"))));\r\n            WebElement nextBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'SubmissionWizard:Next')]\"));\r\n            js.executeScript(\"arguments[0].click();\", nextBtnEle);\r\n            Thread.sleep(2000);*/\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n            actionResult.comments =  e.getMessage();\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddAdditionalVehicles_tnc",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11820,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.temporal.ChronoUnit;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.Locale;\r\nimport junit.framework.Assert;\r\nimport java.lang.reflect.InvocationTargetException;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Vehicle_Usage_Screenshot extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try \r\n    {   \r\n            \r\n        WebDriverWait wait = new WebDriverWait(driver,30);\r\n        JavascriptExecutor js=(JavascriptExecutor) driver;\r\n\r\n        WebElement scroll = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"));\r\n        \r\n        js.executeScript(\"arguments[0].scrollIntoView(true);\", scroll);\r\n        js.executeScript(\"arguments[0].style.border='2px solid red'\", scroll);\r\n\r\n\r\n        Thread.sleep(1000);\r\n\r\n\r\n              actionResult.comments = \"Navigated to Vehicle Usage\";\r\n        actionResult.status = true;\r\n                            \r\n    }       \r\n        \r\n    catch(Exception e) \r\n    {\r\n        actionResult.comments =e.getMessage();\r\n        actionResult.status = false;\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n\r\n\r\n\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Vehicle_Usage_Screenshot",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9407,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 127891,
        "StepNumber": 1,
        "Description": "VerifyPriorInsuranceScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12112,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127883,
        "StepNumber": 2,
        "Description": "TenureDate",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "12/10/2023",
        "CustomActionId": 11692,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127904,
        "StepNumber": 3,
        "Description": "ACGTenureDate",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12117,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127885,
        "StepNumber": 4,
        "Description": "YesOrNoPriorHomeownersInsurance",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": 12110,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127889,
        "StepNumber": 5,
        "Description": "ExpirationDate",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "01/10/2024",
        "CustomActionId": 11691,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127888,
        "StepNumber": 6,
        "Description": "Carrier_Name",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "21st Century Assurance Company",
        "CustomActionId": 11681,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127892,
        "StepNumber": 7,
        "Description": "CarrierName_Home",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "AlternateForStep5",
        "ParameterValue": "DT_CarrierName",
        "CustomActionId": 12114,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127890,
        "StepNumber": 8,
        "Description": "Policy_Type_Selection",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Condominium (HO6)",
        "CustomActionId": 11597,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127887,
        "StepNumber": 9,
        "Description": "Click",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:HOPriorInsuranceHOEScreen:AdditionalDetailsHome_AcgDV:PNIPremiumHome-inputEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127886,
        "StepNumber": 10,
        "Description": "CompletedYearsWithPriorCarrier",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "1",
        "CustomActionId": 12111,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127897,
        "StepNumber": 11,
        "Description": "ACGTenureDateForSNI",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12118,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127893,
        "StepNumber": 12,
        "Description": "YesOrNoSameAsNamedInsured",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12115,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127894,
        "StepNumber": 13,
        "Description": "SecondNamedInsuredPriorHomeownerInsurance",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12116,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127898,
        "StepNumber": 14,
        "Description": "ExpirationDate_ForSNI",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12121,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127895,
        "StepNumber": 15,
        "Description": "CarrierName_Home_For_SNI",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12119,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127899,
        "StepNumber": 16,
        "Description": "Policy_Type_Selection_forSNI",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12122,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127896,
        "StepNumber": 17,
        "Description": "CompletedYearsWithPriorCarrierForSNI",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12120,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127900,
        "StepNumber": 18,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127901,
        "StepNumber": 19,
        "Description": "CompletedYearsWithPriorCarrier",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "1",
        "CustomActionId": 12111,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127902,
        "StepNumber": 20,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127903,
        "StepNumber": 21,
        "Description": "CompletedYearsWithPriorCarrierForSNI",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12120,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127884,
        "StepNumber": 22,
        "Description": "Click Next",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:Next-btnInnerEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Prior_Insurance",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12112,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.StaleElementReferenceException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyPriorInsuranceScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,40);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'HOPriorInsuranceHOEScreen:ttlBar')]\")));\n\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'HOPriorInsuranceHOEScreen:ttlBar')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Prior Insurance\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Prior Insurance' screen successfully\";\n\t\t}\n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyPriorInsuranceScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11692,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class TenureDate extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\ntry{\n\t\tWebElement tenureDate;\n\t\ttenureDate=driver.findElement(By.xpath(\"//input[contains(@id,'Tenure')]\"));\n\t\ttenureDate.click();\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\ttenureDate.sendKeys(s);\n\t\ttenureDate.sendKeys(Keys.DELETE);\n\t\ttenureDate.sendKeys(inputValue);\n\t\tKeys.chord(Keys.TAB);\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"The Prior Insurance Expiration Date entered as:\"+inputValue;\n\t}\n\tcatch(Exception e){\n           actionResult.status = false;\n           actionResult.comments =  e.getMessage();;\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "TenureDate",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12117,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.*;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ACGTenureDate extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"(//input[contains(@id,'AcgTenure-inputEl')])[1]\")));\r\n        WebElement ACGTenureDate = driver.findElement(By.xpath(\"(//input[contains(@id,'AcgTenure-inputEl')])[1]\"));\r\n        String s                    = Keys.chord(Keys.CONTROL,\"a\");\r\n        ACGTenureDate.sendKeys(s);\r\n        ACGTenureDate.sendKeys(Keys.DELETE);\r\n        ACGTenureDate.sendKeys(inputValue);\r\n        Thread.sleep(2000);\r\n        ACGTenureDate.sendKeys(Keys.ENTER);\r\n        ACGTenureDate.sendKeys(Keys.TAB);\r\n        Thread.sleep(2000);\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n\r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ACGTenureDate",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12110,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException; \nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoPriorHomeownersInsurance extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\t\tWebElement priorYesEle;\n\t\tWebElement priorNoEle;\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'HasPriorPolicyHome_true-inputEl')]\")));\n\n\t\tpriorYesEle=driver.findElement(By.xpath(\"//input[contains(@id,'HasPriorPolicyHome_true-inputEl')]\"));\n\t\tpriorNoEle=driver.findElement(By.xpath(\"//input[contains(@id,'HasPriorPolicyHome_false-inputEl')]\"));\n\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\t//priorYesEle.click();\n\t\t\tJavascriptExecutor executor = (JavascriptExecutor)driver;\n\t\t\texecutor.executeScript(\"arguments[0].click();\", priorYesEle);\n\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Does Named Insured have Prior Homeowners Insurance? has been selected as : 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t//priorNoEle.click();\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", priorNoEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Does Named Insured have Prior Homeowners Insurance? has been selected as : 'No'\";\n\t\t}\n\t\tThread.sleep(1500);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\tactionResult.status = false;\n           \t\tactionResult.comments =  \"'Does Named Insured have Prior Homeowners Insurance?' field is not available in Additonal Details Tab\"+MsgDetails;\n\t\t}\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoPriorHomeownersInsurance",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11681,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Carrier_Name extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n      \r\n        try\r\n    {\r\n      for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        //driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n        WebDriverWait wait=new WebDriverWait(driver, 20);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'CarrierName')]\"))));\r\n\r\n        //WebElement carrierNameEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'CarrierName')]\"))));\r\n\r\n        WebElement carrierNameEle=driver.findElement(By.xpath(\"//input[contains(@id,'CarrierName')]\"));\r\n        String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        carrierNameEle.sendKeys(s);\r\n        carrierNameEle.sendKeys(Keys.DELETE);\r\n        Thread.sleep(500);\r\n        Actions act = new Actions(driver);\r\n        act.sendKeys(carrierNameEle,inputValue).build().perform();\r\n        Thread.sleep(300);\r\n        //carrierNameEle.sendKeys(Keys.ENTER);\r\n        //driver.findElement(By.xpath(\"//input[contains(@id,':EducationLevel-inputEl')]\")).click();\r\n        carrierNameEle.sendKeys(Keys.TAB);\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n\r\n        break;\r\n        }\r\n        catch(Exception e)\r\n        {\r\n        actionResult.comments = e.getMessage();\r\n        retry++;\r\n        }\r\n      }\r\n    }   \r\n    catch(Exception e)\r\n    {\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n    }\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Carrier_Name",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12114,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class CarrierName_Home extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\t\t//driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tWebDriverWait wait=new WebDriverWait(driver, 20);\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'CarrierName')]\"))));\n\n\t\t//WebElement carrierNameEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'CarrierName')]\"))));\n\n\t\tWebElement carrierNameEle=driver.findElement(By.xpath(\"//input[contains(@id,'CarrierName')]\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tcarrierNameEle.sendKeys(s);\n\t\tcarrierNameEle.sendKeys(Keys.DELETE);\n\t\tThread.sleep(500);\n\t\t//Actions act = new Actions(driver);\n\t\t//act.sendKeys(carrierNameEle,inputValue).build().perform();\n\t\tcarrierNameEle.sendKeys(inputValue);\n\t\tThread.sleep(300);\n\t\tcarrierNameEle.sendKeys(Keys.ENTER);\n\t\tcarrierNameEle.sendKeys(Keys.TAB);\n      \t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "CarrierName_Home",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12111,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.StaleElementReferenceException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class CompletedYearsWithPriorCarrier extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'YearsWithPriorCarrier-inputEl')]\")));\r\n        WebElement carrier=driver.findElement(By.xpath(\"//input[contains(@id,'YearsWithPriorCarrier-inputEl')]\"));\r\n        String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        carrier.sendKeys(s);\r\n        carrier.sendKeys(Keys.DELETE);\r\n        carrier.sendKeys(inputValue);\r\n        carrier.sendKeys(Keys.ENTER);\r\n        Thread.sleep(750);\r\n        carrier.sendKeys(Keys.TAB);\r\n        Thread.sleep(3000);\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "CompletedYearsWithPriorCarrier",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12118,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.*;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ACGTenureDateForSNI extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"(//input[contains(@id,'AcgTenure-inputEl')])[2]\")));\r\n        WebElement ACGTenureDate = driver.findElement(By.xpath(\"(//input[contains(@id,'AcgTenure-inputEl')])[2]\"));\r\n        String s                 = Keys.chord(Keys.CONTROL,\"a\");\r\n        ACGTenureDate.sendKeys(s);\r\n        ACGTenureDate.sendKeys(Keys.DELETE);\r\n        ACGTenureDate.sendKeys(inputValue);\r\n        Thread.sleep(2000);\r\n        ACGTenureDate.sendKeys(Keys.ENTER);\r\n        ACGTenureDate.sendKeys(Keys.TAB);\r\n        Thread.sleep(2000);\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n\r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ACGTenureDateForSNI",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12115,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException; \r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesOrNoSameAsNamedInsured extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n        WebElement YesSameAsNamedInsured;\r\n        WebElement NoSameAsNamedInsured;\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'SNISameAsPNI_false-inputEl')]\")));\r\n\r\n        YesSameAsNamedInsured = driver.findElement(By.xpath(\"//input[contains(@id,'SNISameAsPNI_true-inputEl')]\"));\r\n        NoSameAsNamedInsured  = driver.findElement(By.xpath(\"//input[contains(@id,'SNISameAsPNI_false-inputEl')]\"));\r\n        \r\n\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            //priorYesEle.click();\r\n            JavascriptExecutor executor = (JavascriptExecutor)driver;\r\n            executor.executeScript(\"arguments[0].click();\", YesSameAsNamedInsured);\r\n\r\n                actionResult.status   = true;\r\n                actionResult.comments = \"Same As NamedInsured : 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            //priorNoEle.click();\r\n            \r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            js.executeScript(\"arguments[0].click();\", NoSameAsNamedInsured);\r\n                actionResult.status   = true;\r\n                actionResult.comments = \"Same As NamedInsured: 'No'\";\r\n        }\r\n        Thread.sleep(1500);\r\n        }\r\n        catch(Exception e){\r\n            String MsgDetails     = e.getMessage();\r\n            actionResult.status   = false;\r\n            actionResult.comments = \"YesOrNoSameasnamedInsured\"+MsgDetails;\r\n        }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoSameAsNamedInsured",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12116,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException; \r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SecondNamedInsuredPriorHomeownerInsurance extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n        WebElement YesSecondNamedInsuredPriorHomeownerInsurance;\r\n        WebElement NoSecondNamedInsuredPriorHomeownerInsurance;\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'SNIHasPriorPolicyHome_false-inputEl')]\")));\r\n\r\n        YesSecondNamedInsuredPriorHomeownerInsurance = driver.findElement(By.xpath(\"//input[contains(@id,'SNIHasPriorPolicyHome_true-inputEl')]\"));\r\n        NoSecondNamedInsuredPriorHomeownerInsurance  = driver.findElement(By.xpath(\"//input[contains(@id,'SNIHasPriorPolicyHome_false-inputEl')]\"));\r\n        \r\n\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            //priorYesEle.click();\r\n            JavascriptExecutor executor = (JavascriptExecutor)driver;\r\n            executor.executeScript(\"arguments[0].click();\", YesSecondNamedInsuredPriorHomeownerInsurance);\r\n\r\n                actionResult.status   = true;\r\n                actionResult.comments = \"SecondNamed Insured Prior Homeowner Insurance : 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            //priorNoEle.click();\r\n            \r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            js.executeScript(\"arguments[0].click();\", NoSecondNamedInsuredPriorHomeownerInsurance);\r\n                actionResult.status   = true;\r\n                actionResult.comments = \"SecondNamed Insured Prior Homeowner Insurance : 'No'\";\r\n        }\r\n        Thread.sleep(1500);\r\n        }\r\n        catch(Exception e){\r\n            String MsgDetails     = e.getMessage();\r\n            actionResult.status   = false;\r\n            actionResult.comments = \"YesOrNoSecondNamedInsuredPriorHomeownerInsurance\"+MsgDetails;\r\n        }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SecondNamedInsuredPriorHomeownerInsurance",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12121,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ExpirationDate_ForSNI extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"(//input[contains(@id,'ExpirationDate')])[2]\")));\r\n        WebElement expirationDate;\r\n        expirationDate = driver.findElement(By.xpath(\"(//input[contains(@id,'ExpirationDate')])[2]\"));\r\n        expirationDate.click();\r\n        String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        expirationDate.sendKeys(s);\r\n        expirationDate.sendKeys(Keys.DELETE);\r\n        expirationDate.sendKeys(inputValue);\r\n        Keys.chord(Keys.TAB);\r\n        Thread.sleep(2000);\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"The Prior Insurance Expiration Date entered as:\"+inputValue;\r\n \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ExpirationDate_ForSNI",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12119,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class CarrierName_Home_For_SNI extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        \r\n        //driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n        WebDriverWait wait=new WebDriverWait(driver, 20);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//input[contains(@id,'CarrierName')])[2]\"))));\r\n\r\n        //WebElement carrierNameEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'CarrierName')]\"))));\r\n\r\n        WebElement carrierNameEle=driver.findElement(By.xpath(\"(//input[contains(@id,'CarrierName')])[2]\"));\r\n        String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        carrierNameEle.sendKeys(s);\r\n        carrierNameEle.sendKeys(Keys.DELETE);\r\n        Thread.sleep(500);\r\n        //Actions act = new Actions(driver);\r\n        //act.sendKeys(carrierNameEle,inputValue).build().perform();\r\n        carrierNameEle.sendKeys(inputValue);\r\n        Thread.sleep(300);\r\n        carrierNameEle.sendKeys(Keys.ENTER);\r\n        carrierNameEle.sendKeys(Keys.TAB);\r\n            actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "CarrierName_Home_For_SNI",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12122,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Policy_Type_Selection_forSNI extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n    try{\r\n        WebDriverWait wait = new WebDriverWait(driver,60);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//input[contains(@id,'PolicyType-inputEl') or contains(@id,'FLPKGHOPTRange-inputEl')])[2]\"))));\r\n        \r\n        WebElement policyTypeEle = driver.findElement(By.xpath(\"(//input[contains(@id,'PolicyType-inputEl') or contains(@id,'FLPKGHOPTRange-inputEl')])[2]\"));\r\n    \r\n        policyTypeEle.click();\r\n        Thread.sleep(1000);\r\n        WebElement policyTypeValueEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n        policyTypeValueEle.click();\r\n        Thread.sleep(2000);\r\n        \r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n    \r\n    break;\r\n    }\r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Policy_Type_Selection_forSNI",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12120,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.StaleElementReferenceException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class CompletedYearsWithPriorCarrierForSNI extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"(//input[contains(@id,'YearsWithPriorCarrier-inputEl')])[2]\")));\r\n        WebElement carrier=driver.findElement(By.xpath(\"(//input[contains(@id,'YearsWithPriorCarrier-inputEl')])[2]\"));\r\n        String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        carrier.sendKeys(s);\r\n        carrier.sendKeys(Keys.DELETE);\r\n        carrier.sendKeys(inputValue);\r\n        carrier.sendKeys(Keys.ENTER);\r\n        Thread.sleep(750);\r\n        carrier.sendKeys(Keys.TAB);\r\n        Thread.sleep(3000);\r\n        //Keys.chord(Keys.TAB);\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "CompletedYearsWithPriorCarrierForSNI",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9360,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 126866,
        "StepNumber": 1,
        "Description": "VerifyDwellingScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12135,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126903,
        "StepNumber": 2,
        "Description": "ClickOnAutoFillButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12452,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126945,
        "StepNumber": 3,
        "Description": "Click On locationDropDown",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'HODwellingLocationInputMenuIcon')]/img",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126946,
        "StepNumber": 4,
        "Description": "Click On editLocation",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'EditDwellingLocation-textEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126947,
        "StepNumber": 5,
        "Description": "WaitForPageLoad",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126948,
        "StepNumber": 6,
        "Description": "Verify censusTract IsEmpty",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'LocationDetail_AcgInputSet:censustract')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126949,
        "StepNumber": 7,
        "Description": "Click On censusTract",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'LocationDetail_AcgInputSet:censustract')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126950,
        "StepNumber": 8,
        "Description": "Enter censusTract",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'censustract-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126951,
        "StepNumber": 9,
        "Description": "Click On OK Btn",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'Update-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126952,
        "StepNumber": 10,
        "Description": "WaitForPageLoad",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126855,
        "StepNumber": 11,
        "Description": "ResidenceType",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Primary",
        "CustomActionId": 12123,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126883,
        "StepNumber": 12,
        "Description": "NumberOfFamilies",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "1",
        "CustomActionId": 12148,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126904,
        "StepNumber": 13,
        "Description": "ZoneSelection",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "OnlyForMILegacy",
        "ParameterValue": null,
        "CustomActionId": 12153,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126868,
        "StepNumber": 14,
        "Description": "NumberOfOccupants",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": 12136,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126884,
        "StepNumber": 15,
        "Description": "NumberOfFamilies",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12148,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126894,
        "StepNumber": 16,
        "Description": "Verify Purchase or Completion date",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'HomePurchaseDate-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126867,
        "StepNumber": 17,
        "Description": "Enter Purchase or Completion date",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'HomePurchaseDate-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "2012",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126869,
        "StepNumber": 18,
        "Description": "YesOrNoIsTheNameInsuredOriginalOwner",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": 12137,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126916,
        "StepNumber": 19,
        "Description": "YesOrNoDwellingVisibleFromPublicRoad",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12172,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126917,
        "StepNumber": 20,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126915,
        "StepNumber": 21,
        "Description": "YesOrNoIsPrimaryResidenceInsuredWithAAA",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12156,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126913,
        "StepNumber": 22,
        "Description": "Nearest_Primary_Residence_Location",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12171,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126918,
        "StepNumber": 23,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126856,
        "StepNumber": 24,
        "Description": "YesOrNoSmokerResidingInHouse",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12124,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126874,
        "StepNumber": 25,
        "Description": "YesOrNoStromShutters",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12138,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126941,
        "StepNumber": 26,
        "Description": "StormShutters",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12166,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126914,
        "StepNumber": 27,
        "Description": "YesOrNoWillDwellingBeLeftUnprotected",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12125,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126931,
        "StepNumber": 28,
        "Description": "WindMitigationCertification",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": 12160,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126935,
        "StepNumber": 29,
        "Description": "InspectionDateInDwellingScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_InspectionDate",
        "CustomActionId": 12165,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126932,
        "StepNumber": 30,
        "Description": "Roof_Covering",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12161,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126933,
        "StepNumber": 31,
        "Description": "Roof_to_Wall_Connection",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12162,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126934,
        "StepNumber": 32,
        "Description": "Roof_Deck_Attachment",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12163,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126936,
        "StepNumber": 33,
        "Description": "SecondaryWaterResistance",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Unknown ",
        "CustomActionId": 12164,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126875,
        "StepNumber": 34,
        "Description": "YesOrNoLaminatedWindows",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12139,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126876,
        "StepNumber": 35,
        "Description": "YesOrNoSecondaryWaterResistance",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12140,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126877,
        "StepNumber": 36,
        "Description": "YesOrNoAttachedPoolEnclosur",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12141,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126879,
        "StepNumber": 37,
        "Description": "YesOrNoPool",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12143,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126880,
        "StepNumber": 38,
        "Description": "YesOrNoPoolSlide",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12144,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126881,
        "StepNumber": 39,
        "Description": "YesOrNoDivingBoards",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12145,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126882,
        "StepNumber": 40,
        "Description": "YesOrNoTrampoline",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12146,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126878,
        "StepNumber": 41,
        "Description": "NumberOfDogs",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "1",
        "CustomActionId": 12142,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126871,
        "StepNumber": 42,
        "Description": "Click to Load Page",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:HODwellingHOEScreen:HODwellingSingleHOEPanelSet:HODwellingDetailsHOEDV:HomeRented-inputEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126921,
        "StepNumber": 43,
        "Description": "DaysHomeRentedToOthers",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12158,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126870,
        "StepNumber": 44,
        "Description": "YesOrNoWillDwellingBeLeftUnprotected",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12125,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126929,
        "StepNumber": 45,
        "Description": "YesOrNoDwellingUnderConstruction",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12167,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126897,
        "StepNumber": 46,
        "Description": "Will Dwelling be left unoccupied or vacant for over 60 consecutive days?",
        "LocatorTypeId": 7,
        "Locator": "//*[@id=\"SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:HODwellingHOEScreen:HODwellingSingleHOEPanelSet:HODwellingDetailsHOEDV:DwellingUnoccupied_false-inputEl\"]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126896,
        "StepNumber": 47,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126920,
        "StepNumber": 48,
        "Description": "VerifyModernConstruction",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'modernCobnstructionValue_true-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126919,
        "StepNumber": 49,
        "Description": "Modern Construction Value",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'modernCobnstructionValue_true-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126895,
        "StepNumber": 50,
        "Description": "Systemetic Home Protection",
        "LocatorTypeId": 7,
        "Locator": "//input[@id='SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:HODwellingHOEScreen:HODwellingSingleHOEPanelSet:HODwellingDetailsHOEDV:IsSysHomeInsOrdered_Acg_true-inputEl']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126923,
        "StepNumber": 51,
        "Description": "DwellingScreen_HO4",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12170,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126898,
        "StepNumber": 52,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126901,
        "StepNumber": 53,
        "Description": "YesOrNoIsPrimaryResidenceInsuredWithAAA",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12156,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126900,
        "StepNumber": 54,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126899,
        "StepNumber": 55,
        "Description": "Verify Dwelling Address",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'HODwellingLocationInput-inputEl')]",
        "ActionId": 62,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126902,
        "StepNumber": 56,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126888,
        "StepNumber": 57,
        "Description": "Click to Load Page",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:HODwellingHOEScreen:HODwellingSingleHOEPanelSet:HODwellingDetailsHOEDV:HomeRented-inputEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126889,
        "StepNumber": 58,
        "Description": "ProtectionDetailsTabClick",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12147,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126857,
        "StepNumber": 59,
        "Description": "Click on Protection Details",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:HODwellingHOEScreen:HODwellingSingleHOEPanelSet:DwellingSingleProtectionIdTab-btnInnerEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 25,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126890,
        "StepNumber": 60,
        "Description": "ClickOnAutoFillButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12452,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126891,
        "StepNumber": 61,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "4",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126887,
        "StepNumber": 62,
        "Description": "Verify YesOrNo1000FeetFireHydrant",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'distanceTofireHydrant_true-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executeNextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126873,
        "StepNumber": 63,
        "Description": "YesOrNo1000FeetFireHydrant",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12126,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126892,
        "StepNumber": 64,
        "Description": "YesOrNo1000FeetFireHydrant",
        "LocatorTypeId": 7,
        "Locator": "//*[@id=\"SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:HODwellingHOEScreen:HODwellingSingleHOEPanelSet:HODwellingProtectionDetailsHOEDV:distanceTofireHydrant_true-inputEl\"]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126954,
        "StepNumber": 65,
        "Description": "RiskAddressDistance",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "5 miles or less",
        "CustomActionId": 12174,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126893,
        "StepNumber": 66,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126928,
        "StepNumber": 67,
        "Description": "verifyProtectionClassExists",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'protectionClass-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126905,
        "StepNumber": 68,
        "Description": "ProtectionClassSelection",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_ProtectionClass",
        "CustomActionId": 12152,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126906,
        "StepNumber": 69,
        "Description": "CountrySelection",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Country",
        "CustomActionId": 12154,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126858,
        "StepNumber": 70,
        "Description": "YesOrNoSprinklerSystem",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12127,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126886,
        "StepNumber": 71,
        "Description": "Verify Responding Fire Department",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'respondingFireDepartmentId-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executeNextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126872,
        "StepNumber": 72,
        "Description": "RespondingFireDepartment",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "TENNESSEE RIDGE FS",
        "CustomActionId": 12134,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126885,
        "StepNumber": 73,
        "Description": "RespondingFireDeptRandomSelection",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12151,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126910,
        "StepNumber": 74,
        "Description": "Verify Within Wind Pool Area",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(text(),'Within Wind Pool Area')]",
        "ActionId": 23,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126911,
        "StepNumber": 75,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "3",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126912,
        "StepNumber": 76,
        "Description": "Verify Within Wind Pool Area is selected as No",
        "LocatorTypeId": 7,
        "Locator": "//div[contains(@id,'WithinWindPoolArea-inputEl')]",
        "ActionId": 23,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126859,
        "StepNumber": 77,
        "Description": "YesOrNoDeadbolt",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12128,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126860,
        "StepNumber": 78,
        "Description": "FireAlarm",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Localized",
        "CustomActionId": 12129,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126861,
        "StepNumber": 79,
        "Description": "YesOrNoFireExtinguisher",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12130,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126862,
        "StepNumber": 80,
        "Description": "YesOrNoSmokeAlarm",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12131,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126863,
        "StepNumber": 81,
        "Description": "BurglarAlarm",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Centralized",
        "CustomActionId": 12132,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126907,
        "StepNumber": 82,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126908,
        "StepNumber": 83,
        "Description": "Click on Details Tab",
        "LocatorTypeId": 7,
        "Locator": "//span[text()='Details']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126909,
        "StepNumber": 84,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126864,
        "StepNumber": 85,
        "Description": "WaterDetectionDevice",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Single Point Detection",
        "CustomActionId": 12133,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126938,
        "StepNumber": 86,
        "Description": "OVERRIDE",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'override-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126942,
        "StepNumber": 87,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126937,
        "StepNumber": 88,
        "Description": "Clear the value",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'HurricaneTerrainExposure-inputEl')]",
        "ActionId": 8,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126939,
        "StepNumber": 89,
        "Description": "Hurricane Terrain Exposure",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'HurricaneTerrainExposure-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "HVHZ",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126940,
        "StepNumber": 90,
        "Description": "OVERRIDE",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'override-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126943,
        "StepNumber": 91,
        "Description": "Verify Responding Fire Department",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'respondingFireDepartmentId-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executeNextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126922,
        "StepNumber": 92,
        "Description": "RespondingFireDepartment",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "TENNESSEE RIDGE FS",
        "CustomActionId": 12134,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126944,
        "StepNumber": 93,
        "Description": "RespondingFireDeptRandomSelection",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12151,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126924,
        "StepNumber": 94,
        "Description": "Verify YesOrNo1000FeetFireHydrant",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'distanceTofireHydrant_true-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executeNextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126925,
        "StepNumber": 95,
        "Description": "YesOrNo1000FeetFireHydrant",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 12126,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126953,
        "StepNumber": 96,
        "Description": "Verify RiskAddressDistance",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(text(),'What is the risk address distance')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executeNextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126930,
        "StepNumber": 97,
        "Description": "RiskAddressDistance",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12174,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126865,
        "StepNumber": 98,
        "Description": "Click Next",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:Next-btnEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126926,
        "StepNumber": 99,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12444,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126927,
        "StepNumber": 100,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12556,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Dwelling_Home",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12135,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyDwellingScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ntry{\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'HODwellingHOEScreen:ttlBar')]\")));\n\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'HODwellingHOEScreen:ttlBar')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Dwelling\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Dwelling' screen successfully\";\n\t\t}\n\t}\n\tcatch(Exception e){\n\t\tString exceptionMsg = e.getMessage();\n\t\tactionResult.status = false;\n           \tactionResult.comments =  \"'Dwelling' screen is not displayed\";\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyDwellingScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12123,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ResidenceType extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry\n\t{\n\t  for(int retry=0; retry<5; retry++)\n\t  {\n\t\ttry\n\t\t{\n\n\t\tWebDriverWait wait=new WebDriverWait(driver, 20);\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'ResidenceType-inputEl')]\"))));\n\t\tWebElement residenceType=driver.findElement(By.xpath(\"//input[contains(@id,'ResidenceType-inputEl')]\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tresidenceType.sendKeys(s);\n\t\tresidenceType.sendKeys(Keys.DELETE);\n\t\tresidenceType.sendKeys(inputValue);\n\t\tThread.sleep(2000);\n\t\t//residenceType.sendKeys(Keys.ENTER);\n\t\tresidenceType.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";\n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\tretry++;\n\t\t}\n\t  }\n\t}\t\n\tcatch(Exception e)\n\t{\n\t\tactionResult.status = false;\n       \tactionResult.comments =  e.getMessage();\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ResidenceType",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12148,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class NumberOfOccupants_Copy extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\nWebElement occupants=driver.findElement(By.xpath(\"//input[contains(@id,'SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:HODwellingHOEScreen:HODwellingSingleHOEPanelSet:HODwellingDetailsHOEDV:NumberofFamilies-inputEl')]\"));\n\t\n\toccupants.sendKeys(Keys.chord(Keys.CONTROL,\"a\"));\n\toccupants.sendKeys(Keys.DELETE);\n       occupants.sendKeys(inputValue);\n\tThread.sleep(2000);\n\toccupants.sendKeys(Keys.ENTER);\n\toccupants.sendKeys(Keys.TAB);\n\tThread.sleep(2000);\n\nactionResult.status = true;\nactionResult.comments = \"Executed Successfully\"; \n\n\n}\ncatch(Exception e){\n\nactionResult.status = false;\n           actionResult.comments =  e.getMessage();\n}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "NumberOfFamilies",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12153,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ZoneSelection extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t//driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\tWebDriverWait wait = new WebDriverWait(driver,20);\n\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\tActions act = new Actions(driver);\n\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\tString inputValueVariable = inputValue;\n\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\t\n\ttry \n\t\t{\t\n\t\t\t\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HODwellingDetailsHOEDV:Zone')]\"))));\n\t\tWebElement zoneEle = driver.findElement(By.xpath(\"//input[contains(@id,'HODwellingDetailsHOEDV:Zone')]\"));\n\t\tjs.executeScript(\"arguments[0].setAttribute('style', 'border:2px solid red; background:yellow')\", zoneEle);\n\t\tjs.executeScript(\"arguments[0].click();\",zoneEle);\n\t\tzoneEle.sendKeys(selectText);\n\t\tact.moveToElement(zoneEle).sendKeys(Keys.DELETE).build().perform();\n\t\tjs.executeScript(\"arguments[0].value='\"+inputValueVariable+\"'\",zoneEle);\n\t\t//act.moveToElement(zoneEle).sendKeys(Keys.ENTER).build().perform();\n\t\tact.moveToElement(zoneEle).sendKeys(Keys.TAB).build().perform();\n\t\t\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"The Value for the Field has been Selected as : \"+inputValueVariable;\n\n\t\tbreak;\n\t\t}\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\t\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ZoneSelection",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12136,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class NumberOfOccupants extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\nWebElement occupants=driver.findElement(By.xpath(\"//input[contains(@id,'NumberofOccupants-inputEl')]\"));\n\t\n\toccupants.sendKeys(Keys.chord(Keys.CONTROL,\"a\"));\n\toccupants.sendKeys(Keys.DELETE);\n       occupants.sendKeys(inputValue);\n\tThread.sleep(2000);\n\toccupants.sendKeys(Keys.ENTER);\n\toccupants.sendKeys(Keys.TAB);\n\tThread.sleep(2000);\n\nactionResult.status = true;\nactionResult.comments = \"Executed Successfully\"; \n\n\n}\ncatch(Exception e){\n\nactionResult.status = false;\n           actionResult.comments =  e.getMessage();\n}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "NumberOfOccupants",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12137,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoIsTheNameInsuredOriginalOwner extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\t\tWebElement ownerYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsNamedInsuredTheOriginalOwner_true-inputEl')]\"));\n\t\tWebElement ownerNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsNamedInsuredTheOriginalOwner_false-inputEl')]\"));\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", ownerYesEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Is Named Insured the original owner? has been selected as : 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t//smokerNoEle.click();\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", ownerNoEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Is Named Insured the original owner? has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\tactionResult.status = false;\n           \t\tactionResult.comments =  \"Is Named Insured the original owner? field is not available\"+MsgDetails;\n\t\t}\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoIsTheNameInsuredOriginalOwner",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12172,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesOrNoDwellingVisibleFromPublicRoad extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\ntry{\r\n    WebElement dwellingVisible    = driver.findElement(By.xpath(\"//input[contains(@id,'DwellingVisible_true-inputEl')]\"));\r\n    WebElement dwellingNotVisible = driver.findElement(By.xpath(\"//input[contains(@id,'DwellingVisible_false-inputEl')]\"));\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            \r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            js.executeScript(\"arguments[0].click();\", dwellingVisible);\r\n                actionResult.status   = true;\r\n                actionResult.comments = \"PublicRoad has been selected as : 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            //smokerNoEle.click();\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            js.executeScript(\"arguments[0].click();\", dwellingNotVisible);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"PublicRoad has been selected as : 'No'\";\r\n        }\r\n        \r\n        }\r\n        catch(Exception e){\r\n            String MsgDetails = e.getMessage();\r\n            actionResult.status = true;\r\n                actionResult.comments =  \"InsuredWithAAA field is not available\"+MsgDetails;\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoDwellingVisibleFromPublicRoad",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12156,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoIsPrimaryResidenceInsuredWithAAA extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry{\n\t\tWebElement ownerYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'InsuredWithAAA_true-inputEl')]\"));\n\t\tWebElement ownerNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'InsuredWithAAA_false-inputEl')]\"));\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", ownerYesEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"InsuredWithAAA has been selected as : 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t//smokerNoEle.click();\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", ownerNoEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"InsuredWithAAA has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"InsuredWithAAA field is not available\"+MsgDetails;\n\t\t}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoIsPrimaryResidenceInsuredWithAAA",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12171,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Nearest_Primary_Residence_Location extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       WebDriverWait wait = new WebDriverWait(driver,20);\r\n    JavascriptExecutor js = (JavascriptExecutor)driver;\r\n    Actions act = new Actions(driver);\r\n    String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n    String inputValueVariable = inputValue;\r\n    \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        \r\n    try \r\n        {  \r\n    \r\n            WebElement nearestLocation = driver.findElement(By.xpath(\"//input[contains(@id,'ResidenceState-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", nearestLocation);\r\n            js.executeScript(\"arguments[0].click();\",nearestLocation);\r\n            Thread.sleep(1000);\r\n            WebElement nearestLocationValue = driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValueVariable+\"']\"));\r\n            js.executeScript(\"arguments[0].click();\",nearestLocationValue);\r\n            Thread.sleep(2000);\r\n\r\n           actionResult.status = true;\r\n        actionResult.comments = \"The Value for the Field has been Selected as : \"+inputValueVariable;\r\n\r\n        break;\r\n        }\r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Nearest_Primary_Residence_Location",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12124,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoSmokerResidingInHouse extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'SmokerResidingInHousehold_true-inputEl')]\"))));\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'SmokerResidingInHousehold_false-inputEl')]\"))));\n\t\t\n\t\tWebElement smokerYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'SmokerResidingInHousehold_true-inputEl')]\"));\n\t\tWebElement smokerNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'SmokerResidingInHousehold_false-inputEl')]\"));\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\t//smokerYesEle.click();\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", smokerYesEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Smoker Residing in household has been selected as : 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t//smokerNoEle.click();\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", smokerNoEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Smoker Residing in household has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\tactionResult.status = false;\n           \t\tactionResult.comments =  \"Smoker Residing in household field is not available in Additonal Details Tab\"+MsgDetails;\n\t\t}\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoSmokerResidingInHouse",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12138,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoStromShutters extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\t\tWebElement shutterYes= driver.findElement(By.xpath(\"//input[contains(@id,'StormShutters_true-inputEl')]\"));\n\t\tWebElement shutterNo= driver.findElement(By.xpath(\"//input[contains(@id,'StormShutters_false-inputEl')]\"));\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", shutterYes);\n           \t\t\n           \t\tactionResult.comments =  \"Storm Shutters has been selected as : 'Yes'\";\n\t\t\tactionResult.status = true;\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t//smokerNoEle.click();\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", shutterNo);\n           \t\t\n           \t\tactionResult.comments =  \"Storm Shutters has been selected as : 'No'\";\n\t\t\tactionResult.status = true;\n\t\t}\n\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\nif(MsgDetails.contains(\"no such element\")){\nactionResult.comments =  \"Storm Shutters field is not Applicable\";\nactionResult.status = true;\n}else{\nactionResult.comments =  \"Storm Shutters field is not available\"+MsgDetails;\nactionResult.status = false;\n}\n\n           \t\t\n\t\t}\n\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoStromShutters",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12166,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class StormShutters extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n    try{\r\n        WebDriverWait wait = new WebDriverWait(driver,60);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'StormShutters_Acg-inputEl')]\"))));\r\n        \r\n        WebElement policyTypeEle = driver.findElement(By.xpath(\"//*[contains(@id,'StormShutters_Acg-inputEl')]\"));\r\n    \r\n        policyTypeEle.click();\r\n        Thread.sleep(1000);\r\n        WebElement policyTypeValueEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n        policyTypeValueEle.click();\r\n        Thread.sleep(2000);\r\n        \r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n    \r\n    break;\r\n    }\r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "StormShutters",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12125,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoWillDwellingBeLeftUnprotected extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\t\t\n\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'DwellingUnoccupied_true-inputEl')]\")));\n\n\t\tWebElement dwellingYesEle= driver.findElement(By.xpath(\"//input[contains(@id,'DwellingUnoccupied_true-inputEl')]\"));\n\t\tWebElement dwellingNoEle= driver.findElement(By.xpath(\"//input[contains(@id,'DwellingUnoccupied_false-inputEl')]\"));\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\t//dwellingYesEle.click();\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", dwellingYesEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Will Dwelling be left unoccupied or vacant for over 60 consecutive days? has been selected as : 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t//dwellingNoEle.click();\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", dwellingNoEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Will Dwelling be left unoccupied or vacant for over 60 consecutive days? has been selected as : 'No'\";\n\t\t}\n\t\tThread.sleep(750);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\tactionResult.status = false;\n           \t\tactionResult.comments =  \"Will Dwelling be left unoccupied or vacant for over 60 consecutive days? field is not available in Additonal Details Tab\"+MsgDetails;\n\t\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoWillDwellingBeLeftUnprotected",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12160,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class WindMitigationCertification extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n    try{\r\n        WebDriverWait wait = new WebDriverWait(driver,60);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'WindMitigationCertification_Acg-inputEl')]\"))));\r\n        \r\n        WebElement policyTypeEle=driver.findElement(By.xpath(\"//*[contains(@id,'WindMitigationCertification_Acg-inputEl')]\"));\r\n    \r\n        policyTypeEle.click();\r\n        Thread.sleep(1000);\r\n        WebElement policyTypeValueEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n        policyTypeValueEle.click();\r\n        Thread.sleep(2000);\r\n        \r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n    \r\n    break;\r\n    }\r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "WindMitigationCertification",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12165,
    "Description": "To get the required effective date from system icon",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class InspectionDateInDwellingScreen extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\nfor(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'InspectionDate-inputEl')]\"));\r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        String settingText=settingContents.getText();\r\n        int dateTimeIndex=settingText.indexOf(\"Date/Time:\");\r\n        String dateTime=settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        System.out.println(\"date:\"+effectiveDate);\r\n        System.setProperty(\"EffectiveDate\", effectiveDate);\r\n              \r\n                    WebDriverWait wait=new WebDriverWait(driver, 20);\r\n            wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'InspectionDate-inputEl')]\"))));\r\n            WebElement effectiveDateEle = driver.findElement(By.xpath(\"//input[contains(@id,'InspectionDate-inputEl')]\"));\r\n            String s                    = Keys.chord(Keys.CONTROL,\"a\");\r\n            effectiveDateEle.sendKeys(s);\r\n            effectiveDateEle.sendKeys(Keys.DELETE);\r\n             //driver.findElement(By.xpath(\"//input[contains(@id,'InspectionDate-inputEl')]\")).clear();\r\n             Thread.sleep(2000);\r\n             effectiveDateEle.sendKeys(effectiveDate);\r\n        //driver.findElement(By.xpath(\"//input[contains(@id,'InspectionDate-inputEl')]\")).sendKeys(effectiveDate);\r\n            actionResult.SaveParameterValue(\"DT_InspectionDate\", effectiveDate);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"effective date entered\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "InspectionDateInDwellingScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12161,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Roof_Covering extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n    try{\r\n        WebDriverWait wait = new WebDriverWait(driver,60);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'RoofCovering_Acg-inputEl')]\"))));\r\n        \r\n        WebElement policyTypeEle=driver.findElement(By.xpath(\"//*[contains(@id,'RoofCovering_Acg-inputEl')]\"));\r\n    \r\n        policyTypeEle.click();\r\n        Thread.sleep(1000);\r\n        WebElement policyTypeValueEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n        policyTypeValueEle.click();\r\n        Thread.sleep(2000);\r\n        \r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n    \r\n    break;\r\n    }\r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Roof_Covering",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12162,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Roof_to_Wall_Connection extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n    try{\r\n        WebDriverWait wait = new WebDriverWait(driver,60);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'RoofToWallConnection_Acg-inputEl')]\"))));\r\n        \r\n        WebElement policyTypeEle=driver.findElement(By.xpath(\"//*[contains(@id,'RoofToWallConnection_Acg-inputEl')]\"));\r\n    \r\n        policyTypeEle.click();\r\n        Thread.sleep(1000);\r\n        WebElement policyTypeValueEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n        policyTypeValueEle.click();\r\n        Thread.sleep(2000);\r\n        \r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n    \r\n    break;\r\n    }\r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Roof_to_Wall_Connection",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12163,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Roof_Deck_Attachment extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n    try{\r\n        WebDriverWait wait = new WebDriverWait(driver,60);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'RoofDeckAttachmentFlPkg_Acg-inputEl')]\"))));\r\n        \r\n        WebElement policyTypeEle=driver.findElement(By.xpath(\"//*[contains(@id,'RoofDeckAttachmentFlPkg_Acg-inputEl')]\"));\r\n    \r\n        policyTypeEle.click();\r\n        Thread.sleep(1000);\r\n        WebElement policyTypeValueEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n        policyTypeValueEle.click();\r\n        Thread.sleep(2000);\r\n        \r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n    \r\n    break;\r\n    }\r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Roof_Deck_Attachment",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12164,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SecondaryWaterResistance extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n    try{\r\n        WebDriverWait wait = new WebDriverWait(driver,60);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'SecondaryWaterResistance_Acg-inputEl')]\"))));\r\n        \r\n        WebElement policyTypeEle = driver.findElement(By.xpath(\"//*[contains(@id,'SecondaryWaterResistance_Acg-inputEl')]\"));\r\n    \r\n        policyTypeEle.click();\r\n        Thread.sleep(1000);\r\n        WebElement policyTypeValueEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n        policyTypeValueEle.click();\r\n        Thread.sleep(2000);\r\n        \r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n    \r\n    break;\r\n    }\r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SecondaryWaterResistance",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12139,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesOrNoLaminatedWindows extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\ntry{\r\n        WebElement laminatedYes= driver.findElement(By.xpath(\"//input[contains(@id,'LaminatedWindows_true-inputEl')]\"));\r\n        WebElement laminatedNo= driver.findElement(By.xpath(\"//input[contains(@id,'LaminatedWindows_false-inputEl')]\"));\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            \r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            js.executeScript(\"arguments[0].click();\", laminatedYes);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Laminated Windows has been selected as : 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            //smokerNoEle.click();\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            js.executeScript(\"arguments[0].click();\", laminatedNo);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Laminated Windows has been selected as : 'No'\";\r\n        }\r\n        \r\n        }\r\n        catch(Exception e){\r\n            String MsgDetails   = e.getMessage();\r\n            actionResult.status = true;\r\n                actionResult.comments =  \"Laminated Windows field is not available\"+MsgDetails;\r\n        }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoLaminatedWindows",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12140,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesOrNoSecondaryWaterResistance extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n        WebElement waterYes= driver.findElement(By.xpath(\"//input[contains(@id,'SecondaryWaterResistance_true-inputEl')]\"));\r\n        WebElement waterNo= driver.findElement(By.xpath(\"//input[contains(@id,'SecondaryWaterResistance_false-inputEl')]\"));\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            \r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            js.executeScript(\"arguments[0].click();\", waterYes);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Secondary Water Resistance has been selected as : 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            //smokerNoEle.click();\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            js.executeScript(\"arguments[0].click();\", waterNo);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Secondary Water Resistance has been selected as : 'No'\";\r\n        }\r\n        \r\n        }\r\n        catch(Exception e){\r\n            String MsgDetails   = e.getMessage();\r\n            actionResult.status = true;\r\n                actionResult.comments =  \"Secondary Water Resistance field is not available\"+MsgDetails;\r\n        }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoSecondaryWaterResistance",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12141,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesOrNoAttachedPoolEnclosur extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n        WebElement poolYes= driver.findElement(By.xpath(\"//input[contains(@id,'AttachedPoolEnclosure_true-inputEl')]\"));\r\n        WebElement poolNo= driver.findElement(By.xpath(\"//input[contains(@id,'AttachedPoolEnclosure_false-inputEl')]\"));\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            \r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            js.executeScript(\"arguments[0].click();\", poolYes);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Attached Pool Enclosure has been selected as : 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            //smokerNoEle.click();\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            js.executeScript(\"arguments[0].click();\", poolNo);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Attached Pool Enclosure has been selected as : 'No'\";\r\n        }\r\n        \r\n        }\r\n        catch(Exception e){\r\n            String MsgDetails   = e.getMessage();\r\n            actionResult.status = true;\r\n                actionResult.comments =  \"Attached Pool Enclosure field is not available\"+MsgDetails;\r\n        }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoAttachedPoolEnclosur",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12143,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoPool extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\t\tWebElement swimmingPoolYes= driver.findElement(By.xpath(\"//input[contains(@id,'SwimmingPool_true-inputEl')]\"));\n\t\tWebElement swimmingPoolNo= driver.findElement(By.xpath(\"//input[contains(@id,'SwimmingPool_false-inputEl')]\"));\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", swimmingPoolYes);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Swimming Pool has been selected as : 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t//smokerNoEle.click();\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", swimmingPoolNo);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Swimming Pool has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\tactionResult.status = false;\n           \t\tactionResult.comments =  \"Swimming Pool field is not available\"+MsgDetails;\n\t\t}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoPool",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12144,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoPoolSlide extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\t\tWebElement poolHavingSlideYes= driver.findElement(By.xpath(\"//input[contains(@id,'PoolHavingSlide_true-inputEl')]\"));\n\t\tWebElement poolHavingSlideNo= driver.findElement(By.xpath(\"//input[contains(@id,'PoolHavingSlide_false-inputEl')]\"));\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", poolHavingSlideYes);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Pool Having Slide has been selected as : 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t//smokerNoEle.click();\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", poolHavingSlideNo);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Pool Having Slide has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\tactionResult.status = false;\n           \t\tactionResult.comments =  \"Pool Having Slide field is not available\"+MsgDetails;\n\t\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoPoolSlide",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12145,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoDivingBoards extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\t\tWebElement poolYes= driver.findElement(By.xpath(\"//input[contains(@id,'PoolDivingBoard_true-inputEl')]\"));\n\t\tWebElement poolNo= driver.findElement(By.xpath(\"//input[contains(@id,'PoolDivingBoard_false-inputEl')]\"));\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", poolYes);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Pool Diving Board has been selected as : 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t//smokerNoEle.click();\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", poolNo);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Pool Diving Board has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\t\n           \t\tactionResult.comments =  \"Pool Diving Board field is not available\"+MsgDetails;\n\t\t}\n\n\t\tactionResult.status = true;\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoDivingBoards",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12146,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoTrampoline extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\t\tWebElement trampolineYes= driver.findElement(By.xpath(\"//input[contains(@id,'Trampoline_true-inputEl')]\"));\n\t\tWebElement trampolineNo= driver.findElement(By.xpath(\"//input[contains(@id,'Trampoline_false-inputEl')]\"));\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", trampolineYes);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Trampoline has been selected as : 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t//smokerNoEle.click();\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", trampolineNo);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Trampoline has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\tactionResult.status = false;\n           \t\tactionResult.comments =  \"Trampoline field is not available\"+MsgDetails;\n\t\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoTrampoline",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12142,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class NumberOfDogs extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\nWebElement dogs=driver.findElement(By.xpath(\"//input[contains(@id,'NumberOfDogs_Acg-inputEl')]\"));\n\t\n\tdogs.sendKeys(Keys.chord(Keys.CONTROL,\"a\"));\n\tdogs.sendKeys(Keys.DELETE);\n      dogs.sendKeys(inputValue);\n\tThread.sleep(2000);\n\tdogs.sendKeys(Keys.ENTER);\n\tdogs.sendKeys(Keys.TAB);\n\tThread.sleep(2000);\n\nactionResult.comments = \"Entered No.Of Dogs\"+inputValue; \n\n\n}\ncatch(Exception e){\n\n           actionResult.comments =  \"No.Of Dogs Field is not required\";\n}\n\nactionResult.status = true;\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "NumberOfDogs",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12158,
    "Description": "Enter the number of days home rented to others.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType; \r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class DaysHomeRentedToOthers extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act = new Actions(driver);\r\n            String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n            \r\n            for(int retry=0; retry<=2;retry++){\r\n                    try{\r\n                        \r\n                        String homeRentedValue = inputValue.toString().trim();\r\n                        \r\n                        //Entering Number of Days home rented to others\r\n                        WebElement homeRented = driver.findElement(By.xpath(\"//input[contains(@id,'HomeRented-inputEl')]\"));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", homeRented);\r\n                        js.executeScript(\"arguments[0].click();\",homeRented);\r\n                        Thread.sleep(1000);\r\n                        homeRented.sendKeys(Keys.DELETE);\r\n                        Thread.sleep(1000);\r\n                        js.executeScript(\"arguments[0].value='\"+homeRentedValue+\"'\",homeRented);\r\n                        act.moveToElement(homeRented).sendKeys(Keys.TAB).build().perform();\r\n                        Thread.sleep(1000);\r\n                                               \r\n                        break;\r\n                    }\r\n                    catch(Exception e) {\r\n                        actionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\r\n                        actionResult.status = false;\r\n                    }\r\n                }\r\n\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Number of Days home rented to others field is filled successfully\";\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n\r\n    }\r\n\r\n\r\n\r\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n  \r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "DaysHomeRentedToOthers",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12167,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesOrNoDwellingUnderConstruction extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n        WebElement extinguisherYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'DwellingUnderConstruction_true-inputEl')]\"));\r\n        WebElement extinguisherNoEle  = driver.findElement(By.xpath(\"//input[contains(@id,'DwellingUnderConstruction_false-inputEl')]\"));\r\n        JavascriptExecutor executor   = (JavascriptExecutor)driver;\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            \r\n            executor.executeScript(\"arguments[0].click();\", extinguisherYesEle);\r\n            Thread.sleep(1000);\r\n                WebElement DwellingDayTrue = driver.findElement(By.xpath(\"//input[contains(@id,'HODwellingDetailsHOEDV:ConstructionDate_true-inputEl')]\"));\r\n            executor.executeScript(\"arguments[0].style.border='2px solid red'\", DwellingDayTrue);\r\n                executor.executeScript(\"arguments[0].click();\",DwellingDayTrue);\r\n                Thread.sleep(1000);\r\n            WebElement DwellingProffContractorTrue = driver.findElement(By.xpath(\"//input[contains(@id,'HODwellingDetailsHOEDV:professionalcontractor_true-inputEl')]\"));\r\n            executor.executeScript(\"arguments[0].style.border='2px solid red'\", DwellingProffContractorTrue);\r\n                executor.executeScript(\"arguments[0].click();\",DwellingProffContractorTrue);\r\n                Thread.sleep(1000);\r\n                actionResult.status   = true;\r\n                actionResult.comments = \"Dwelling has been selected as : 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            \r\n                executor.executeScript(\"arguments[0].click();\", extinguisherNoEle);\r\n                actionResult.status   = true;\r\n                actionResult.comments = \"Dwelling has been selected as : 'No'\";\r\n        }\r\n        \r\n        }\r\n        catch(Exception e){\r\n            String MsgDetails     = e.getMessage();\r\n            actionResult.status   = false;\r\n            actionResult.comments = \"Dwelling field is not available\"+MsgDetails;\r\n        }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoDwellingUnderConstruction",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12170,
    "Description": "Here Resident Type is chosen as Secondary and State as California",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class DwellingScreen_HO4 extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n         \r\n       try{\r\n       \r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act = new Actions(driver);\r\n            String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n            String[] dwellingParams = inputValue.split(\" AND \");\r\n            String stateName = dwellingParams[0].toString();\r\n            String DDResType = dwellingParams[1].toString();\r\n            String DDNoofOccupants = dwellingParams[2].toString();\r\n            String DDNoofFamilies = dwellingParams[3].toString();\r\n            String DDNewConCompYear = dwellingParams[4].toString();\r\n            String DDNmdInsOrgOwn = dwellingParams[5].toString();\r\n            String DDSmokerInHouse = dwellingParams[6].toString();\r\n            String DDUnderCon = dwellingParams[7].toString();\r\n            String DDSysHInspecOrd = dwellingParams[8].toString();\r\n            String DDStormShut = dwellingParams[9].toString();\r\n            String DDLaminatedWin = dwellingParams[10].toString();\r\n            String DDWaterRes = dwellingParams[11].toString();\r\n            String DDAttdPoolEncls = dwellingParams[12].toString();\r\n            String DDUnOccu = dwellingParams[13].toString();\r\n            String DDSwimPool = dwellingParams[14].toString();\r\n            String DDPoolSlide = dwellingParams[15].toString();\r\n            String DDDivingBrd = dwellingParams[16].toString();\r\n            String DDTrampoline = dwellingParams[17].toString();\r\n            String DDNoOfDogs = dwellingParams[18].toString();\r\n            String DPDPrtctCalss = dwellingParams[19].toString();\r\n            String DPDFireDept = dwellingParams[20].toString();\r\n            String DPDSprinkSys = dwellingParams[21].toString();\r\n            String DPDDeadbolts = dwellingParams[22].toString();\r\n            String DPDFireAlm = dwellingParams[23].toString();\r\n            String DPDFireExt = dwellingParams[24].toString();\r\n            String DPDSmokeDect = dwellingParams[25].toString();\r\n            String DPDBurglarAlm = dwellingParams[26].toString();\r\n            String DPDWaterDect = dwellingParams[27].toString();\r\n            \r\n            \r\n            \r\n            \r\n            ////////     Verifying the 'Dwelling' Screen      //////////////////////\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'HODwellingHOEScreen:ttlBar')]\"))));\r\n            WebElement DwellingPageTtlEle = driver.findElement(By.xpath(\"//span[contains(@id,'HODwellingHOEScreen:ttlBar')]\"));\r\n            \r\n            String actDwellingPageTtlEle = DwellingPageTtlEle.getText();\r\n            if(actDwellingPageTtlEle.equals(\"Dwelling\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \" 'Dwelling' screen has been displayed\";\r\n                \r\n            }\r\n            \r\n            ///////////// Verify the 'Details' Tab has opened or not   ///////////////\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'DwellingDetailsSingleIDTab')]\"))));\r\n            WebElement DwellingDetailTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'DwellingDetailsSingleIDTab')]\"));\r\n            String getDwellingDetailTabEleIndex = DwellingDetailTabEle.getAttribute(\"tabindex\");\r\n            if(getDwellingDetailTabEleIndex.equals(\"0\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"User is on 'Dwelling Details Tab' in Dwelling screen\";\r\n            }\r\n            else{\r\n                Thread.sleep(3000);\r\n                js.executeScript(\"arguments[0].click();\",DwellingDetailTabEle);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \" Navigated to the 'Dwelling Details Tab' successfully\";\r\n            }\r\n            \r\n            ////// Residense Type ////////\r\n            for(int retry =1; retry<=5; retry++) \r\n            {\r\n            \r\n            try \r\n            {   \r\n                \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'ResidenceType-inputEl')]\"))));\r\n            WebElement DDResTypeEle = driver.findElement(By.xpath(\"//input[contains(@id,'ResidenceType-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", DDResTypeEle);\r\n            js.executeScript(\"arguments[0].click();\",DDResTypeEle);\r\n            DDResTypeEle.sendKeys(selectText);\r\n            act.moveToElement(DDResTypeEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+DDResType+\"'\",DDResTypeEle);\r\n            //act.moveToElement(DDResTypeEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(2000);\r\n            act.moveToElement(DDResTypeEle).sendKeys(Keys.TAB).build().perform();\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments = \"The 'Residence Type' has been Selected as : \"+DDResType;\r\n\r\n            break;\r\n            }\r\n            catch(Exception e) {\r\n            actionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\r\n            actionResult.status = false;\r\n            }\r\n            }\r\n            \r\n            ////// Is Primary Residence insured with AAA ////////\r\n            try \r\n            {   \r\n            Thread.sleep(3000); \r\n            WebElement insuredWithAAA = driver.findElement(By.xpath(\"//input[contains(@id,'InsuredWithAAA_false-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", insuredWithAAA);\r\n            js.executeScript(\"arguments[0].click();\",insuredWithAAA);\r\n            Thread.sleep(2000);\r\n            \r\n            WebElement dwellingVisible = driver.findElement(By.xpath(\"//input[contains(@id,'DwellingVisible_true-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", dwellingVisible);\r\n            js.executeScript(\"arguments[0].click();\",dwellingVisible);\r\n            Thread.sleep(2000);\r\n            \r\n            WebElement nearestLocation = driver.findElement(By.xpath(\"//input[contains(@id,'ResidenceState-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", nearestLocation);\r\n            js.executeScript(\"arguments[0].click();\",nearestLocation);\r\n            Thread.sleep(1000);\r\n            WebElement nearestLocationValue = driver.findElement(By.xpath(\"//li[@role='option' and text()='California']\"));\r\n            js.executeScript(\"arguments[0].click();\",nearestLocationValue);\r\n            Thread.sleep(2000);\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments = \"Executed Successfully\";\r\n            }\r\n            catch(Exception e) {\r\n            actionResult.comments =e.getMessage();\r\n            actionResult.status = true;\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "DwellingScreen_HO4",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12147,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ProtectionDetailsTabClick extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n         \n        \tWebElement protectionDetails= driver.findElement(By.xpath(\"//span[contains(@id,'DwellingSingleProtectionIdTab-btnInnerEl')]\"));\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\twait.until(ExpectedConditions.elementToBeClickable(protectionDetails));\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", protectionDetails);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Navigated to Protection Details Screen\";\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ProtectionDetailsTabClick",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12126,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNo1000FeetFireHydrant extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\ntry{\n\n\t\t\n\t\tWebElement hydrantYesEle=driver.findElement(By.xpath(\"//input[contains(@id,'distanceTofireHydrant_true-inputEl')]\"));\n\t\tWebElement hydrantNoEle=driver.findElement(By.xpath(\"//input[contains(@id,'distanceTofireHydrant_false-inputEl')]\"));\n\t\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\tJavascriptExecutor executor = (JavascriptExecutor)driver;\n\t\t\texecutor.executeScript(\"arguments[0].click();\", hydrantYesEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Is the Risk Address within 1000 feet of the nearest fire hydrant? has been selected as : 'Yes'\";\n\t\t}\n\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", hydrantNoEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Is the Risk Address within 1000 feet of the nearest fire hydrant? has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\t\nif(MsgDetails.contains(\"no such element\")){\nactionResult.comments =  \"'Is the Risk Address within 1000 feet of the nearest fire hydrant?' field is not APPLICABLE\"+MsgDetails;\nactionResult.status = true;\n}else{\nactionResult.comments =  \"'Is the Risk Address within 1000 feet of the nearest fire hydrant?' field is not available\"+MsgDetails;\nactionResult.status = false;\n}\n\n           \t\t\n\t\t}\n       \n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNo1000FeetFireHydrant",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12174,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class RiskAddressDistance extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n    \r\n     WebElement respondingFireDepartment = driver.findElement(By.xpath(\"//input[contains(@id,'HODwellingProtectionDetailsHOEDV:FireDepartment-inputEl')]\"));\r\n    \r\n\r\n    String s=Keys.chord(Keys.CONTROL,\"a\");\r\n    respondingFireDepartment.sendKeys(s);\r\n    respondingFireDepartment.sendKeys(Keys.DELETE);\r\n    respondingFireDepartment.sendKeys(inputValue);\r\n    Thread.sleep(2000);\r\n    //respondingFireDepartment.sendKeys(Keys.ENTER);\r\n    respondingFireDepartment.sendKeys(Keys.TAB);\r\n    Thread.sleep(4000);\r\n\r\nactionResult.status = true;\r\nactionResult.comments = \"Executed Successfully\"; \r\n\r\n}\r\ncatch(Exception e){\r\n\r\nactionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n}\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "RiskAddressDistance",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12152,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ProtectionClassSelection extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    //driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n    WebDriverWait wait = new WebDriverWait(driver,20);\r\n    JavascriptExecutor js = (JavascriptExecutor)driver;\r\n    Actions act = new Actions(driver);\r\n    String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n    String inputValueVariable = inputValue;\r\n\r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        \r\n    try \r\n        {   \r\n            \r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'protectionClass')]\"))));\r\n        WebElement protectionClassEle = driver.findElement(By.xpath(\"//input[contains(@id,'protectionClass')]\"));\r\n        js.executeScript(\"arguments[0].setAttribute('style', 'border:2px solid red; background:yellow')\", protectionClassEle);\r\n        js.executeScript(\"arguments[0].click();\",protectionClassEle);\r\n        protectionClassEle.sendKeys(selectText);\r\n        act.moveToElement(protectionClassEle).sendKeys(Keys.DELETE).build().perform();\r\n        js.executeScript(\"arguments[0].value='\"+inputValueVariable+\"'\",protectionClassEle);\r\n        //act.moveToElement(protectionClassEle).sendKeys(Keys.ENTER).build().perform();\r\n        act.moveToElement(protectionClassEle).sendKeys(Keys.TAB).build().perform();\r\n        \r\n        actionResult.status = true;\r\n        actionResult.comments = \"The Value for the Field has been Selected as : \"+inputValueVariable;\r\n\r\n        break;\r\n        }\r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = true;\r\n        }\r\n    }\r\n    \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ProtectionClassSelection",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12154,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class CountrySelection extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t//driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\tWebDriverWait wait = new WebDriverWait(driver,20);\n\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\tActions act = new Actions(driver);\n\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\tString inputValueVariable = inputValue;\n\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\t\n\ttry \n\t\t{\t\n\t\t\t\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HODwellingProtectionDetailsHOEDV:County-inputEl')]\"))));\n\t\tWebElement countryEle = driver.findElement(By.xpath(\"//input[contains(@id,'HODwellingProtectionDetailsHOEDV:County-inputEl')]\"));\n\t\tjs.executeScript(\"arguments[0].setAttribute('style', 'border:2px solid red; background:yellow')\", countryEle);\n\t\tjs.executeScript(\"arguments[0].click();\",countryEle);\n\t\tcountryEle.sendKeys(selectText);\n\t\tact.moveToElement(countryEle).sendKeys(Keys.DELETE).build().perform();\n\t\tjs.executeScript(\"arguments[0].value='\"+inputValueVariable+\"'\",countryEle);\n\t\t//act.moveToElement(countryEle).sendKeys(Keys.ENTER).build().perform();\n\t\tact.moveToElement(countryEle).sendKeys(Keys.TAB).build().perform();\n\t\t\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"The Value for the Field has been Selected as : \"+inputValueVariable;\n\n\t\tbreak;\n\t\t}\n\n\tcatch(Exception e) \n\t\t{\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\t\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "CountrySelection",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12127,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoSprinklerSystem extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\t\tWebElement sprinklerYesEle=driver.findElement(By.xpath(\"//input[contains(@id,'SprinklerSystem_true-inputEl')]\"));\n\t\tWebElement sprinklerNoEle=driver.findElement(By.xpath(\"//input[contains(@id,'SprinklerSystem_false-inputEl')]\"));\n\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\tJavascriptExecutor executor = (JavascriptExecutor)driver;\n\t\t\texecutor.executeScript(\"arguments[0].click();\", sprinklerYesEle);\n\t\t\tsprinklerYesEle.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Sprinkler System has been selected as : 'Yes'\";\n\t\t}\n\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", sprinklerNoEle);\n\t\t\tsprinklerNoEle.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Sprinkler System has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\tactionResult.status = false;\n           \t\tactionResult.comments =  \"Sprinkler System field is not available\"+MsgDetails;\n\t\t}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoSprinklerSystem",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12134,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class RespondingFireDepartment extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n\r\n\r\nWebElement respondingFireDepartment=driver.findElement(By.xpath(\"//input[contains(@id,'respondingFireDepartmentId-inputEl')]\"));\r\n    \r\n\r\n    String s=Keys.chord(Keys.CONTROL,\"a\");\r\n    respondingFireDepartment.sendKeys(s);\r\n    respondingFireDepartment.sendKeys(Keys.DELETE);\r\n    respondingFireDepartment.sendKeys(inputValue);\r\n    Thread.sleep(2000);\r\n    //respondingFireDepartment.sendKeys(Keys.ENTER);\r\n    respondingFireDepartment.sendKeys(Keys.TAB);\r\n    Thread.sleep(4000);\r\n\r\nactionResult.status = true;\r\nactionResult.comments = \"Executed Successfully\"; \r\n\r\n\r\n}\r\ncatch(Exception e){\r\n\r\nactionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n}\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "RespondingFireDepartment",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12151,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.List;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class RespondingFireDeptRandomSelection extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n    try{\r\n        WebDriverWait wait = new WebDriverWait(driver,20);\r\n        Actions act = new Actions(driver);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'respondingFireDepartmentId-inputEl')]\"))));\r\n        \r\n        WebElement respondingFireDepartment=driver.findElement(By.xpath(\"//input[contains(@id,'respondingFireDepartmentId-inputEl')]\"));\r\n    \r\n        respondingFireDepartment.click();\r\n        Thread.sleep(1000);\r\n        List<WebElement> respondingFireDeptEle = driver.findElements(By.xpath(\"//li[@role='option' and contains(text(),'<none>')]/following-sibling::li\"));\r\n        \r\n        int n = respondingFireDeptEle.size();\r\n        System.out.println(\"Size of the Elements\"+n);\r\n        \r\n        if(n >= 1){\r\n        Thread.sleep(1000);\r\n        respondingFireDeptEle.get(1).click();\r\n        }else{\r\n        act.moveToElement(respondingFireDepartment).sendKeys(Keys.ARROW_DOWN).build().perform();\r\n        act.moveToElement(respondingFireDepartment).sendKeys(Keys.ENTER).build().perform();\r\n        Thread.sleep(2000);\r\n        }\r\n        \r\n        Thread.sleep(2000);\r\n        try{\r\n        driver.findElement(By.xpath(\"//input[contains(@id,'distanceTofireHydrant_false-inputEl')]\")).click();\r\n        }\r\n        catch(Exception e){\r\n        System.out.println(e.getMessage());\r\n        }\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n    \r\n    break;\r\n    }\r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = true;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "RespondingFireDeptRandomSelection",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12128,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoDeadbolt extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\t\tWebElement deadboltYesEle=driver.findElement(By.xpath(\"//input[contains(@id,'Deadbolt_true-inputEl')]\"));\n\t\tWebElement deadboltNoEle=driver.findElement(By.xpath(\"//input[contains(@id,'Deadbolt_false-inputEl')]\"));\n\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\tJavascriptExecutor executor = (JavascriptExecutor)driver;\n\t\t\texecutor.executeScript(\"arguments[0].click();\", deadboltYesEle);\n\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Deadbolt has been selected as : 'Yes'\";\n\t\t}\n\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", deadboltNoEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Deadbolt has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\tactionResult.status = false;\n           \t\tactionResult.comments =  \"Deadbolt field is not available\"+MsgDetails;\n\t\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoDeadbolt",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12129,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.*;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class FireAlarm extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n\r\nWebDriverWait wait = new WebDriverWait(driver,30);          \r\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'FireAlarmType')]\")));\r\nThread.sleep(750);\r\nWebElement fireAlarmType=driver.findElement(By.xpath(\"//input[contains(@id,'FireAlarmType')]\"));\r\n    \r\n\r\n    String s=Keys.chord(Keys.CONTROL,\"a\");\r\n    fireAlarmType.sendKeys(s);\r\n    fireAlarmType.sendKeys(Keys.DELETE);\r\n       fireAlarmType.sendKeys(inputValue);\r\n    Thread.sleep(2000);\r\n    //fireAlarmType.sendKeys(Keys.ENTER);\r\n    fireAlarmType.sendKeys(Keys.TAB);\r\n    Thread.sleep(2000);\r\n\r\nactionResult.status = true;\r\nactionResult.comments = \"Executed Successfully\"; \r\n\r\n\r\n}\r\ncatch(Exception e){\r\n\r\nactionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n}\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "FireAlarm",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12130,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoFireExtinguisher extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\t\tWebElement extinguisherYesEle=driver.findElement(By.xpath(\"//input[contains(@id,'FireExtinguisher_true-inputEl')]\"));\n\t\tWebElement extinguisherNoEle=driver.findElement(By.xpath(\"//input[contains(@id,'FireExtinguisher_false-inputEl')]\"));\n\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\tJavascriptExecutor executor = (JavascriptExecutor)driver;\n\t\t\texecutor.executeScript(\"arguments[0].click();\", extinguisherYesEle);\n\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Fire Extinguisher has been selected as : 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", extinguisherNoEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Fire Extinguisher has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\tactionResult.status = false;\n           \t\tactionResult.comments =  \"Fire Extinguisher field is not available\"+MsgDetails;\n\t\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoFireExtinguisher",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12131,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoSmokeAlarm extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\t\tWebElement smokeYesEle=driver.findElement(By.xpath(\"//input[contains(@id,'SmokeAlarm_true-inputEl')]\"));\n\t\tWebElement smokeNoEle=driver.findElement(By.xpath(\"//input[contains(@id,'SmokeAlarm_false-inputEl')]\"));\n\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\tJavascriptExecutor executor = (JavascriptExecutor)driver;\n\t\t\texecutor.executeScript(\"arguments[0].click();\", smokeYesEle);\n\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Smoke Alarm has been selected as : 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", smokeNoEle);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Smoke Alarm has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\tactionResult.status = false;\n           \t\tactionResult.comments =  \"Smoke Alarm field is not available\"+MsgDetails;\n\t\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoSmokeAlarm",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12132,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\nimport java.util.*;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class BurglarAlarm extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'BurglarAlarm-inputEl')]\")));\n\t\tWebElement burglarAlarmType=driver.findElement(By.xpath(\"//input[contains(@id,'BurglarAlarm-inputEl')]\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tburglarAlarmType.sendKeys(s);\n\t\tburglarAlarmType.sendKeys(Keys.DELETE);\n\t\tburglarAlarmType.sendKeys(inputValue);\n\t\tThread.sleep(2000);\n\t\tburglarAlarmType.sendKeys(Keys.ENTER);\n\t\tburglarAlarmType.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "BurglarAlarm",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12133,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class WaterDetectionDevice extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n\r\n\r\nWebElement waterType=driver.findElement(By.xpath(\"//input[contains(@id,'WaterDetection-inputEl')]\"));\r\n    \r\n\r\n    String s=Keys.chord(Keys.CONTROL,\"a\");\r\n    waterType.sendKeys(s);\r\n    waterType.sendKeys(Keys.DELETE);\r\n       waterType.sendKeys(inputValue);\r\n    Thread.sleep(2000);\r\n    //waterType.sendKeys(Keys.ENTER);\r\n    waterType.sendKeys(Keys.TAB);\r\n    Thread.sleep(2000);\r\n\r\nactionResult.status   = true;\r\nactionResult.comments = \"Executed Successfully\"; \r\n\r\n}\r\ncatch(Exception e){\r\n\r\nactionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "WaterDetectionDevice",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12556,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class AjaxWait extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry {\n\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tboolean status = false;\n\t\t\tfor (int i = 0; i <= 120; i++) {\n\t\t\t\tstatus = Boolean.valueOf((boolean) js.executeScript(\"return Ext.Ajax.isLoading();\"));\n\t\t\t\tSystem.out.println(status);\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tif (!status) {\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Wait Processed\";\n\n\t\t} catch (Exception e) {\n\t\t\tactionResult.comments =e.getMessage();\n\t\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AjaxWait",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9641,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 124945,
        "StepNumber": 1,
        "Description": "AdditionalInterestTabClick",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12178,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124946,
        "StepNumber": 2,
        "Description": "NewAdditionalInterest_Company",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12192,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124955,
        "StepNumber": 3,
        "Description": "Click on Interest Type",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'Type-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124956,
        "StepNumber": 4,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124957,
        "StepNumber": 5,
        "Description": "Click on Mortagee I",
        "LocatorTypeId": 7,
        "Locator": "(//li[contains(text(),'Mortgagee I')])[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124958,
        "StepNumber": 6,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124947,
        "StepNumber": 7,
        "Description": "EnterInterestType",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_InterestType",
        "CustomActionId": 12180,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124948,
        "StepNumber": 8,
        "Description": "EnterLoanNumber",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_LoanNumber",
        "CustomActionId": 12193,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124949,
        "StepNumber": 9,
        "Description": "EnterCompanyName",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_CompanyName",
        "CustomActionId": 12194,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124950,
        "StepNumber": 10,
        "Description": "EnterPhoneNumber_Company",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_CompanyPhoneNumber",
        "CustomActionId": 12195,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124959,
        "StepNumber": 11,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124951,
        "StepNumber": 12,
        "Description": "SelectAddressSameAsInsured",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12189,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124952,
        "StepNumber": 13,
        "Description": "ClickOkBtn_AdditionalInterest",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12191,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124953,
        "StepNumber": 14,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 124954,
        "StepNumber": 15,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12444,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "PolicyChange_Dwelling_AdditionalInterest_NewCompany",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12178,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class AdditionalInterestTabClick extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\nfor(int i =1; i<=5; i++)\n{\n\ttry{\n\t\n\t\t\tWebElement additionalInterestTab= driver.findElement(By.xpath(\"//*[contains(@id,'DwellingAdditionalInterestIdTab-btnInnerEl')]\"));\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(additionalInterestTab));\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", additionalInterestTab);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Navigated to Additional Interest Screen\";\n\t\t\n\tbreak;\n\t}\n\tcatch(Exception e) {\n\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\tactionResult.status = false;\n\t}\n}\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AdditionalInterestTabClick",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12192,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class NewAdditionalInterest_Company extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry\n{\n\n\tfor(int i =1; i<=5; i++)\n\t{\n\ttry{\n\t\t\t\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\t\tWebElement addAdditionalInterestBtn= driver.findElement(By.xpath(\"//*[contains(@id,'AddContactsButton-btnInnerEl')]\"));\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(addAdditionalInterestBtn));\n\t\t\t\t\taddAdditionalInterestBtn.click();\n\t\t\t\t\t//JavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\t\t\t//js.executeScript(\"arguments[0].click();\", addAdditionalInterestBtn);\n\t\t\t\t\n\t\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Add Additional Interest has been successfully selected\";\n\t\t\n\tbreak;\n\t}\n\tcatch(Exception e) {\n\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\tactionResult.status = false;\n\t}\n\t}\n\n\tfor(int i =1; i<=5; i++)\n\t{\n\ttry{\n\t\t\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\n\t\t\tWebElement newAdditionalInterest= driver.findElement(By.xpath(\"//*[contains(@id,'newAdditionaInterestID_ACG-textEl')]\"));\n\t\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(newAdditionalInterest));\n\t\t\t\tnewAdditionalInterest.click();\n\t\t\t\t//JavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\t\t//js.executeScript(\"arguments[0].click();\", newAdditionalInterest);\n\t\t\t\t\n\t\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"New Additional Interest has been successfully selected\";\n\t\t\n\tbreak;\n\t}\n\tcatch(Exception e) {\n\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\tactionResult.status = false;\n\t}\n\t}\n\n\tfor(int i =1; i<=5; i++)\n\t{\n\ttry{\n\t\t\t\n\t\t\t\tdriver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\n\t\t\t\tWebElement newCompany= driver.findElement(By.xpath(\"//*[contains(@id,'newAdditionaInterestID_ACG:0:ContactType-textEl')]\"));\n\t\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(newCompany));\n\t\t\t\tnewCompany.click();\n\t\t\t\t//JavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\t\t//js.executeScript(\"arguments[0].click();\", newCompany);\n\t\t\t\t\n\t\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"New Additional Interest has been successfully selected\";\n\t\t\n\tbreak;\n\t}\n\tcatch(Exception e) {\n\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\tactionResult.status = false;\n\t}\n\t}\n\t\n\tactionResult.comments = \"Additional Interest Page have been navigated\";\n\tactionResult.status = true;\n\n}\n\t\ncatch(Exception e) {\n\tactionResult.comments = e.getMessage();\n\tactionResult.status = false;\n}\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "NewAdditionalInterest_Company",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12180,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnterInterestType extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int retry=0; retry<5; retry++)\n\t  {\n\t\ttry\n\t\t{\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\tThread.sleep(400);\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//*[contains(@id,'NewAdditionalInterestPopup:ContactDetailScreen:AdditionalInterestInfoDV:Type-inputEl')]\")));\n\t\tWebElement interestType=driver.findElement(By.xpath(\"//*[contains(@id,'NewAdditionalInterestPopup:ContactDetailScreen:AdditionalInterestInfoDV:Type-inputEl')]\"));\n\t\tinterestType.click();\n\n\t\tWebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\n\t\ttypeinput.click();\n\t\tThread.sleep(2000);\n\n\t\t/*String s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tinterestType.sendKeys(s);\n\t\tinterestType.sendKeys(Keys.DELETE);\n\t\tinterestType.sendKeys(inputValue);\n\t\tThread.sleep(500);\n\t\tinterestType.sendKeys(Keys.ENTER);\n\t\tinterestType.sendKeys(Keys.TAB);*/\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";  \n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t  }\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterInterestType",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12193,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnterLoanNumber extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\t\tfor(int retry=0; retry<5; retry++)\n\t  {\n\t\ttry\n\t\t{\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\tThread.sleep(400);\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//*[contains(@id,'ContractNumber-inputEl')]\")));\n\t\tWebElement loanNumber=driver.findElement(By.xpath(\"//*[contains(@id,'ContractNumber-inputEl')]\"));\n\t\n\t\tloanNumber.click();\n\t\tloanNumber.sendKeys(inputValue);\n\t\tKeys.chord(Keys.TAB);\n\t\tThread.sleep(1000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";  \n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t  }\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterLoanNumber",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12194,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnterCompanyName extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\tfor(int retry=0; retry<5; retry++)\n\t  {\n\t\ttry\n\t\t{\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\tThread.sleep(400);\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//*[contains(@id,'GlobalContactNameInputSet:Name-inputEl')]\")));\n\t\tWebElement companyName=driver.findElement(By.xpath(\"//*[contains(@id,'GlobalContactNameInputSet:Name-inputEl')]\"));\n\t\n\t\tcompanyName.click();\n\t\tcompanyName.sendKeys(inputValue);\n\t\tKeys.chord(Keys.TAB);\n\t\tThread.sleep(1000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";  \n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t  }\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterCompanyName",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12195,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnterPhoneNumber_Company extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\t//for(int retry=0; retry<5; retry++)\n\t//{\n\t\ttry\n\t\t{\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\t\t\n\t\tThread.sleep(4000);\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//*[contains(@id,'WorkPhone:GlobalPhoneInputSet:NationalSubscriberNumber-inputEl')]\")));\n\t\tWebElement phNumber=driver.findElement(By.xpath(\"//*[contains(@id,'WorkPhone:GlobalPhoneInputSet:NationalSubscriberNumber-inputEl')]\"));\n\t\n\t\tjs.executeScript(\"arguments[0].click();\",phNumber);\n\t\tphNumber.sendKeys(inputValue);\n\t\t\n\n\t\tKeys.chord(Keys.TAB);\n\t       WebElement fax=driver.findElement(By.xpath(\"(//input[contains(@id,'NationalSubscriberNumber-inputEl')])[2]\"));\n\t\tfax.click();\n\t\tThread.sleep(1000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";  \n\t\t\n\t\t//break;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t // }\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterPhoneNumber_Company",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12189,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n//</Mandatory_libraries>\r\n//Additional libraries might be declared here\r\n\r\n//<This_lines_must_not_be_modified>\r\npublic class SelectAddressSameAsInsured extends ActionResult {\r\n    /// <summary>\r\n    /// A method to perform a custom test step\r\n    /// </summary>\r\n    /// <param>\r\n    /// The method receive parameters:\r\n    /// * driver which is an instance of WebDriver or a mobile driver such as\r\n    /// AndroidDriver\r\n    ///\r\n    /// * and a second optional parameter which can be a String or a String[]\r\n    /// array.\r\n    /// One Parameter : public ActionResult Execute(WebDriver driver)\r\n    /// Two Parameters: public ActionResult Execute(WebDriver driver, String\r\n    /// inputValue)\r\n    /// or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n    ///\r\n    /// * also it is possible to pass objects to a Custom Action adding a third\r\n    /// argument of type WebElement with name: cAElement\r\n    /// using web element: public ActionResult Execute(WebDriver driver, String\r\n    /// inputValue, WebElement caElement)\r\n    /// </param>\r\n    /// <returns>\r\n    /// The method returns an ActionResult object which is expected to contain\r\n    /// the step\r\n    /// execution information, such as the status (true or false equivalent to\r\n    /// pass or fail), details\r\n    /// that may explain the fail cause or some extra information and the path\r\n    /// to find the file resulting\r\n    /// of a screenshot.\r\n    /// </returns>\r\n    /// Also it is possible to save a String value to Datasheet.\r\n    /// e.g. 1:\r\n    /// actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n    /// actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n    /// e.g. 2:\r\n    /// actionResult.columnName = \"DatasheetColumnName\";\r\n    /// actionResult.propertyValue = \"Value to be saved\";\r\n    /// Or save several values to Datasheet.\r\n    /// actionResult.ColumnNames.add('DatasheetColumnName1');\r\n    /// actionResult.PropertyValues.add(Value to be saved1);\r\n    /// actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n    /// actionResult.PropertyValues.add(Value to be savedN);\r\n    // </This_lines_must_not_be_modified>\r\n    // <Mandatory_lines>\r\n    public ActionResult Execute(WebDriver driver, String inputValue) throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n\r\n    {\r\n        ActionResult actionResult = new ActionResult();\r\n        actionResult.status = false;\r\n        actionResult.comments = \"\";\r\n        // </Mandatory_lines>\r\n        /////////////// WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        try {\r\n            Thread.sleep(2000);\r\n            WebDriverWait wait = new WebDriverWait(driver, 20);\r\n            Actions actions = new Actions(driver);\r\n            WebElement sameAsAddressDropDown = driver.findElement(By.xpath(\r\n                    \"//*[contains(@id,'PolicyContactDetailsDV:LinkedAddressInputSet:LinkAddressMenu:LinkAddressMenuMenuIcon')]/img\"));\r\n            wait.until(ExpectedConditions.elementToBeClickable(sameAsAddressDropDown));\r\n            sameAsAddressDropDown.click();\r\n\r\n            WebElement insuredAddress = driver.findElement(\r\n                    By.xpath(\"//*[contains(@id,'LinkedAddressInputSet:LinkAddressMenu:0:contactDetail-textEl')]\"));\r\n            wait.until(ExpectedConditions.elementToBeClickable(insuredAddress));\r\n            actions.moveToElement(insuredAddress).build().perform();\r\n\r\n            WebElement linkAddress = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(\r\n                    By.xpath(\"//*[contains(@id,'LinkAddressMenu:0:contactDetail:PrimaryAddress-textEl')]\"))));\r\n            driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\r\n            wait.until(ExpectedConditions.elementToBeClickable(linkAddress));\r\n            actions.moveToElement(linkAddress).click().build().perform();\r\n            Thread.sleep(2000);\r\n\r\n            /*            for (int i = 1; i <= 5; i++) {\r\n                try {\r\n\r\n                    WebDriverWait wait = new WebDriverWait(driver, 20);\r\n                    WebElement sameAsAddressDropDown = driver.findElement(By.xpath(\r\n                            \"//*[contains(@id,'PolicyContactDetailsDV:LinkedAddressInputSet:LinkAddressMenu:LinkAddressMenuMenuIcon')]/img\"));\r\n                    wait.until(ExpectedConditions.elementToBeClickable(sameAsAddressDropDown));\r\n                    sameAsAddressDropDown.click();\r\n                    Thread.sleep(2000);\r\n\r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"Add Additional Interest has been successfully selected\";\r\n\r\n                    break;\r\n                } catch (Exception e) {\r\n                    // actionResult.comments =\"Max No. of Attepts reached : \" +i\r\n                    // + \" Expection Type : \" + e.getMessage();\r\n                    // actionResult.status = false;\r\n                }\r\n            }\r\n\r\n            for (int i = 1; i <= 5; i++) {\r\n                try {\r\n                    WebDriverWait wait = new WebDriverWait(driver, 20);\r\n                    WebElement insuredAddress = driver.findElement(By.xpath(\r\n                            \"//*[contains(@id,'LinkedAddressInputSet:LinkAddressMenu:0:contactDetail-textEl')]\"));\r\n                    actions.moveToElement(insuredAddress).build().perform();\r\n                    Thread.sleep(2000);\r\n\r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"New Additional Interest has been successfully selected\";\r\n\r\n                    break;\r\n                } catch (Exception e) {\r\n                    // actionResult.comments =\"Max No. of Attepts reached : \" +i\r\n                    // + \" Expection Type : \" + e.getMessage();\r\n                    // actionResult.status = false;\r\n                }\r\n            }\r\n\r\n            for (int i = 1; i <= 5; i++) {\r\n                try {\r\n                    WebDriverWait wait = new WebDriverWait(driver, 20);\r\n                    WebElement linkAddress = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(\r\n                            By.xpath(\"//*[contains(@id,'LinkAddressMenu:0:contactDetail:PrimaryAddress-textEl')]\"))));\r\n                    driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\r\n                    actions.moveToElement(linkAddress).click().build().perform();\r\n                    Thread.sleep(2000);\r\n\r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"New Additional Interest has been successfully selected\";\r\n\r\n                    break;\r\n                } catch (Exception e) {\r\n                    actionResult.comments = \"Max No. of Attepts reached : \" + i + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                }\r\n                       } */ \r\n\r\n            actionResult.comments = \"Address has been selected as same as insured\";\r\n            actionResult.status = true;\r\n\r\n        }\r\n\r\n        catch (Exception e) {\r\n            e.printStackTrace();\r\n            actionResult.comments = e.getMessage();\r\n            actionResult.status = false;\r\n        }\r\n\r\n        /////////////// WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n        // </Mandatory_lines>\r\n        // Return results in ActionResult object\r\n        return actionResult;\r\n    }\r\n}\r\n// </Mandatory_lines>\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectAddressSameAsInsured",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12191,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickOkBtn_AdditionalInterest extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\tfor(int retry=0; retry<=5; retry++)\n\t  {\n\t\ttry\n\t\t{\n\t\tWebElement okBtnEle;\n   \t\t\n\t\tdriver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\tThread.sleep(2000);\n\t\tokBtnEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//*[contains(@id,'NewAdditionalInterestPopup:ContactDetailScreen:Update-btnInnerEl')]\")));\n\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", okBtnEle);\n\t\tjs.executeScript(\"arguments[0].click();\",okBtnEle);\n\t\t\n\t\tactionResult.status = true;\n       \tactionResult.comments =  \"Clicked On OK button\";\n\t\tbreak;\t\n\t\t\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t  }\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOkBtn_AdditionalInterest",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9359,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 126812,
        "StepNumber": 1,
        "Description": "verifyDwellingConstructionScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12203,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126831,
        "StepNumber": 2,
        "Description": "ClickOnAutoFillButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12452,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126813,
        "StepNumber": 3,
        "Description": "ConstructionType",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Frame",
        "CustomActionId": 12204,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126814,
        "StepNumber": 4,
        "Description": "PrimaryHeating",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Electric",
        "CustomActionId": 12205,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126815,
        "StepNumber": 5,
        "Description": "SecondaryHeating",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Other",
        "CustomActionId": 12206,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126816,
        "StepNumber": 6,
        "Description": "UnitFloorNumber",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": 12207,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126828,
        "StepNumber": 7,
        "Description": "NoOfUnits",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "1",
        "CustomActionId": 12210,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126827,
        "StepNumber": 8,
        "Description": "RoofShapeSelection",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Flat",
        "CustomActionId": 12211,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126822,
        "StepNumber": 9,
        "Description": "HailResistantRoof",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": 12212,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126823,
        "StepNumber": 10,
        "Description": "select Roofing upgreaded ",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'roofUpgrade-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126824,
        "StepNumber": 11,
        "Description": "wat",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126825,
        "StepNumber": 12,
        "Description": "Enter roofing upgrade year",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'yearRoofUpgrade-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "2021",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126821,
        "StepNumber": 13,
        "Description": "YesOrNoRoofAgeVerified",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": 12213,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126820,
        "StepNumber": 14,
        "Description": "Navigate to Next Field",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 54,
        "ParameterName": null,
        "ParameterValue": "TAB+",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126826,
        "StepNumber": 15,
        "Description": "Click on yes for Roof age verified",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'roofAgeVerification_true-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 35,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126811,
        "StepNumber": 16,
        "Description": "ReplacementCostEstimator",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12208,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126838,
        "StepNumber": 17,
        "Description": "VerifyApproximate Square",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@name,'ApproxSqFoot')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126818,
        "StepNumber": 18,
        "Description": "Approximate Square",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@name,'ApproxSqFoot')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "100",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126845,
        "StepNumber": 19,
        "Description": "YearBuilt_txt",
        "LocatorTypeId": 7,
        "Locator": "//input[@id='SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:HODwellingConstructionHOEScreen:HODwellingConstructionDetailsHOEDV:rceCheck:YearBuilt-inputEl']",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": 10282,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126810,
        "StepNumber": 20,
        "Description": "YearBuilt_txt",
        "LocatorTypeId": 7,
        "Locator": "//input[@id='SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:HODwellingConstructionHOEScreen:HODwellingConstructionDetailsHOEDV:rceCheck:YearBuilt-inputEl']",
        "ActionId": 43,
        "ParameterName": "P_YearBuilt",
        "ParameterValue": "2021",
        "CustomActionId": null,
        "ObjectDictionaryId": 10282,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126832,
        "StepNumber": 21,
        "Description": "Roof Shape Selection",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'RoofShape_Acg-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126846,
        "StepNumber": 22,
        "Description": "RoofShapeSelection",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_RoofShape",
        "CustomActionId": 12211,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126854,
        "StepNumber": 23,
        "Description": "ReplacementCostEstimator",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12208,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126833,
        "StepNumber": 24,
        "Description": "No of units",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'NoOfUnits_Acg-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126847,
        "StepNumber": 25,
        "Description": "NoOfUnits",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_NoOfUnits",
        "CustomActionId": 12210,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126829,
        "StepNumber": 26,
        "Description": "verify Furnance",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'FurnaceAvailable_false-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126830,
        "StepNumber": 27,
        "Description": "Furnance No Cllick",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'FurnaceAvailable_true-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126843,
        "StepNumber": 28,
        "Description": "ClickOnBackButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12454,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126839,
        "StepNumber": 29,
        "Description": "WaitForPageLoad",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "2",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126840,
        "StepNumber": 30,
        "Description": "Verify Modern Cons Value",
        "LocatorTypeId": 7,
        "Locator": "//span[text()='Modern Construction Value']",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126848,
        "StepNumber": 31,
        "Description": "Modern Value Click No",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'modernCobnstructionValue_true-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": 10360,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126842,
        "StepNumber": 32,
        "Description": "Verify MCA Error Message",
        "LocatorTypeId": 7,
        "Locator": "//div[@class='message' and contains(text(),'Modern Construction Value')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126849,
        "StepNumber": 33,
        "Description": "ClickOnBackButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12454,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126841,
        "StepNumber": 34,
        "Description": "WaitForPageLoad",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "5",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126844,
        "StepNumber": 35,
        "Description": "Click MCA_YES",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'modernCobnstructionValue_true-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126837,
        "StepNumber": 36,
        "Description": "WaitForPageLoad",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126835,
        "StepNumber": 37,
        "Description": "VeiryRetreveBtn",
        "LocatorTypeId": 7,
        "Locator": "//*[text()='Retrieve Default RCE']",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126819,
        "StepNumber": 38,
        "Description": "Retrieve Default RCE",
        "LocatorTypeId": 7,
        "Locator": "//*[text()='Retrieve Default RCE']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126850,
        "StepNumber": 39,
        "Description": "WaitForPageLoad",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126836,
        "StepNumber": 40,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12444,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126834,
        "StepNumber": 41,
        "Description": "WaitForPageLoad",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "4",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126817,
        "StepNumber": 42,
        "Description": "Click on Next",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:Next-btnEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126851,
        "StepNumber": 43,
        "Description": "WaitForPageLoad",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126852,
        "StepNumber": 44,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12444,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126853,
        "StepNumber": 45,
        "Description": "WaitForPageLoad",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Dwelling_Construction_Home",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12203,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class verifyDwellingConstructionScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'HODwellingConstructionHOEScreen:ttlBar')]\")));\n\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'HODwellingConstructionHOEScreen:ttlBar')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Dwelling Construction\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Dwelling Construction' screen successfully\";\n\n\t\t}\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "verifyDwellingConstructionScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12204,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.StaleElementReferenceException;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ConstructionType extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       for(int i =1; i<=3; i++) {\r\n            \r\n            try {\r\n            WebDriverWait wait          = new WebDriverWait(driver, 20);\r\n            WebElement constructionType = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'ConstructionType-inputEl') or contains(@id,'ConstructionType_PKG-inputEl')]\"))));\r\n            \r\n            String s=Keys.chord(Keys.CONTROL,\"a\");\r\n            constructionType.sendKeys(s);\r\n            constructionType.sendKeys(Keys.DELETE);\r\n            constructionType.sendKeys(inputValue);\r\n            Thread.sleep(500);\r\n            //constructionType.sendKeys(Keys.ENTER);\r\n            constructionType.sendKeys(Keys.TAB);\r\n            Thread.sleep(2000);\r\n\r\n            actionResult.status = true;\r\n            actionResult.comments = \"Executed Successfully\"; \r\n            //System.out.println(\"excepted\");\r\n            break;\r\n\r\n            }\r\n            \r\n        catch(Exception e){\r\n\r\n            actionResult.status = true;\r\n              actionResult.comments =  e.getMessage();\r\n               \r\n          }}\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ConstructionType",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12205,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport org.openqa.selenium.StaleElementReferenceException;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class PrimaryHeating extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n    \r\nWebElement primaryHeatingValue = driver.findElement(By.xpath(\"//input[contains(@id,'PrimaryHeating-inputEl') and @value = 'Electric']\"));\r\n\r\nactionResult.status = true;\r\n    actionResult.comments = \"Primary Heating is already Present\"; \r\n    \r\n}\r\n\r\ncatch(Exception ex){\r\n    \r\ntry{\r\n\r\nWebElement primaryHeating=driver.findElement(By.xpath(\"//input[contains(@id,'PrimaryHeating-inputEl')]\"));\r\n    \r\n    String s=Keys.chord(Keys.CONTROL,\"a\");\r\n    primaryHeating.sendKeys(s);\r\n    primaryHeating.sendKeys(Keys.DELETE);\r\n       primaryHeating.sendKeys(inputValue);\r\n    Thread.sleep(500);\r\n    primaryHeating.sendKeys(Keys.ENTER);\r\n    primaryHeating.sendKeys(Keys.TAB);\r\n    Thread.sleep(2000);\r\n\r\n    actionResult.status = true;\r\n    actionResult.comments = \"Executed Successfully\"; \r\n\r\n\r\n}\r\ncatch(StaleElementReferenceException st) {\r\n\r\nWebElement primaryHeating=driver.findElement(By.xpath(\"//input[contains(@id,'PrimaryHeating-inputEl')]\"));\r\n    \r\n    String s=Keys.chord(Keys.CONTROL,\"a\");\r\n    primaryHeating.sendKeys(s);\r\n    primaryHeating.sendKeys(Keys.DELETE);\r\n       primaryHeating.sendKeys(inputValue);\r\n    Thread.sleep(500);\r\n    primaryHeating.sendKeys(Keys.ENTER);\r\n    primaryHeating.sendKeys(Keys.TAB);\r\n    Thread.sleep(2000);\r\n\r\n    actionResult.status = true;\r\n    actionResult.comments = \"Executed Successfully\"; \r\n\r\n            \r\n        }\r\ncatch(Exception e){\r\n\r\n    actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n}\r\n}\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PrimaryHeating",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12206,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport org.openqa.selenium.StaleElementReferenceException;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SecondaryHeating extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n     \r\n      for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        Thread.sleep(400);\r\n        \r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'SecondaryHeatingType-inputEl')]\")));\r\n        WebElement secHeating=driver.findElement(By.xpath(\"//input[contains(@id,'SecondaryHeatingType-inputEl')]\"));\r\n    \r\n        String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        secHeating.sendKeys(s);\r\n        secHeating.sendKeys(Keys.DELETE);\r\n        secHeating.sendKeys(inputValue);\r\n        Thread.sleep(500);\r\n        secHeating.sendKeys(Keys.ENTER);\r\n        secHeating.sendKeys(Keys.TAB);\r\n        Thread.sleep(2000);\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";  \r\n        \r\n        break;\r\n        }\r\n    catch(Exception e)\r\n    {\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n    }}\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SecondaryHeating",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12207,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class UnitFloorNumber extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\nWebElement unitFloor=driver.findElement(By.xpath(\"//input[contains(@id,'UnitFloor-inputEl') or contains(@id,'NoOfUnits_Acg-inputEl')]\"));\n\t\n\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\tunitFloor.sendKeys(s);\n\tunitFloor.sendKeys(Keys.DELETE);\n       unitFloor.sendKeys(inputValue);\n\tThread.sleep(500);\n\tunitFloor.sendKeys(Keys.ENTER);\n\tunitFloor.sendKeys(Keys.TAB);\n\tThread.sleep(1000);\n\n\tactionResult.status = true;\n\tactionResult.comments = \"Executed Successfully\"; \n\n\n}\ncatch(NoSuchElementException ea){\n\n\tactionResult.status = true;\n       actionResult.comments =  \"Element not applicable\";\n}\ncatch(Exception e){\n\n\tactionResult.status = false;\n       actionResult.comments =  e.getMessage();\n}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "UnitFloorNumber",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12210,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.StaleElementReferenceException;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class NoOfUnits extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n if(inputValue.equals(\"Label\")){\nactionResult.status = true;\n           actionResult.comments =  \"No of units is auto filled Bydefault \";\n\n}\nelse\n{\n\n  for(int retry=0; retry<3; retry++)\n\t  {\n\t\ttry\n\t\t{\n\t\t\n\t\tWebElement noOfUnits=driver.findElement(By.xpath(\"//input[contains(@id,'NoOfUnits_Acg-inputEl')]\"));\n\t\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tnoOfUnits.sendKeys(s);\n\t\tnoOfUnits.sendKeys(Keys.DELETE);\n\t\tnoOfUnits.sendKeys(inputValue);\n\t\tThread.sleep(500);\n\t\t//noOfUnits.sendKeys(Keys.ENTER);\n\t\tnoOfUnits.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";  \n\t\t\n\t\tbreak;\n\t\t}\n\t\t\n\tcatch(Exception e)\n\t{\n\t\tactionResult.status = true;\n       \tactionResult.comments =  e.getMessage();\n\t}\n}}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "NoOfUnits",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12211,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.StaleElementReferenceException;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class RoofShapeSelection extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n     if(inputValue.equals(\"Label\")){\nactionResult.status = true;\n           actionResult.comments =  \"No of units is auto filled Bydefault \";\n\n}\nelse\n{\n\n\ttry\n\t{\n\t  for(int retry=0; retry<5; retry++)\n\t  {\n\t\ttry\n\t\t{\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\tThread.sleep(400);\n\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'RoofShape_Acg-inputEl')]\")));\n\t\tWebElement roofShape=driver.findElement(By.xpath(\"//input[contains(@id,'RoofShape_Acg-inputEl')]\"));\n\t\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\troofShape.sendKeys(s);\n\t\troofShape.sendKeys(Keys.DELETE);\n\t\troofShape.sendKeys(inputValue);\n\t\tThread.sleep(500);\n\t\t//roofShape.sendKeys(Keys.ENTER);\n\t\troofShape.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";  \n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(StaleElementReferenceException e)\n\t\t{\n\t\t\tactionResult.comments =  e.getMessage();\n\t\t}\n\t  }\n\t}\n\t\n\tcatch(Exception e)\n\t{\n\t\tactionResult.status = false;\n       \tactionResult.comments =  e.getMessage();\n\t}}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "RoofShapeSelection",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12212,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\nimport java.util.*;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class HailResistantRoof extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\tWebElement HailResistance=driver.findElement(By.xpath(\"//label[text()='\"+inputValue+\"']/../input[contains(@id,'HailResistant')]\"));\nHailResistance.click();\n\t\t\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Hail Resistant Roof is selected as \"+inputValue; \n\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(NoSuchElementException ae) {\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Hail Resistant Roof is not applicable\";\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "HailResistantRoof",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12213,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesOrNoRoofAgeVerified extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry{\n\t\tWebElement roofverifiedYes=driver.findElement(By.xpath(\"//input[contains(@id,'roofAgeVerification_true-inputEl')]\"));\n\t\tWebElement roofverifiedNo=driver.findElement(By.xpath(\"//input[contains(@id,'roofAgeVerification_false-inputEl')]\"));\n\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\tJavascriptExecutor executor = (JavascriptExecutor)driver;\n\t\t\texecutor.executeScript(\"arguments[0].click();\", roofverifiedYes);\n\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Roof verified has been selected as : 'Yes'\";\n\t\t}\n\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", roofverifiedNo);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Roof verified has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString MsgDetails = e.getMessage();\n\t\t\tactionResult.status = false;\n           \t\tactionResult.comments =  \"Roof verified field is not available\"+MsgDetails;\n\t\t}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoRoofAgeVerified",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12208,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ReplacementCostEstimator extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ntry{\n\n\nWebElement RCETabElement;\nWebElement retrevieElement;\n\nRCETabElement= driver.findElement(By.xpath(\"//span[contains(@id,'JobWizardToolbarButtonSet:replacementCost-btnEl')]\"));\nActions act = new Actions(driver);\nact.moveToElement(RCETabElement).moveByOffset(40,0).click().build().perform();\n\nretrevieElement= driver.findElement(By.xpath(\"//span[contains(@id,'JobWizardToolbarButtonSet:replacementCost:retrieve-textEl')]\"));\nact.moveToElement(retrevieElement).moveByOffset(40,0).click().build().perform();\nThread.sleep(5000);\nactionResult.status = true;\nactionResult.comments = \"Executed Successfully\"; \n\n\n}\ncatch(Exception e){\n\nactionResult.status = false;\n           actionResult.comments =  e.getMessage();\n}\n\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ReplacementCostEstimator",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10282,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//input[@id='SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:HODwellingConstructionHOEScreen:HODwellingConstructionDetailsHOEDV:rceCheck:YearBuilt-inputEl']",
    "PageId": 1187,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YearBuilt_txt",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1187,
    "EntityName": "Page",
    "ProjectId": 99,
    "DictionaryPageType": 1,
    "Name": "Dwelling Construction",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12454,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException; \nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType; \nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickOnBackButton extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tActions act = new Actions(driver);\n\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t   \n\t\tfor(int i =1; i<=5; i++) \n\t\t{\t\t\n\t\ttry \n\t\t{\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'Prev-btnInnerEl')]\"))));\n\t\t\tWebElement backBtn = driver.findElement(By.xpath(\"//span[contains(@id,'Prev-btnInnerEl')]\"));\n\t\t\tjs.executeScript(\"arguments[0].setAttribute('style', 'border:2px solid red; background:yellow')\", backBtn);\n\t\t\tjs.executeScript(\"arguments[0].click();\",backBtn);\n\n\t\t\tThread.sleep(2500);\n\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Back button cicked successfully\";\n\t\t\tbreak;\n\t\t\n\t\t}\n\t\tcatch(Exception e) \n\t\t{\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t\t}\t\t\t\n\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnBackButton",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10360,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//input[contains(@id,'modernCobnstructionValue_true-inputEl')]",
    "PageId": null,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Modern Value Click No",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9426,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 128059,
        "StepNumber": 1,
        "Description": "VarifyPageText",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Reports",
        "CustomActionId": 12443,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128060,
        "StepNumber": 2,
        "Description": "InsuranceScoreOrdered",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No-Opt Out",
        "CustomActionId": 11846,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128115,
        "StepNumber": 3,
        "Description": "InsScoreOrderForPNIandSNI",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11861,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128057,
        "StepNumber": 4,
        "Description": "ClickOnInsuranceScoreButton",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'orderInsuranceScore')]",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 9970,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128107,
        "StepNumber": 5,
        "Description": "Click BypassInsuranceScore",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'OverrideInsuranceScoreReport-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128099,
        "StepNumber": 6,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128100,
        "StepNumber": 7,
        "Description": "Click checkbox AdjustedPremierLevel",
        "LocatorTypeId": 7,
        "Locator": "(//img[@class='x-grid-checkcolumn'])[1]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128114,
        "StepNumber": 8,
        "Description": "FL_ReportScreen_AdjustedAndUltimateCheckbox",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13634,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128121,
        "StepNumber": 9,
        "Description": "FL_ReportScreen_AdjustedCheckbox",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13641,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128101,
        "StepNumber": 10,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128102,
        "StepNumber": 11,
        "Description": "FL_ReportScreen_AdjustedPremierLevel",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13632,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128113,
        "StepNumber": 12,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128103,
        "StepNumber": 13,
        "Description": "Click checkbox UltimatePremierLevel",
        "LocatorTypeId": 7,
        "Locator": "(//img[@class='x-grid-checkcolumn'])[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128122,
        "StepNumber": 14,
        "Description": "FL_ReportScreen_UltimateCheckbox",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13642,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128104,
        "StepNumber": 15,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128105,
        "StepNumber": 16,
        "Description": "FL_ReportScreen_UltimatePremierLevel",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13633,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128106,
        "StepNumber": 17,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128123,
        "StepNumber": 18,
        "Description": "FL_ReportScreen_SNIAdjustedCheckbox",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13643,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128116,
        "StepNumber": 19,
        "Description": "WAit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128117,
        "StepNumber": 20,
        "Description": "FL_ReportScreen_SNIAdjustedPremier",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13639,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128124,
        "StepNumber": 21,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128125,
        "StepNumber": 22,
        "Description": "FL_ReportScreen_SNIUltimateCheckbox",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13644,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128118,
        "StepNumber": 23,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128119,
        "StepNumber": 24,
        "Description": "FL_ReportScreen_SNIUltimatePremier",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13640,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128120,
        "StepNumber": 25,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "10",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128072,
        "StepNumber": 26,
        "Description": "Click on losses and violations ",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'lossesAndViolationsCardTab-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128098,
        "StepNumber": 27,
        "Description": "LossesandViolationsTabOpened",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11849,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128073,
        "StepNumber": 28,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128074,
        "StepNumber": 29,
        "Description": "Click yes on losses",
        "LocatorTypeId": 7,
        "Locator": "(//input[@data-ref='inputEl']) [4]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128068,
        "StepNumber": 30,
        "Description": "Yes or No Violations",
        "LocatorTypeId": 7,
        "Locator": "//*[.='Driving violations?']//following:: input[1]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128108,
        "StepNumber": 31,
        "Description": "ClickOnBypassAutoLoss",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11864,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128109,
        "StepNumber": 32,
        "Description": "ClickOnByepassMVR",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11863,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128110,
        "StepNumber": 33,
        "Description": "Click on HomeLosses Tab",
        "LocatorTypeId": 7,
        "Locator": "//span[text()='Home Losses']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128111,
        "StepNumber": 34,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128112,
        "StepNumber": 35,
        "Description": "Click on BypassHomeLosses",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'HomeLossPanelSet:bypassHomeLoss-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128063,
        "StepNumber": 36,
        "Description": "YesOrNoHomeLosses",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "DT_YesOrNoHomeLosses",
        "ParameterValue": null,
        "CustomActionId": 11857,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128075,
        "StepNumber": 37,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128084,
        "StepNumber": 38,
        "Description": "Home Losses Yes",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'homeLosses_true-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128076,
        "StepNumber": 39,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128077,
        "StepNumber": 40,
        "Description": "Click on OrderRetriveLosses",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:Report_AcgScreen:Report_AcgPanelSet:InsuranceScoreCV:LossAndViolationPanelSet:autoLossPanel:autoLoss:orderAutoLH-btnInnerEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128078,
        "StepNumber": 41,
        "Description": "Click on None ",
        "LocatorTypeId": 7,
        "Locator": " //div[text()='<none>']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128086,
        "StepNumber": 42,
        "Description": "NameAssured_1",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13762,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128094,
        "StepNumber": 43,
        "Description": "Reports_FirstLossDate",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13772,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128095,
        "StepNumber": 44,
        "Description": "LossPeriod1",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13764,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128087,
        "StepNumber": 45,
        "Description": "CauseOfLoss_1",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13766,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128088,
        "StepNumber": 46,
        "Description": "TotalAmountPaid_1",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13770,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128089,
        "StepNumber": 47,
        "Description": "HomeLossLocation1",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13768,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128085,
        "StepNumber": 48,
        "Description": "Click Add",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'homeLossPanel:homeLoss:Add-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128090,
        "StepNumber": 49,
        "Description": "NameAssured_2",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13763,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128096,
        "StepNumber": 50,
        "Description": "Reports_SecondLossDate",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13773,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128097,
        "StepNumber": 51,
        "Description": "LossPeriod_2",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13765,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128091,
        "StepNumber": 52,
        "Description": "CauseOfLoss_2",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13767,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128092,
        "StepNumber": 53,
        "Description": "TotalAmountPaid_2",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13771,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128093,
        "StepNumber": 54,
        "Description": "HomeLossLocation_2",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13769,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128079,
        "StepNumber": 55,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128081,
        "StepNumber": 56,
        "Description": "Down & Enter Key",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 54,
        "ParameterName": null,
        "ParameterValue": "arrow_down+,Enter+",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128082,
        "StepNumber": 57,
        "Description": "Down Key",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 54,
        "ParameterName": null,
        "ParameterValue": "arrow_down+",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128083,
        "StepNumber": 58,
        "Description": "Enter Key",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 54,
        "ParameterName": null,
        "ParameterValue": "Enter+",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128080,
        "StepNumber": 59,
        "Description": "add user ",
        "LocatorTypeId": 3,
        "Locator": "ext-element-2103",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128064,
        "StepNumber": 60,
        "Description": "Verify Losses Needs to Added",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'homeLoss:Add-btnInnerEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128065,
        "StepNumber": 61,
        "Description": "ClickOnOrderRetrieveHomeLossHistory_Home",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11854,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128066,
        "StepNumber": 62,
        "Description": "AddHomeLosses",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11858,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128067,
        "StepNumber": 63,
        "Description": "ClickOnHomeLossHistoryReportTab",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11859,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128069,
        "StepNumber": 64,
        "Description": "AddDrivingViolations_MI",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12758,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128070,
        "StepNumber": 65,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128071,
        "StepNumber": 66,
        "Description": "AddDrivingViolations",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12754,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128061,
        "StepNumber": 67,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128058,
        "StepNumber": 68,
        "Description": "ClickOnNextBtnOnReportsPage",
        "LocatorTypeId": 7,
        "Locator": "//a[@id='SubmissionWizard:Next']",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 9972,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128062,
        "StepNumber": 69,
        "Description": "ClickOnNextBtnAndVerifyCoveragePage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11860,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Reports",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11846,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class InsuranceScoreOrdered extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n      \r\n      try {\r\n\r\n            JavascriptExecutor js = (JavascriptExecutor) driver;\r\n            boolean status = false;\r\n            for (int i = 0; i <= 120; i++) {\r\n                status = Boolean.valueOf((boolean) js.executeScript(\"return Ext.Ajax.isLoading();\"));\r\n                System.out.println(status);\r\n                try {\r\n                    Thread.sleep(500);\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                if (!status) {\r\n\r\n                    break;\r\n                }\r\n            }\r\n            actionResult.status = true;\r\n            actionResult.comments = \"Wait Processed\";\r\n\r\n        } catch (Exception e) {\r\n            actionResult.comments =e.getMessage();\r\n        }\r\n      \r\n       for(int i =1; i<=5; i++) \r\n         {       \r\n        try \r\n        {   \r\n         \r\n        WebDriverWait wait    = new WebDriverWait(driver,25);\r\n        actionResult.comments = \"start\";\r\n        wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//input[contains(@id,'ScoreType')]\")));\r\n        WebElement insuranceScoreOrderEle = driver.findElement(By.xpath(\"//input[contains(@id,'ScoreType')]\"));\r\n       \r\n        JavascriptExecutor js             = (JavascriptExecutor)driver;\r\n        \r\n        Thread.sleep(5000);\r\n        \r\n        String insuranceScoreOrderValue = driver.findElement(By.xpath(\"//input[contains(@id,'ScoreType')]\")).getAttribute(\"value\");\r\n        actionResult.comments           = insuranceScoreOrderValue;\r\n        /*  if(insuranceScoreOrderValue.equals(\"Manual Entry\")){\r\n        WebElement primerIndicator = driver.findElement(By.xpath(\"//*[contains(@id,'PremierIndicator-inputEl')]\"));\r\n        WebElement primerLevel     = driver.findElement(By.xpath(\"//*[contains(@id,'PremierLevel2-inputEl')]\"));\r\n        \r\n        js.executeScript(\"arguments[0].click()\",primerIndicator);\r\n        primerIndicator.sendKeys(\"Above Average\");\r\n        Thread.sleep(500);\r\n        primerIndicator.sendKeys(Keys.ENTER);\r\n         actionResult.status   = true;\r\n         // actionResult.comments = \"Primer indicator selected\";\r\n     \r\n        \r\n        js.executeScript(\"arguments[0].click()\",primerLevel);\r\n        primerLevel.sendKeys(\"P6\");\r\n        Thread.sleep(500);\r\n        primerLevel.sendKeys(Keys.ENTER);\r\n        actionResult.status   = true;\r\n        //actionResult.comments = \"Primer lavel selected\";\r\n        \r\n    }*/\r\n    if(insuranceScoreOrderValue.equals(\"Yes-Order/Retrieve\")){\r\n    WebElement orderRetrieveButton = driver.findElement(By.xpath(\"//*[contains(@id,'orderInsuranceScore')]\"));\r\n        js.executeScript(\"arguments[0].click()\",orderRetrieveButton);\r\n        Thread.sleep(4000);\r\n        actionResult.status   = true;\r\n       try{\r\n            driver.findElement(By.xpath(\"//input[contains(@id,'ScoreType')]\"));\r\n            js.executeScript(\"arguments[0].click()\",orderRetrieveButton);\r\n            Thread.sleep(4000);\r\n            }catch(Exception exc) {\r\n                actionResult.comments = exc.getMessage();\r\n            }\r\n        \r\n    }\r\n        \r\n   \r\n   else{      \r\n     js.executeScript(\"arguments[0].click()\",insuranceScoreOrderEle);\r\n        //insuranceScoreOrderEle.click();\r\n         insuranceScoreOrderEle.sendKeys(inputValue);\r\n          Thread.sleep(500);\r\n           insuranceScoreOrderEle.sendKeys(Keys.ENTER);\r\n         actionResult.status   = true;\r\n           actionResult.comments = \"The Insurance Score Order has been selected as:\"+inputValue; \r\n       }\r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "InsuranceScoreOrdered",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11861,
    "Description": "Ordering the Insurance Score for both the Named Insured persons (PNI and SNI).",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class InsScoreOrderForPNIandSNI extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    \r\nfor(int i =1; i<=5; i++) \r\n{  \r\ntry{        \r\n        WebDriverWait wait = new WebDriverWait(driver,25);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"(//input[contains(@id,'ScoreType')])[1]\")));\r\n        WebElement insuranceScoreOrderEle = driver.findElement(By.xpath(\"(//input[contains(@id,'ScoreType')])[1]\"));\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;     \r\n         String insuranceScoreOrderValue = driver.findElement(By.xpath(\"(//input[contains(@id,'ScoreType')])[1]\")).getAttribute(\"value\");\r\n         actionResult.comments           = insuranceScoreOrderValue;\r\n            if(insuranceScoreOrderValue.equals(\"Yes-Order/Retrieve\")){\r\n                WebElement orderRetrieveButton = driver.findElement(By.xpath(\"(//*[contains(@id,'orderInsuranceScore')])[1]\"));\r\n                js.executeScript(\"arguments[0].click()\",orderRetrieveButton);\r\n                Thread.sleep(10000);\r\n                actionResult.status = true;\r\n                try{\r\n                    driver.findElement(By.xpath(\"//input[contains(@id,':ScoreType')]\"));\r\n                    js.executeScript(\"arguments[0].click()\",orderRetrieveButton);\r\n                    Thread.sleep(4000);\r\n                    }catch(Exception exc) {\r\n                        actionResult.comments = exc.getMessage();\r\n                    }\r\n        \r\n                }\r\n                else{      \r\n                    js.executeScript(\"arguments[0].click()\",insuranceScoreOrderEle);\r\n                 //insuranceScoreOrderEle.click();\r\n                 insuranceScoreOrderEle.sendKeys(inputValue);\r\n                 Thread.sleep(500);\r\n                 insuranceScoreOrderEle.sendKeys(Keys.ENTER);\r\n                 actionResult.status   = true;\r\n                 actionResult.comments = \"The Insurance Score Order has been selected as:\"+inputValue; \r\n             }\r\n             WebElement insuranceSecondScoreOrderEle = driver.findElement(By.xpath(\"//input[contains(@id,'SecondScoreType')]\"));\r\n             String insuranceScoreOrderValue2        = driver.findElement(By.xpath(\"//input[contains(@id,'SecondScoreType')]\")).getAttribute(\"value\");\r\n             actionResult.comments                   = insuranceScoreOrderValue2;\r\n             if(insuranceScoreOrderValue2.equals(\"Yes-Order/Retrieve\")){\r\n             WebElement orderRetrieveButton = driver.findElement(By.xpath(\"(//*[contains(@id,'orderInsuranceScore')])[2]\"));\r\n             js.executeScript(\"arguments[0].click()\",orderRetrieveButton);\r\n             Thread.sleep(10000);\r\n             actionResult.status = true;\r\n             try{\r\n                 driver.findElement(By.xpath(\"//input[contains(@id,'SecondScoreType')]\"));\r\n                 js.executeScript(\"arguments[0].click()\",orderRetrieveButton);\r\n                 Thread.sleep(4000);\r\n                 }catch(Exception exc) {\r\n                     actionResult.comments = exc.getMessage();\r\n                 }\r\n                 \r\n             }\r\n             else{      \r\n                 js.executeScript(\"arguments[0].click()\",insuranceSecondScoreOrderEle);\r\n                 //insuranceSecondScoreOrderEle.click();\r\n                 insuranceSecondScoreOrderEle.sendKeys(inputValue);\r\n                 Thread.sleep(500);\r\n                 insuranceSecondScoreOrderEle.sendKeys(Keys.ENTER);\r\n                 actionResult.status   = true;\r\n                 actionResult.comments = \"The Insurance Score Order has been selected as:\"+inputValue; \r\n            }\r\n        break;\r\n      }\r\n   \r\n      catch(Exception e){\r\n          String exceptionDetails = e.getMessage();\r\n          actionResult.status     = false;\r\n          actionResult.comments   = \"'The Insurance Score Order' field is not available in 'Reports screen'\"+exceptionDetails;\r\n      }\r\n  }\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "InsScoreOrderForPNIandSNI",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9970,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//a[contains(@id,'orderInsuranceScore')]",
    "PageId": 1152,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnInsuranceScoreButton",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1152,
    "EntityName": "Page",
    "ProjectId": 99,
    "DictionaryPageType": 1,
    "Name": "Reports",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13634,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class FL_ReportScreen_AdjustedAndUltimateCheckbox extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n       // for(int i =1; i<=5; i++) \r\n       //{       \r\n           //  try \r\n           //  {   \r\n                \r\n            //WebElement PlanandDiscountTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'lossesAndViolationsCardTab')]\"));\r\n            //     WebElement checkbox = driver.findElement(By.xpath(\"(//img[contains(@class,'x-grid-checkcolumn')])[1]\"));\r\n            // checkbox.click();\r\n            /* Thread.sleep(3000);\r\n         \r\n            // WebElement checkboxone = driver.findElement(By.xpath(\"(//img[contains(@class,'x-grid-checkcolumn')])[2]\"));\r\n            //  checkboxone.click();\r\n            //   Thread.sleep(3000);\r\n       \r\n            // actionResult.status   = true;\r\n            // actionResult.comments = \"User able to click checkbox for Adjusted and Ultimate Premier Level\";\r\n        \r\n\r\n        //  }\r\n        //  catch(Exception e) {\r\n            //  actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n            //  actionResult.status = false;\r\n    //  }\r\n    } */  \r\n\r\n\r\n        try{\r\n        \r\n        WebDriverWait wait    = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebElement checkbox   = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"(//img[contains(@class,'x-grid-checkcolumn')])[1]\"))));\r\n        js.executeScript(\"arguments[0].click();\", checkbox);\r\n        Thread.sleep(3000);\r\n        \r\n        WebElement checkboxone = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"(//img[contains(@class,'x-grid-checkcolumn')])[2]\"))));\r\n        js.executeScript(\"arguments[0].click();\", checkboxone);\r\n        \r\n        actionResult.status = true;\r\n            actionResult.comments =  \"User able to click checkbox for Adjusted and Ultimate Premier Level\";\r\n        }\r\n        catch(Exception e){\r\n           actionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n        }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "FL_ReportScreen_AdjustedAndUltimateCheckbox",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13641,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class FL_ReportScreen_AdjustedCheckbox extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        try{\r\n        \r\n        WebDriverWait wait    = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebElement Adjusted   = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"(//img[contains(@class,'x-grid-checkcolumn')])[1]\"))));\r\n        \r\n        js.executeScript(\"arguments[0].click();\", Adjusted);\r\n        actionResult.status = true;\r\n            actionResult.comments =  \"Executed successfully\";\r\n        }\r\n        catch(Exception e){\r\n           actionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n        }\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "FL_ReportScreen_AdjustedCheckbox",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13632,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.*;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class FL_ReportScreen_AdjustedPremierLevel extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n     for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        Thread.sleep(400);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"(//td[@tabindex='-1']//div[contains(@style,'text-align:left;text-align')])[6]\")));\r\n        WebElement SelectOption = driver.findElement(By.xpath(\"(//td[@tabindex='-1']//div[contains(@style,'text-align:left;text-align')])[6]\"));\r\n        SelectOption.click();\r\n\r\n        WebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\r\n        typeinput.click();\r\n        Thread.sleep(2000);\r\n\r\n        /*String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        interestType.sendKeys(s);\r\n        interestType.sendKeys(Keys.DELETE);\r\n        interestType.sendKeys(inputValue);\r\n        Thread.sleep(500);\r\n        interestType.sendKeys(Keys.ENTER);\r\n        interestType.sendKeys(Keys.TAB);*/\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";  \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n     }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "FL_ReportScreen_AdjustedPremierLevel",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13642,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class FL_ReportScreen_UltimateCheckbox extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        try{\r\n        \r\n        WebDriverWait wait    = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebElement Ultimate   = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"(//img[contains(@class,'x-grid-checkcolumn')])[2]\"))));\r\n        \r\n        js.executeScript(\"arguments[0].click();\", Ultimate);\r\n        actionResult.status = true;\r\n            actionResult.comments =  \"Executed successfully\";\r\n        }\r\n        catch(Exception e){\r\n           actionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n        }\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "FL_ReportScreen_UltimateCheckbox",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13633,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.*;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class FL_ReportScreen_UltimatePremierLevel extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        Thread.sleep(400);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"(//td[@tabindex='-1']//div[contains(text(),'B0')])[1]\")));\r\n        WebElement SelectOption = driver.findElement(By.xpath(\"(//td[@tabindex='-1']//div[contains(text(),'B0')])[1]\"));\r\n        SelectOption.click();\r\n\r\n        WebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\r\n        typeinput.click();\r\n        Thread.sleep(2000);\r\n\r\n        /*String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        interestType.sendKeys(s);\r\n        interestType.sendKeys(Keys.DELETE);\r\n        interestType.sendKeys(inputValue);\r\n        Thread.sleep(500);\r\n        interestType.sendKeys(Keys.ENTER);\r\n        interestType.sendKeys(Keys.TAB);*/\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";  \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n     }\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "FL_ReportScreen_UltimatePremierLevel",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13643,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class FL_ReportScreen_SNIAdjustedCheckbox extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        try{\r\n        \r\n        WebDriverWait wait     = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js  = (JavascriptExecutor)driver;\r\n        WebElement SNIAdjusted = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"(//img[contains(@class,'x-grid-checkcolumn')])[3]\"))));\r\n        \r\n        js.executeScript(\"arguments[0].click();\", SNIAdjusted);\r\n        actionResult.status = true;\r\n            actionResult.comments =  \"Executed successfully\";\r\n        }\r\n        catch(Exception e){\r\n           actionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n        }\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "FL_ReportScreen_SNIAdjustedCheckbox",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13639,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class FL_ReportScreen_SNIAdjustedPremier extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        Thread.sleep(400);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"(//td[@tabindex='-1']//div[contains(@style,'text-align:left;text-align')])[17]\")));\r\n        WebElement SelectOption = driver.findElement(By.xpath(\"(//td[@tabindex='-1']//div[contains(@style,'text-align:left;text-align')])[17]\"));\r\n        SelectOption.click();\r\n\r\n        WebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\r\n        typeinput.click();\r\n        Thread.sleep(2000);\r\n\r\n        /*String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        interestType.sendKeys(s);\r\n        interestType.sendKeys(Keys.DELETE);\r\n        interestType.sendKeys(inputValue);\r\n        Thread.sleep(500);\r\n        interestType.sendKeys(Keys.ENTER);\r\n        interestType.sendKeys(Keys.TAB);*/\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";  \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n      }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "FL_ReportScreen_SNIAdjustedPremier",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13644,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class FL_ReportScreen_SNIUltimateCheckbox extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        try{\r\n        \r\n        WebDriverWait wait     = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js  = (JavascriptExecutor)driver;\r\n        WebElement SNIUltimate = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"(//img[contains(@class,'x-grid-checkcolumn')])[4]\"))));\r\n        \r\n        js.executeScript(\"arguments[0].click();\", SNIUltimate);\r\n        actionResult.status = true;\r\n            actionResult.comments =  \"Executed successfully\";\r\n        }\r\n        catch(Exception e){\r\n           actionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n        }\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "FL_ReportScreen_SNIUltimateCheckbox",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13640,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class FL_ReportScreen_SNIUltimatePremier extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        Thread.sleep(400);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"(//td[@tabindex='-1']//div[contains(@style,'text-align:left;text-align')])[18]\")));\r\n        WebElement SelectOption = driver.findElement(By.xpath(\"(//td[@tabindex='-1']//div[contains(@style,'text-align:left;text-align')])[18]\"));\r\n        SelectOption.click();\r\n\r\n        WebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\r\n        typeinput.click();\r\n        Thread.sleep(2000);\r\n\r\n        /*String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        interestType.sendKeys(s);\r\n        interestType.sendKeys(Keys.DELETE);\r\n        interestType.sendKeys(inputValue);\r\n        Thread.sleep(500);\r\n        interestType.sendKeys(Keys.ENTER);\r\n        interestType.sendKeys(Keys.TAB);*/\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";  \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n      }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "FL_ReportScreen_SNIUltimatePremier",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11849,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class LossesandViolationsTabOpened extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\t//WebElement PlanandDiscountTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'lossesAndViolationsCardTab')]\"));\n\t\tdriver.findElement(By.xpath(\"//a[contains(@id,'lossesAndViolationsCardTab')]\")).click();\n\t\tThread.sleep(3000);\n\t\tString getLossesAndViolationsTabIndex = driver.findElement(By.xpath(\"//a[contains(@id,'lossesAndViolationsCardTab')]\")).getAttribute(\"tabindex\");\n\t\tif(getLossesAndViolationsTabIndex.equals(\"0\")){\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"User is on 'Losses And Violations Tab'\";\n\t\t}\n\t\telse{\n           \t\tactionResult.status = false;\n\t\t\tactionResult.comments =  \" ''Losses And Violations Tab' is not opened\";\n\t\t}\n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "LossesandViolationsTabOpened",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11864,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickOnBypassAutoLoss extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\ttry{\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,50);\n\t\tJavascriptExecutor js=(JavascriptExecutor)driver;\n\t\tWebElement byepass = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'bypassAutoLoss-inputEl')]\"))));\n\t\t\n\t\tjs.executeScript(\"arguments[0].click();\", byepass);\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Executed successfully\";\n\t\t}\n\t\tcatch(Exception e){\n           actionResult.status = false;\n           actionResult.comments =  e.getMessage();\n\t\t}\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnBypassAutoLoss",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11863,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickOnByepassMVR extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n   \r\n for(int i =1; i<=5; i++) \r\n   {   \r\n       \r\n    try{\r\n        \r\n        WebDriverWait wait    = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebElement byepassMvr = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'bypassMVR-inputEl')]\"))));\r\n        \r\n        js.executeScript(\"arguments[0].click();\", byepassMvr);\r\n        actionResult.status   = true;\r\n        actionResult.comments = \"Executed successfully\";\r\n        break;\r\n    }\r\n    catch(Exception e){\r\n           actionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n    }\r\n\r\n   }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnByepassMVR",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11857,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesOrNoHomeLosses extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n    \r\n        WebDriverWait wait = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebElement lossesTab = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'btnInnerEl') and contains(text(),'Losses')]\"))));\r\n    \r\n        //lossesTab.click();\r\n        js.executeScript(\"arguments[0].style.border='2px solid red'\", lossesTab);\r\n        js.executeScript(\"arguments[0].click();\",lossesTab);\r\n                Thread.sleep(1000);\r\n        WebElement homeLossesYes = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'homeLosses_true-inputEl')]\"))));\r\n        WebElement homeLossesNo = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'homeLosses_false-inputEl')]\"))));\r\n        \r\n    \r\n        if(inputValue.equalsIgnoreCase(\"Yes\"))\r\n        {\r\n            if(homeLossesYes.getAttribute(\"tabindex\").equals(\"0\"))\r\n            {\r\n            homeLossesYes.click();\r\n                actionResult.status = true;\r\n                actionResult.comments =  \" 'homeLossesYes' has been selected as : 'Yes'\";\r\n            }\r\n            else{\r\n            actionResult.status = true;\r\n                actionResult.comments =  \" 'homeLossesNo' has been selected as : 'Yes'\";\r\n            }\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\"))\r\n        {\r\n            if(homeLossesNo.getAttribute(\"tabindex\").equals(\"0\"))\r\n            {\r\n            homeLossesNo.click();\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'homeLossesNo' has been selected as : 'No'\";\r\n            }\r\n            else{\r\n            actionResult.status = true;\r\n                actionResult.comments =  \"'homeLossesYes' has been selected as : 'No'\";\r\n            }\r\n        }\r\n        \r\n        }\r\n        catch(Exception e){\r\n            String MsgDetails = e.getMessage();\r\n            actionResult.status = false;\r\n                actionResult.comments =  \"'homeLossesNo' field is not available in Losses \"+MsgDetails;\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoHomeLosses",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13762,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class NameAssured_1 extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        Thread.sleep(400);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[1]/descendant::td[2]/div\")));\r\n        WebElement SelectOption = driver.findElement(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[1]/descendant::td[2]/div\"));\r\n        SelectOption.click();\r\n\r\n        WebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\r\n        typeinput.click();\r\n        Thread.sleep(2000);\r\n\r\n        /*String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        interestType.sendKeys(s);\r\n        interestType.sendKeys(Keys.DELETE);\r\n        interestType.sendKeys(inputValue);\r\n        Thread.sleep(500);\r\n        interestType.sendKeys(Keys.ENTER);\r\n        interestType.sendKeys(Keys.TAB);*/\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";  \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n      }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "NameAssured_1",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13772,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.Calendar;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Reports_FirstLossDate extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n \r\n       for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {  \r\n          \r\n            driver.manage().timeouts().implicitlyWait(120, TimeUnit.SECONDS);\r\n            WebDriverWait wait = new WebDriverWait(driver,40);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act = new Actions(driver);\r\n            String selectText=Keys.chord(Keys.CONTROL,\"a\"); \r\n         \r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        \r\n        String settingText            = settingContents.getText();\r\n        System.out.println(settingText);\r\n        int dateTimeIndex             = settingText.indexOf(\"Date/Time:\");\r\n        String dateTime               = settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat   = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        \r\n        // String[] date = effectiveDate.split(\"/\");\r\n        //   effectiveDate = date[1].toString();\r\n        //      int days = Integer.parseInt(effectiveDate);\r\n        //    int reqDays = days-8;\r\n        //    System.out.println(reqDays);\r\n        //    if(reqDays<0) {\r\n            //           reqDays = Math.abs(reqDays);\r\n            //       System.out.println(reqDays);\r\n                     \r\n        // }\r\n        //    String targetDay =  Integer.toString(reqDays);\r\n        //    targetDay = date[1].replace(effectiveDate, targetDay).toString();\r\n        //    String backDatedDate = date[0].toString()+\"/\"+targetDay+\"/\"+date[2].toString();\r\n        //    System.out.println(backDatedDate);\r\n        \r\n        //SimpleDateFormat date1=new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(targetFormat.parse(effectiveDate));\r\n        c.add(Calendar.YEAR, -1);  // number of days to subtract\r\n        String backDatedDate = targetFormat.format(c.getTime());\r\n\r\n        System.out.println(backDatedDate);\r\n        //driver.findElement(By.xpath(\"//span[text()='Loss Date']//following::td[3]\")).sendKeys(backDatedDate);\r\n        \r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[text()='Loss Date']//following::td[3]\"))));\r\n        WebElement lossDate = driver.findElement(By.xpath(\"//span[text()='Loss Date']//following::td[3]//div\"));\r\n        js.executeScript(\"arguments[0].style.border='2px solid red'\", lossDate);            \r\n        Thread.sleep(1000);\r\n        js.executeScript(\"arguments[0].click();\",lossDate);\r\n        //js.executeScript(\"arguments[0].value='\"+backDatedDate+\"'\",lossDate);\r\n        Thread.sleep(2000);\r\n        act.moveToElement(lossDate).sendKeys(backDatedDate).build().perform();\r\n        act.moveToElement(lossDate).sendKeys(Keys.TAB).build().perform();\r\n        Thread.sleep(2000); \r\n         \r\n        actionResult.status   = true;\r\n        actionResult.comments = \"effective date entered\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n          e.printStackTrace();\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Reports_FirstLossDate",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13764,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class LossPeriod1 extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        Thread.sleep(400);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[1]/descendant::td[4]/div\")));\r\n        WebElement SelectOption = driver.findElement(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[1]/descendant::td[4]/div\"));\r\n        SelectOption.click();\r\n\r\n        WebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\r\n        typeinput.click();\r\n        Thread.sleep(2000);\r\n\r\n        /*String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        interestType.sendKeys(s);\r\n        interestType.sendKeys(Keys.DELETE);\r\n        interestType.sendKeys(inputValue);\r\n        Thread.sleep(500);\r\n        interestType.sendKeys(Keys.ENTER);\r\n        interestType.sendKeys(Keys.TAB);*/\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";  \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n      }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "LossPeriod1",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13766,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class CauseOfLoss_1 extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        Thread.sleep(400);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[1]/descendant::td[5]/div\")));\r\n        WebElement SelectOption = driver.findElement(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[1]/descendant::td[5]/div\"));\r\n        SelectOption.click();\r\n\r\n        WebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\r\n        typeinput.click();\r\n        Thread.sleep(2000);\r\n\r\n        /*String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        interestType.sendKeys(s);\r\n        interestType.sendKeys(Keys.DELETE);\r\n        interestType.sendKeys(inputValue);\r\n        Thread.sleep(500);\r\n        interestType.sendKeys(Keys.ENTER);\r\n        interestType.sendKeys(Keys.TAB);*/\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";  \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n      }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "CauseOfLoss_1",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13770,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.lang.String;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class TotalAmountPaid_1 extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {\r\n\r\n        \r\n\r\n        WebDriverWait wait = new WebDriverWait(driver,30);\r\n            JavascriptExecutor js = (JavascriptExecutor) driver;\r\n            Actions act           = new Actions(driver);\r\n            WebElement targetacc2 = driver.findElement(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[1]/descendant::td[8]/div\"));\r\n            targetacc2.click();\r\n            Thread.sleep(2000);\r\n            act.moveToElement(targetacc2).click().sendKeys(actionResult.getDTParameter(\"DT_TotalAmountPaid\")).build().perform();\r\n            Thread.sleep(2000);\r\n            act.moveToElement(targetacc2).sendKeys(Keys.TAB).build().perform();\r\n            Thread.sleep(2000);\r\n\r\n  \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Entered The Lose Location Value\";\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "TotalAmountPaid_1",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13768,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.lang.String;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class HomeLossLocation1 extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {\r\n\r\n        \r\n\r\n        WebDriverWait wait = new WebDriverWait(driver,30);\r\n            JavascriptExecutor js = (JavascriptExecutor) driver;\r\n            Actions act           = new Actions(driver);\r\n            WebElement targetacc2 = driver.findElement(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[1]/descendant::td[12]/div\"));\r\n        act.moveToElement(targetacc2).click().sendKeys(actionResult.getDTParameter(\"DT_LoseLocation\")).build().perform();\r\n            act.moveToElement(targetacc2).sendKeys(Keys.TAB).build().perform();\r\n            Thread.sleep(2000);\r\n\r\n  \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Entered The Lose Location Value\";\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "HomeLossLocation1",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13763,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class NameAssured_2 extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        Thread.sleep(400);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[2]/descendant::td[3]/div\")));\r\n        WebElement SelectOption = driver.findElement(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[2]/descendant::td[3]/div\"));\r\n        SelectOption.click();\r\n\r\n        WebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\r\n        typeinput.click();\r\n        Thread.sleep(2000);\r\n\r\n        /*String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        interestType.sendKeys(s);\r\n        interestType.sendKeys(Keys.DELETE);\r\n        interestType.sendKeys(inputValue);\r\n        Thread.sleep(500);\r\n        interestType.sendKeys(Keys.ENTER);\r\n        interestType.sendKeys(Keys.TAB);*/\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";  \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n      }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "NameAssured_2",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13773,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.Calendar;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Reports_SecondLossDate extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n \r\n       for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {  \r\n          \r\n            driver.manage().timeouts().implicitlyWait(120, TimeUnit.SECONDS);\r\n            WebDriverWait wait = new WebDriverWait(driver,40);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act = new Actions(driver);\r\n            String selectText=Keys.chord(Keys.CONTROL,\"a\"); \r\n         \r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        \r\n        String settingText            = settingContents.getText();\r\n        System.out.println(settingText);\r\n        int dateTimeIndex             = settingText.indexOf(\"Date/Time:\");\r\n        String dateTime               = settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat   = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        \r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(targetFormat.parse(effectiveDate));\r\n        c.add(Calendar.YEAR, -2);  // number of days to subtract\r\n        String backDatedDate = targetFormat.format(c.getTime());\r\n\r\n        System.out.println(backDatedDate);\r\n        \r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[text()='Loss Date']//following::td[3]\"))));\r\n        WebElement lossDate = driver.findElement(By.xpath(\"//span[text()='Loss Date']//following::td[16]//div\"));\r\n        js.executeScript(\"arguments[0].style.border='2px solid red'\", lossDate);            \r\n        Thread.sleep(1000);\r\n        js.executeScript(\"arguments[0].click();\",lossDate);\r\n        //js.executeScript(\"arguments[0].value='\"+backDatedDate+\"'\",lossDate);\r\n        Thread.sleep(2000);\r\n        act.moveToElement(lossDate).sendKeys(backDatedDate).build().perform();\r\n        act.moveToElement(lossDate).sendKeys(Keys.TAB).build().perform();\r\n        Thread.sleep(2000); \r\n         \r\n        actionResult.status   = true;\r\n        actionResult.comments = \"effective date entered\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n          e.printStackTrace();\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Reports_SecondLossDate",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13765,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class LossPeriod_2 extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        Thread.sleep(400);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[2]/descendant::td[4]/div\")));\r\n        WebElement SelectOption = driver.findElement(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[2]/descendant::td[4]/div\"));\r\n        SelectOption.click();\r\n\r\n        WebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\r\n        typeinput.click();\r\n        Thread.sleep(2000);\r\n\r\n        /*String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        interestType.sendKeys(s);\r\n        interestType.sendKeys(Keys.DELETE);\r\n        interestType.sendKeys(inputValue);\r\n        Thread.sleep(500);\r\n        interestType.sendKeys(Keys.ENTER);\r\n        interestType.sendKeys(Keys.TAB);*/\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";  \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n      }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "LossPeriod_2",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13767,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class CauseOfLoss_2 extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        Thread.sleep(400);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[2]/descendant::td[5]/div\")));\r\n        WebElement SelectOption = driver.findElement(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[2]/descendant::td[5]/div\"));\r\n        SelectOption.click();\r\n\r\n        WebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\r\n        typeinput.click();\r\n        Thread.sleep(2000);\r\n\r\n        /*String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        interestType.sendKeys(s);\r\n        interestType.sendKeys(Keys.DELETE);\r\n        interestType.sendKeys(inputValue);\r\n        Thread.sleep(500);\r\n        interestType.sendKeys(Keys.ENTER);\r\n        interestType.sendKeys(Keys.TAB);*/\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";  \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n      }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "CauseOfLoss_2",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13771,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.lang.String;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class TotalAmountPaid_2 extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {\r\n\r\n        \r\n\r\n        WebDriverWait wait = new WebDriverWait(driver,30);\r\n            JavascriptExecutor js = (JavascriptExecutor) driver;\r\n            Actions act           = new Actions(driver);\r\n            WebElement targetacc2 = driver.findElement(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[2]/descendant::td[8]/div\"));\r\n            targetacc2.click();\r\n            Thread.sleep(2000);\r\n            act.moveToElement(targetacc2).click().sendKeys(actionResult.getDTParameter(\"DT_TotalAmountPaid\")).build().perform();\r\n            Thread.sleep(2000);\r\n            act.moveToElement(targetacc2).sendKeys(Keys.TAB).build().perform();\r\n            Thread.sleep(2000);\r\n\r\n  \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Entered The Lose Location Value\";\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    } \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "TotalAmountPaid_2",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13769,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.lang.String;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class HomeLossLocation_2 extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {\r\n\r\n        \r\n\r\n        WebDriverWait wait = new WebDriverWait(driver,30);\r\n            JavascriptExecutor js = (JavascriptExecutor) driver;\r\n            Actions act           = new Actions(driver);\r\n            WebElement targetacc2 = driver.findElement(By.xpath(\"//div[contains(@id,'HomeLossLV-body')]/descendant::table[2]/descendant::td[12]/div\"));\r\n            act.moveToElement(targetacc2).click().sendKeys(actionResult.getDTParameter(\"DT_LoseLocation\")).build().perform();\r\n            act.moveToElement(targetacc2).sendKeys(Keys.TAB).build().perform();\r\n            Thread.sleep(2000);\r\n\r\n  \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Entered The Lose Location Value\";\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "HomeLossLocation_2",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11854,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities; \r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\n\r\n\r\n//</Mandatory_libraries> \r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickOnOrderRetrieveHomeLossHistory_Home extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nfor(int i =1; i<=5; i++) \r\n    {          \r\n    try{\r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js=(JavascriptExecutor)driver;\r\n        WebElement orderRetrieveHomeLossHistory = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//a[contains(@id,'homeLoss:orderHLH')]\"))));\r\n        \r\n        js.executeScript(\"arguments[0].click();\", orderRetrieveHomeLossHistory);\r\n        Thread.sleep(10000);\r\n        /*if(driver.findElements(By.xpath(\"//*[text()='Received']\")).size()==0){\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'homeLoss:orderHLH')]\"))));\r\n        js.executeScript(\"arguments[0].click();\", orderRetrieveHomeLossHistory);\r\n        Thread.sleep(3000);}*/\r\n        actionResult.status   = true;\r\n        actionResult.comments = \"Executed successfully\";\r\n        break;\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status   = false;\r\n        actionResult.comments = e.getMessage();\r\n    }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnOrderRetrieveHomeLossHistory_Home",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11858,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class AddHomeLosses extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\ttry{\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,50);\n\t\t\tJavascriptExecutor js=(JavascriptExecutor)driver;\n\t\t\n\t\tWebElement addHomeLossHistoryBtn = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'homeLoss:Add-btnInnerEl')]\"))));\n\t\t\tjs.executeScript(\"arguments[0].click();\", addHomeLossHistoryBtn);\n\t\t\n\t\t//WebElement checkHomeLoss = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//img[@id='ext-element-1329']\"))));\n\t\t//\tjs.executeScript(\"arguments[0].click();\", checkHomeLoss);\n\t\t\n\t\t\n\t\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Executed successfully\";\n\t}\n\tcatch(Exception e){\n            actionResult.status = false;\n            actionResult.comments =  e.getMessage();\n\t}\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddHomeLosses",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11859,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickOnHomeLossHistoryReportTab extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n      \n\t\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n        WebDriverWait wait = new WebDriverWait(driver,50);\n\t\tJavascriptExecutor js=(JavascriptExecutor)driver;\n\t\tWebElement homeLossHistoryReport = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'homeLossReportTab-btnInnerEl')]\"))));\n\t\t\n\t\tjs.executeScript(\"arguments[0].click();\", homeLossHistoryReport);\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Executed successfully\";\n\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n    ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnHomeLossHistoryReportTab",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12758,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddDrivingViolations_MI extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n     \r\n    \r\n    try{\r\n       \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            \r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            \r\n            Actions act = new Actions(driver);\r\n            \r\n            String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n            String[] violationParams = inputValue.split(\" AND \");\r\n            String driverName = violationParams[0].toString();\r\n            String occuranceDt = violationParams[1].toString();\r\n            String convictionDt = violationParams[2].toString();\r\n            String violationDesc = violationParams[3].toString();\r\n            \r\n            /////////    Enter into Losses and Violation   ///////////\r\n            \r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'lossesAndViolationsCardTab-btnInnerEl')]\"))));\r\n                    WebElement lossedAndViolationElemt = driver.findElement(By.xpath(\"//*[contains(@id,'lossesAndViolationsCardTab-btnInnerEl')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", lossedAndViolationElemt);\r\n                                                            \r\n                    lossedAndViolationElemt.click();\r\n                    \r\n                    Thread.sleep(500);\r\n                                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Driver Name' has been Selected as : \"+driverName;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(3000);\r\n                                \r\n            ////////       Add Violation      ///////////////////////////////\r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violation:Add-btnInnerEl')]\"))));\r\n                    WebElement addBtn = driver.findElement(By.xpath(\"//*[contains(@id,'violation:Add-btnInnerEl')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", addBtn);\r\n                    \r\n                                        \r\n                    addBtn.click();\r\n                    Thread.sleep(1000);\r\n                                        \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"Executed\";\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(2000);\r\n                    \r\n                    ///Number of Violations///////////////\r\n                    \r\n                    int noOfViolations = driver.findElements(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table\")).size();\r\n            \r\n            \r\n            \r\n            ////////       Driver Name      ///////////////////////////////\r\n            \r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                        WebElement driverNameEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[2]/div[contains(text(),'none')]\"))));\r\n                    //WebElement driverNameEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[2]/div\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", driverNameEle);\r\n                    \r\n                                        \r\n                    js.executeScript(\"arguments[0].click();\", driverNameEle);\r\n                    Thread.sleep(500);\r\n                    //act.moveToElement(driverNameEle).sendKeys(selectText).build().perform();\r\n                    //Thread.sleep(500);\r\n                    //act.moveToElement(driverNameEle).sendKeys(Keys.ARROW_DOWN).build().perform();\r\n                    act.moveToElement(driverNameEle).sendKeys(Keys.ARROW_DOWN).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(driverNameEle).sendKeys(Keys.ENTER).build().perform();\r\n                    //Thread.sleep(500);\r\n                    //js.executeScript(\"arguments[0].value='\"+driverName+\"'\",driverNameEle);\r\n                    //Thread.sleep(500);\r\n                    //act.moveToElement(driverNameEle).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(2000);\r\n                                        \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Driver Name' has been Selected as : \"+driverName;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(3000);\r\n                    \r\n                    ////////       Occurance Date        ///////////////////////////////\r\n            \r\n                for(int retryB =1; retryB<=5; retryB++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        WebElement occuranceDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[3]/div\"))));\r\n                    \r\n                    //WebElement occuranceDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[3]/div\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", occuranceDtEle);\r\n                    \r\n                    js.executeScript(\"arguments[0].click();\", occuranceDtEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(occuranceDtEle).sendKeys(occuranceDt).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(occuranceDtEle).sendKeys(Keys.ENTER).build().perform();\r\n                    Thread.sleep(1000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Occurance Date' has been Selected as : \"+occuranceDt;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryB + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    //////////   Conviction Date   //////////////////////////////\r\n                    for(int retryC =1; retryC<=5; retryC++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        WebElement convictionDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[4]/div\"))));\r\n    \r\n                    //WebElement convictionDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[4]/div\"))));\r\n                    \r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", convictionDtEle);\r\n                    js.executeScript(\"arguments[0].click();\", convictionDtEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(convictionDtEle).sendKeys(convictionDt).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(convictionDtEle).sendKeys(Keys.ENTER).build().perform();\r\n                    Thread.sleep(2000);\r\n                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Personal Property' has been Entered as : \"+convictionDt;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryC + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    //////////   Violation Description   //////////////////////////////\r\n                    for(int retryD =1; retryD<=5; retryD++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        WebElement violationDescEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[6]/div[contains(text(),'none')]\"))));\r\n                    \r\n                    //WebElement violationDescEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[6]/div[contains(text(),'none')]\"))));\r\n                    \r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", violationDescEle);\r\n                    js.executeScript(\"arguments[0].click();\", violationDescEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.ARROW_UP).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.ARROW_UP).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.ENTER).build().perform();\r\n                    Thread.sleep(500);\r\n                    //js.executeScript(\"arguments[0].value='\"+violationDesc+\"'\",violationDescEle);\r\n                    //Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(2000);\r\n                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Violation Description' has been Entered as : \"+violationDesc;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryD + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                            \r\n                    Thread.sleep(3000);\r\n                                                    \r\n            actionResult.comments = \"The Violation Details have been updated\" + driverName + occuranceDt + convictionDt + violationDesc;\r\n            actionResult.status = true;\r\n\r\n                }\r\n            \r\n            \r\n        catch(Exception e) {\r\n                actionResult.comments = e.getMessage();\r\n                actionResult.status = false;\r\n            }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddDrivingViolations_MI",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12754,
    "Description": "To Enter Driving Violation using parameter as follows:\r\nDriverName AND 01012021 AND 02012021 AND Seatbelt Violation",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddDrivingViolations extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n     \r\n    \r\n    try{\r\n       \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            \r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            \r\n            Actions act = new Actions(driver);\r\n            \r\n            String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n            String[] violationParams = inputValue.split(\" AND \");\r\n            String driverName = violationParams[0].toString();\r\n            String occuranceDt = violationParams[1].toString();\r\n            String convictionDt = violationParams[2].toString();\r\n            String violationDesc = violationParams[3].toString();\r\n            \r\n            /////////    Enter into Losses and Violation   ///////////\r\n            \r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'lossesAndViolationsCardTab-btnInnerEl')]\"))));\r\n                    WebElement lossedAndViolationElemt = driver.findElement(By.xpath(\"//*[contains(@id,'lossesAndViolationsCardTab-btnInnerEl')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", lossedAndViolationElemt);\r\n                                                            \r\n                    lossedAndViolationElemt.click();\r\n                    \r\n                    Thread.sleep(500);\r\n                                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Driver Name' has been Selected as : \"+driverName;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(3000);\r\n                                \r\n            ////////       Add Violation      ///////////////////////////////\r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violation:Add-btnInnerEl')]\"))));\r\n                    WebElement addBtn = driver.findElement(By.xpath(\"//*[contains(@id,'violation:Add-btnInnerEl')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", addBtn);\r\n                    \r\n                                        \r\n                    addBtn.click();\r\n                    Thread.sleep(1000);\r\n                                        \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"Executed\";\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(2000);\r\n                    \r\n                    ///Number of Violations///////////////\r\n                    \r\n                    int noOfViolations = driver.findElements(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table\")).size();\r\n            \r\n            \r\n            \r\n            ////////       Driver Name      ///////////////////////////////\r\n            \r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                        //WebElement driverNameEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[2]/div[contains(text(),'none')]\"))));\r\n                        WebElement driverNameEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[2]/div\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", driverNameEle);\r\n                    \r\n                                        \r\n                    js.executeScript(\"arguments[0].click();\", driverNameEle);\r\n                    Thread.sleep(1000);\r\n                    //act.moveToElement(driverNameEle).sendKeys(selectText).build().perform();\r\n                    //Thread.sleep(500);\r\n                    act.moveToElement(driverNameEle).sendKeys(Keys.ARROW_DOWN).build().perform();\r\n                    Thread.sleep(500);\r\n                    //act.moveToElement(driverNameEle).sendKeys(Keys.ARROW_DOWN).build().perform();\r\n                    //Thread.sleep(500);\r\n                    //act.moveToElement(driverNameEle).sendKeys(Keys.ENTER).build().perform();\r\n                    //Thread.sleep(500);\r\n                    //js.executeScript(\"arguments[0].value='\"+driverName+\"'\",driverNameEle);\r\n                    //Thread.sleep(500);\r\n                    act.moveToElement(driverNameEle).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(2000);\r\n                                        \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Driver Name' has been Selected as : \"+driverName;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(3000);\r\n                    \r\n                    ////////       Occurance Date        ///////////////////////////////\r\n            \r\n                for(int retryB =1; retryB<=5; retryB++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        WebElement occuranceDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[3]/div\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", occuranceDtEle);\r\n                    \r\n                    js.executeScript(\"arguments[0].click();\", occuranceDtEle);\r\n                    Thread.sleep(1000);\r\n                    act.moveToElement(occuranceDtEle).sendKeys(occuranceDt).build().perform();\r\n                    Thread.sleep(2000);\r\n                    act.moveToElement(occuranceDtEle).sendKeys(Keys.ENTER).build().perform();\r\n                    //act.moveToElement(occuranceDtEle).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Occurance Date' has been Selected as : \"+occuranceDt;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryB + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    //////////   Conviction Date   //////////////////////////////\r\n                    for(int retryC =1; retryC<=5; retryC++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        \r\n                        WebElement convictionDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[4]/div\"))));\r\n                    \r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", convictionDtEle);\r\n                    js.executeScript(\"arguments[0].click();\", convictionDtEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(convictionDtEle).sendKeys(convictionDt).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(convictionDtEle).sendKeys(Keys.ENTER).build().perform();\r\n                    Thread.sleep(1000);\r\n                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Personal Property' has been Entered as : \"+convictionDt;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryC + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    //////////   Violation Description   //////////////////////////////\r\n                    for(int retryD =1; retryD<=5; retryD++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        \r\n                        //WebElement violationDescEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"noOfViolations\"]/tbody/tr/td[6]/div[contains(text(),'none')]\"))));\r\n                        WebElement violationDescEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[6]/div\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", violationDescEle);\r\n                    \r\n                    js.executeScript(\"arguments[0].click();\", violationDescEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.ARROW_UP).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.ARROW_UP).build().perform();\r\n                    Thread.sleep(500);\r\n                    //act.moveToElement(violationDescEle).sendKeys(Keys.ENTER).build().perform();\r\n                    Thread.sleep(500);\r\n                    //js.executeScript(\"arguments[0].value='\"+violationDesc+\"'\",violationDescEle);\r\n                    //Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(1000);\r\n                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Violation Description' has been Entered as : \"+violationDesc;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryD + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                            \r\n                    Thread.sleep(3000);\r\n                                                    \r\n            actionResult.comments = \"The Violation Details have been updated\" + driverName + occuranceDt + convictionDt + violationDesc;\r\n            actionResult.status = true;\r\n\r\n                }\r\n            \r\n            \r\n        catch(Exception e) {\r\n                actionResult.comments = e.getMessage();\r\n                actionResult.status = false;\r\n            }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddDrivingViolations",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9972,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//a[@id='SubmissionWizard:Next']",
    "PageId": 1152,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnNextBtnOnReportsPage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11860,
    "Description": "Clicking next button in reports screen and verify whether it's navigated to covreages screen",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickOnNextBtnAndVerifyCoveragePage extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\ttry{\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,50);\n\t\tJavascriptExecutor js=(JavascriptExecutor)driver;\n\t\t\n\t\tWebElement nextBtn = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//a[@id='SubmissionWizard:Next']\"))));\n\t\t\n\t\tjs.executeScript(\"arguments[0].click();\", nextBtn);\n\t\t\n\t\tString actPageTitle = driver.findElement(By.xpath(\"//span[contains(@id,'HOCoveragesHOEScreen:ttlBar')]\")).getText();\n\t\tThread.sleep(2000);\n\t\tif(actPageTitle.equals(\"Coverages\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Coverages' screen successfully\";\n\t\t}\n\t}\n\tcatch(Exception e){\n\t\tString exceptionMsg = e.getMessage();\n\t\tactionResult.status = false;\n           \tactionResult.comments =  \"'Coverages' screen is not displayed\"+exceptionMsg;\n\n\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnNextBtnAndVerifyCoveragePage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9392,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 127664,
        "StepNumber": 1,
        "Description": "Verify if MIPIPcoverage screen available",
        "LocatorTypeId": 7,
        "Locator": "//span[text()='MI PIP Coverage' and contains(@id,'PIPHouseholdScreen')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127666,
        "StepNumber": 2,
        "Description": "VerifyMIPIPCoverageScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11923,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127643,
        "StepNumber": 3,
        "Description": "MIPIP_Limit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_MIPIPLimit",
        "CustomActionId": 11925,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127644,
        "StepNumber": 4,
        "Description": "MIPIP_Diductible",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_MIPIPCoverage",
        "CustomActionId": 11926,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127665,
        "StepNumber": 5,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12444,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127646,
        "StepNumber": 6,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127650,
        "StepNumber": 7,
        "Description": "VerifyPACoveragesScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11934,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127657,
        "StepNumber": 8,
        "Description": "PropertyDamageLiabilityLimit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PropertyDamageLiabilityLimit",
        "CustomActionId": 11939,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127651,
        "StepNumber": 9,
        "Description": "Liability_BodilyInjuryLimit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_LiabilityBodilyInjuryLimit",
        "CustomActionId": 11938,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127655,
        "StepNumber": 10,
        "Description": "MedicalPaymentsLimit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_MedicalPaymentLimit",
        "CustomActionId": 11940,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127677,
        "StepNumber": 11,
        "Description": "Uninsured Motorist",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'4:CoverageInputSet:CovPatternInputGroup:_checkbox')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127652,
        "StepNumber": 12,
        "Description": "MotoristPropertyDamageLimit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_MotoristPropertyDamageLimit",
        "CustomActionId": 11941,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127654,
        "StepNumber": 13,
        "Description": "MotoristPropertyDamageDiductible",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_MotoristPropertyDamageDiductible",
        "CustomActionId": 11942,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127667,
        "StepNumber": 14,
        "Description": "MotoristPropertyDamageOption",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_MotoristPropertyDamageOption",
        "CustomActionId": 11946,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127668,
        "StepNumber": 15,
        "Description": "MotoristBodiliInjuryOption",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_BodilyInjuryOption",
        "CustomActionId": 11945,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127669,
        "StepNumber": 16,
        "Description": "MotoristBodiliInjuryLimit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_BodilyInjuryLimit",
        "CustomActionId": 11955,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127648,
        "StepNumber": 17,
        "Description": "SelectUnInsuredBIL",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_MotoristBodilyInjuryPackage",
        "CustomActionId": 11961,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127647,
        "StepNumber": 18,
        "Description": "SelectUnderInsuredBIL",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_MotoristBodilyInjuryPackage",
        "CustomActionId": 11960,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127653,
        "StepNumber": 19,
        "Description": "MotoristBodilyInjuryPackage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_MotoristBodilyInjuryPackage",
        "CustomActionId": 11944,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127670,
        "StepNumber": 20,
        "Description": "MotoristStackingOption",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_MotoristStackingOption",
        "CustomActionId": 11956,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127671,
        "StepNumber": 21,
        "Description": "PersonalInjuryProtectionDeductible",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PersonalInjuryProtectionDeductible",
        "CustomActionId": 11957,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127672,
        "StepNumber": 22,
        "Description": "PersonalInjuryProtectionWorkLoss",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PersonalInjuryProtectionWorkLoss",
        "CustomActionId": 11958,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127673,
        "StepNumber": 23,
        "Description": "PersonalInjuryProtectionAppliesTo",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PersonalInjuryProtectionAppliesTo",
        "CustomActionId": 11959,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127656,
        "StepNumber": 24,
        "Description": "ComprehensiveDeductible",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_ComprehensiveDeductible",
        "CustomActionId": 11943,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127649,
        "StepNumber": 25,
        "Description": "SelectComprehensiveDed",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11962,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127676,
        "StepNumber": 26,
        "Description": "CollisionLimit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_CollisionLimit",
        "CustomActionId": 11947,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127658,
        "StepNumber": 27,
        "Description": "BroadenedOtherCar",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11952,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127678,
        "StepNumber": 28,
        "Description": "SelectUMPDCoverage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11967,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127659,
        "StepNumber": 29,
        "Description": "CarRental",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_CarRentalLimit",
        "CustomActionId": 11948,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127662,
        "StepNumber": 30,
        "Description": "ExtraEquipment",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_ExtraEquipmentLimit",
        "CustomActionId": 11949,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127660,
        "StepNumber": 31,
        "Description": "EnhencedTotalLossReplacement",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11950,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127661,
        "StepNumber": 32,
        "Description": "TranspotationNetworkCompany",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11951,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127674,
        "StepNumber": 33,
        "Description": "EnhencedExteriorRepairOption",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11953,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127675,
        "StepNumber": 34,
        "Description": "LoanLeaseGap",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11954,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127663,
        "StepNumber": 35,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12444,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127645,
        "StepNumber": 36,
        "Description": "ProceedToNextPage",
        "LocatorTypeId": 7,
        "Locator": "(//span[contains(text(),'Risk Analysis')])[1]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "PACoverage_AllFields",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11923,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyMIPIPCoverageScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++)\n{\ntry\n{\n\n\nWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'PIPHouseholdScreen:0')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"MI PIP Coverage\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'MI PIP Coverage' screen successfully\";\n\t\n\n\n\nbreak;\n}}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyMIPIPCoverageScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11925,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class MIPIP_Limit extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t WebDriverWait wait=new WebDriverWait(driver,10);\n              WebElement medicalLimitEle= wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'MedicalTermInput-inputEl')]\"))));\n\t\t\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tmedicalLimitEle.sendKeys(s);\n\t\t\tmedicalLimitEle.sendKeys(Keys.DELETE);\n\t\t\tmedicalLimitEle.sendKeys(inputValue);\n\t\n\t\t\tThread.sleep(2000);\n\t\t\tmedicalLimitEle.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "MIPIP_Limit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11926,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class MIPIP_Diductible extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t WebDriverWait wait=new WebDriverWait(driver,10);\n              WebElement mipipDiductibleEle= wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'DeductibleTermInput-inputEl')]\"))));\n\t\t\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tmipipDiductibleEle.sendKeys(s);\n\t\t\tmipipDiductibleEle.sendKeys(Keys.DELETE);\n\t\t\tmipipDiductibleEle.sendKeys(inputValue);\n\t\t\t\n\t\t\tThread.sleep(2000);\n\t\t\tmipipDiductibleEle.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n\n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "MIPIP_Diductible",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11934,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyPACoveragesScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++)\n{\ntry\n{\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tActions act = new Actions(driver);\n\t\t\n        Thread.sleep(5000);\n\t\t//WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:ttlBar')]\"));\n\t\t//String actPageTitle = pageTitleEle.getText();\n\t\t\t\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:ttlBar')]\"))));\n\t\t\tString actPageTitle = driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:ttlBar')]\")).getText();\n\t\tThread.sleep(2000);\n\t\tif(actPageTitle.equals(\"PA Coverages\") || actPageTitle.equals(\"Auto Coverages\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'PA Coverages' screen successfully\";\n\t\t}\n\n\n\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyPACoveragesScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11939,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class PropertyDamageLiabilityLimit extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\tdriver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//div[text()='Property Damage Liability']\"))));\n\n\t\tWebElement pdl = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[text()='Property Damage Liability']\")));\n\t\t\n\t\t//driver.findElement(By.xpath(\"//div[text()='Property Damage Liability']\"));\n\t\tString idVaue=pdl.getAttribute(\"id\");\n\t\tString str= idVaue.split(\"-\")[0];\n\n\t\tWebElement propertyDamageLiabilityLimit=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:OptionTermInput-inputEl']\")));\n\t\t\n\t\t//driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:OptionTermInput-inputEl']\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tpropertyDamageLiabilityLimit.sendKeys(s);\n\t\tpropertyDamageLiabilityLimit.sendKeys(Keys.DELETE);\n\t\tpropertyDamageLiabilityLimit.sendKeys(inputValue.trim());\n\t\tThread.sleep(2000);\n\t\tpropertyDamageLiabilityLimit.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PropertyDamageLiabilityLimit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11938,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n//import org.openqa.selenium.StaleElementReferenceException;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Liability_BodilyInjuryLimit extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n        \n\t\t\tThread.sleep(5000);\n\t\n\t\t\tWebElement lbi = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[text()='Liability - Bodily Injury']\")));\n\t\t\t//WebElement lbi = driver.findElement(By.xpath(\"//div[text()='Liability - Bodily Injury']\"));\n\t\t\n\t\t\tString idVaue=lbi.getAttribute(\"id\");\n\t\t\tString str= idVaue.split(\"-\")[0];\n              \n\t\t\tWebElement bodilyInjuryLimitEle=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:PackageTermInput-inputEl']\")));\n\n\t\t\t//driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:PackageTermInput-inputEl']\"));\n\t\t\t\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tbodilyInjuryLimitEle.sendKeys(s);\n\t\t\tbodilyInjuryLimitEle.sendKeys(Keys.DELETE);\n\t\t\tbodilyInjuryLimitEle.sendKeys(inputValue.trim());\n\t\n\t\t\tThread.sleep(4000);\n\t\t\t//bodilyInjuryLimitEle.sendKeys(Keys.ENTER);\n\t\t\t//Thread.sleep(2000);\n\t\t\tbodilyInjuryLimitEle.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000);\n \n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Liability_BodilyInjuryLimit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11940,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class MedicalPaymentsLimit extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t if(driver.findElements(By.xpath(\"//div[text()='Medical Payments']\")).size()!=0)\n\t\t\t\t{  \n\n                    WebElement mp = driver.findElement(By.xpath(\"//div[text()='Medical Payments']\"));\n\t\t\t\t\tString idVaue=mp.getAttribute(\"id\");\n\t\t\t\t\tString str= idVaue.split(\"-\")[0];\n                    WebElement mpCheckBox=driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n                    String classValueFormp=mpCheckBox.getAttribute(\"class\");\n\n\t\t\t\tif(inputValue.equalsIgnoreCase(\"No\")||inputValue.equals(\"\"))\n\t\t\t\t{    \n                  if(classValueFormp.contains(\"x-form-cb-checked\"))\n                  {\n\t\t\t\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t  }\n            \n\t\t\t\tactionResult.status = true;\n\t\t\t\tactionResult.comments = \"Executed Successfully\";\n\t\t\t\t}\n\n\t\t\t\telse\n\t\t\t\t{\n\n                  if(!classValueFormp.contains(\"x-form-cb-checked\"))\n                  {\n                  driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n                  }\n\n\t\t\t\tWebElement medicalPaymentLimit=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:OptionTermInput-inputEl']\"));\n\t\t\t\t\n\t\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\t\tmedicalPaymentLimit.sendKeys(s);\n\t\t\t\tmedicalPaymentLimit.sendKeys(Keys.DELETE);\n\t\t\t\tmedicalPaymentLimit.sendKeys(inputValue.trim());\n\t\t\t\t\n\t\t\t\tThread.sleep(2000);\n\t\t\t\t\n\t\t\t\tmedicalPaymentLimit.sendKeys(Keys.TAB);\n\t\t\t\tThread.sleep(2000);\n      \n\t\t\t\t\tactionResult.status = true;\n\t\t\t\t\tactionResult.comments = \"Executed Successfully\"; \n\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\telse{\n            actionResult.status = true;\n            actionResult.comments = \"Medical Payments Limit not available\";\n\n\t\t}\n \n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "MedicalPaymentsLimit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11941,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class MotoristPropertyDamageLimit extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\tString paCoverageTitle=driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")).getText();\n\n\t\t\tif(paCoverageTitle.contains(\"Tennessee\")||paCoverageTitle.contains(\"Georgia\"))\n\t\t\t{\n                WebElement mpdl = driver.findElement(By.xpath(\"//div[text()='Uninsured/Underinsured Motorists Property Damage' or text()='Uninsured Motorists Property Damage']\"));\n\t\t\t\tString idVaue=mpdl.getAttribute(\"id\");\n\t\t\t\tString str= idVaue.split(\"-\")[0];\n                \n\t\t\t\tWebElement mpdlCheckBox=driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n                String classValueFormpdl=mpdlCheckBox.getAttribute(\"class\");\n                       \n\t\t\t\tif(inputValue.equalsIgnoreCase(\"No\")||inputValue.equals(\"\"))\n\t\t\t\t{    \n                  if(classValueFormpdl.contains(\"x-form-cb-checked\"))\n                  {\n                  driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n                  Thread.sleep(2000);\n    \n                  }\n\t\t\t\t\tactionResult.status = true;\n\t\t\t\t\tactionResult.comments = \"Executed Successfully\";\n\n\t\t\t\t}\n\n\t\t\t\telse\n\t\t\t\t{\n\n                  if(!classValueFormpdl.contains(\"x-form-cb-checked\"))\n                  {\n                  driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n    \n                  }\n                \n\t\t\t\tThread.sleep(2000);\n\n\t\t\t\t\tWebElement motoristPropertyDamageLimit=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:OptionTermInput-inputEl']\"));\n\t\t\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\t\t\tmotoristPropertyDamageLimit.sendKeys(s);\n\t\t\t\t\tmotoristPropertyDamageLimit.sendKeys(Keys.DELETE);\n\t\t\t\t\tmotoristPropertyDamageLimit.sendKeys(inputValue.trim());\n\t\t\t\n\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t\tmotoristPropertyDamageLimit.sendKeys(Keys.TAB);\n\t\t\t\t\tThread.sleep(2000);\n      \n\t\t\t\t\tactionResult.status = true;\n\t\t\t\t\tactionResult.comments = \"Executed Successfully\";\n\t\t\t\t}\n       \n\t\t\t} \n   \n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Motorist Property Damage not available\"; \n\n \t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "MotoristPropertyDamageLimit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11942,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class MotoristPropertyDamageDiductible extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t   String paCoverageTitle=driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")).getText();\n\n\t\t\t\tif(paCoverageTitle.contains(\"Tennessee\")||paCoverageTitle.contains(\"Georgia\"))\n\t\t\t\t{\n\n                    WebElement mpdd = driver.findElement(By.xpath(\"//div[text()='Uninsured/Underinsured Motorists Property Damage' or text()='Uninsured Motorists Property Damage']\"));\n\t\t\t\t\tString idVaue=mpdd.getAttribute(\"id\");\n\t\t\t\t\tString str= idVaue.split(\"-\")[0];\n                    \n\t\t\t\t\tWebElement mpddCheckBox=driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n                    String classValueFormbip=mpddCheckBox.getAttribute(\"class\");\n                      \n\t\t\t\tif(inputValue.equalsIgnoreCase(\"No\")||inputValue.equals(\"\"))\n\t\t\t\t{    \n                  if(classValueFormbip.contains(\"x-form-cb-checked\"))\n                  {\n                  driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n                  Thread.sleep(2000);\n    \n                  }\n\t\t\t\t\tactionResult.status = true;\n\t\t\t\t\tactionResult.comments = \"Executed Successfully\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n                  if(!classValueFormbip.contains(\"x-form-cb-checked\"))\n                  {\n                  driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n \n                  }\n                  \n\t\t\t\tWebElement motoristPropertyDamageDiductable=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":1:CovTermInputSet:OptionTermInput-inputEl']\"));\n\t\t\t\t\n\t\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\t\tmotoristPropertyDamageDiductable.sendKeys(s);\n\t\t\t\tmotoristPropertyDamageDiductable.sendKeys(Keys.DELETE);\n\t\t\t\tmotoristPropertyDamageDiductable.sendKeys(inputValue.trim());\n\t\t\t\tThread.sleep(2000);\n\t\t\t\tmotoristPropertyDamageDiductable.sendKeys(Keys.TAB);\n\t\t\t\tThread.sleep(2000); \n\t\t\n\t\t\t\tactionResult.status = true;\n\t\t\t\tactionResult.comments = \"Executed Successfully\"; \n\t\t\t\t} \n\n            }\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Motorist Property Damage not available\";\n\n \t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "MotoristPropertyDamageDiductible",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11946,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class MotoristPropertyDamageOption extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(100,TimeUnit.SECONDS);\n\t\t\tThread.sleep(3000);\n\t\t\tString pacoverageTitle = driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")).getText();\n\n\t\t\t\tif(pacoverageTitle.contains(\"Georgia\")){\n\t\t\t\tWebElement mpdo = driver.findElement(By.xpath(\"//div[text()='Uninsured/Underinsured Motorists Property Damage' or text()='Uninsured Motorists Property Damage']\"));\n\t\t\t\t\n\t\t\t\tString idVaue=mpdo.getAttribute(\"id\");\n\t\t\t\tString str= idVaue.split(\"-\")[0];\n\t\t\t\tWebElement mpdoCheckBox = driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n\t\t\t\tString classValueFormpdo=mpdoCheckBox.getAttribute(\"class\");\n                      \n\t\t\t\tif(inputValue.equalsIgnoreCase(\"No\")||inputValue.equals(\"\"))\n\t\t\t\t{    \n                  if(classValueFormpdo.contains(\"x-form-cb-checked\"))\n                  {\n\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n                  }\n\n\t\t\t\t\tactionResult.status = true;\n\t\t\t\t\tactionResult.comments = \"Executed Successfully\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(!classValueFormpdo.contains(\"x-form-cb-checked\"))\n\t\t\t\t\t{\n\t\t\t\t//WebElement checkbox = driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\"));\n\t\t\t\tThread.sleep(2000);\n\t\t\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n\t\t\n\t\t\t\t\t}\n\t\n\t\t\t\tThread.sleep(2000);\n\t\t\t\tWebElement motoristPropertyDamageOption=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":2:CovTermInputSet:TypekeyTermInput-inputEl']\"));\n\t\n\t\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\t\tmotoristPropertyDamageOption.sendKeys(s);\n\t\t\t\tmotoristPropertyDamageOption.sendKeys(Keys.DELETE);\n\t\t\t\tmotoristPropertyDamageOption.sendKeys(inputValue.trim());\n\t\n\t\t\t\tThread.sleep(2000);\n\t\t\t\tmotoristPropertyDamageOption.sendKeys(Keys.TAB);\n\t\t\t\tThread.sleep(2000);\n\n\t\t\t\tactionResult.status = true;\n\t\t\t\tactionResult.comments = \"Executed Successfully\"; \n\t\t\t\t}\n\t\t\t}\n\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Motorist Property Damage Option not available\"; \n\n \t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "MotoristPropertyDamageOption",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11945,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class MotoristBodiliInjuryOption extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t WebElement lbio = driver.findElement(By.xpath(\"//*[text()='Uninsured Motorist' or text()='Uninsured/Underinsured Motorists Bodily Injury' or text()='Uninsured Motorists - Bodily Injury' or text()='Underinsured Motorists - Bodily Injury']\"));\n\t\t\t  String idVaue=lbio.getAttribute(\"id\");\n\t\t\t  String str= idVaue.split(\"-\")[0];\n                       WebElement bioCheckBox=driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n                       String classValueForbio=bioCheckBox.getAttribute(\"class\");\n                       String paCoverageTitle=driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")).getText();\n\n\t\t\tif(inputValue.equalsIgnoreCase(\"No\")||inputValue.equals(\"\"))\n\t\t\t\t{    \n                  if(classValueForbio.contains(\"x-form-cb-checked\"))\n                  {\n                  driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n                  Thread.sleep(2000);\n    \n                  }\n\t\t\t\tactionResult.status = true;\n\t\t\t\tactionResult.comments = \"Executed Successfully\";\n\n\t\t\t\t}\n\n\t\t\t\telse\t\n\t\t\t\t{\n\n                  if(!classValueForbio.contains(\"x-form-cb-checked\"))\n                  {\n                  driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n    \n                  }\n                  if(paCoverageTitle.contains(\"Georgia\"))\n\t\t\t\t{\n\t\t\tWebElement motoristBodilyInjuryOption=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":1:CovTermInputSet:TypekeyTermInput-inputEl']\"));\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tmotoristBodilyInjuryOption.sendKeys(s);\n\t\t\tmotoristBodilyInjuryOption.sendKeys(Keys.DELETE);\n\t\t\tmotoristBodilyInjuryOption.sendKeys(inputValue.trim());\n\t\t\t\n\t\t\tThread.sleep(2000);\n\t\t\tmotoristBodilyInjuryOption.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000);\n\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n\t\t\t}\n\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Bodili Injury Option not available\"; \n\t\t\t}\n\n \t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "MotoristBodiliInjuryOption",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11955,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\nimport java.util.*;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class MotoristBodiliInjuryLimit extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\t\n\t\t\tWebElement mbil = driver.findElement(By.xpath(\"//*[text()='Uninsured Motorist' or text()='Uninsured/Underinsured Motorists Bodily Injury' or text()='Uninsured Motorists - Bodily Injury' or text()='Underinsured Motorists - Bodily Injury']\"));\n\t\t\tString idVaue=mbil.getAttribute(\"id\");\n\t\t\tString str= idVaue.split(\"-\")[0];\n            \n\t\t\t\tWebElement mbilCheckBox=driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n\n\t\t\t\tString classValueFormbil=mbilCheckBox.getAttribute(\"class\");\n                String paCoverageTitle=driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")).getText();\n\n\t\t\tif(inputValue.equalsIgnoreCase(\"No\")||inputValue.equals(\"\"))\n\t\t\t{    \n                  if(classValueFormbil.contains(\"x-form-cb-checked\"))\n                  {\n                  driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n                  Thread.sleep(2000);\n    \n                  }\n            actionResult.status = true;\n            actionResult.comments = \"Executed Successfully\";\n          }\n\n\t\t\telse\n\t\t\t{\n\n                  if(!classValueFormbil.contains(\"x-form-cb-checked\"))\n                  {\n                  driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n    \n                  }\n                  if(paCoverageTitle.contains(\"Michigan\"))  {\n\n\t\t\tWebElement motoristBodilyInjuryPackage=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":PackageTermInput-inputEl']\"));\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tmotoristBodilyInjuryPackage.sendKeys(s);\n\t\t\tmotoristBodilyInjuryPackage.sendKeys(Keys.DELETE);\n\t\t\tmotoristBodilyInjuryPackage.sendKeys(inputValue.trim());\n\t\t\t\n\t\t\tThread.sleep(2000);\n\t\t\t\n\t\t\tmotoristBodilyInjuryPackage.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000);\n\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n            }\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Bodily injuryPackage not available\"; \n\t\t}\n\n \t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "MotoristBodiliInjuryLimit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11961,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectUnInsuredBIL extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\n\ttry{\n\t\t\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tActions act = new Actions(driver);\n\t\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\t\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[text()='Uninsured Motorists - Bodily Injury']/parent::legend/following-sibling::div//div//input\"))));\n\t\t\tWebElement unInsBILTxtEle = driver.findElement(By.xpath(\"//div[text()='Uninsured Motorists - Bodily Injury']/parent::legend/following-sibling::div//div//input\"));\n\t\t\tjs.executeScript(\"arguments[0].click();\",unInsBILTxtEle);\n\t\t\tunInsBILTxtEle.sendKeys(selectText);\n\t\t\tThread.sleep(2000);\n\t\t\tunInsBILTxtEle.sendKeys(Keys.DELETE);\n\t\t\t//Thread.sleep(2000);\n\t\t\t//js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",unInsBILTxtEle);\n\t\t\tThread.sleep(2000);\n\t\t\t\n\t\t\tdriver.findElement(By.xpath(\"//div[text()='Uninsured Motorists - Bodily Injury']/parent::legend/following-sibling::div//div//input\")).sendKeys(inputValue.trim());\n\t\t\tThread.sleep(1000);\n\t\t\tunInsBILTxtEle.sendKeys(Keys.ENTER);\n\t\t\t//unInsBILTxtEle.sendKeys(Keys.TAB);\n\t\t\t//Thread.sleep(2000);\n\t\t\t\n\t\n\t\t\tactionResult.status = true;\n           \t       actionResult.comments =  \"'UnInsured - Bodily Injury Limit has been selected as' : \"+inputValue;\n\n\n\n}\ncatch(Exception e) {\n\tactionResult.comments = e.getMessage();\n\t//actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\tactionResult.status = false;\n}\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectUnInsuredBIL",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11960,
    "Description": "Selecting the value for Under Insured Motorist Bodily Injury Limit dropdown on PA Coverage screen.",
    "Code": "//////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit; \n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectUnderInsuredBIL extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n\t   // inputValue=inputValue.trim();\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int retry =1; retry<=5; retry++) \n\t{\n\ttry{\n\t\t\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tActions act = new Actions(driver);\n\t\t\n\t\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tString[] UDRInsBIL=inputValue.split(\" AND \");\n\t\t\tString stateName=UDRInsBIL[0].toString();\n\t\t\tString UnderinsuredBILVal=UDRInsBIL[1].toString().trim();\n\t\t\t\n\t\t\t\n\t\t\t/*if(stateName.equalsIgnoreCase(\"WI\")){\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[text()='Underinsured Motorists - Bodily Injury']/parent::legend/child::div//input\"))));\n\t\t\tWebElement underInsBILChkBox = driver.findElement(By.xpath(\"//div[text()='Underinsured Motorists - Bodily Injury']/parent::legend/child::div//input\"));\n\t\t\tunderInsBILChkBox.click();\n\t\t      // js.executeScript(\"arguments[0].click();\",underInsBILChkBox);\n\t\t\tThread.sleep(2000);\n\t\t\t}*/\n\n\t\t\tif(stateName.equalsIgnoreCase(\"MI\")){\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[text()='Underinsured Motorists - Bodily Injury']/parent::legend/child::div//input\"))));\n\t\t\tWebElement underInsBILChkBox = driver.findElement(By.xpath(\"//div[text()='Underinsured Motorists - Bodily Injury']/parent::legend/child::div//input\"));\n\t\t\tunderInsBILChkBox.click();\n\t\t      // js.executeScript(\"arguments[0].click();\",underInsBILChkBox);\n\t\t\tThread.sleep(2000);\n\t\t\t}\n\t\t\t\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[text()='Underinsured Motorists - Bodily Injury']/parent::legend/following-sibling::div//div//input\"))));\n\t\t\tWebElement underInsBILTxtEle = driver.findElement(By.xpath(\"//div[text()='Underinsured Motorists - Bodily Injury']/parent::legend/following-sibling::div//div//input\"));\n\t\t\tdriver.findElement(By.xpath(\"//div[text()='Underinsured Motorists - Bodily Injury']/parent::legend/following-sibling::div//div//input\")).click();\n\t\t\t\n\t\t\tjs.executeScript(\"arguments[0].click();\",underInsBILTxtEle);\n\t\t\t\n\t\t\tunderInsBILTxtEle.sendKeys(selectText);\n\t\t\tThread.sleep(2000);\n\t\t\tunderInsBILTxtEle.sendKeys(Keys.DELETE);\n\t\t\tThread.sleep(2000);\n\t\t\tdriver.findElement(By.xpath(\"//div[text()='Underinsured Motorists - Bodily Injury']/parent::legend/following-sibling::div//div//input\")).sendKeys(UnderinsuredBILVal);\n\t\t\tunderInsBILTxtEle.sendKeys(Keys.ENTER);\n\t\t\tunderInsBILTxtEle.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000);\n\t\t\t\n\t\n\t\t\tactionResult.status = true;\n           \tactionResult.comments =  \"'Under Insured - Bodily Injury Limit has been selected as' : \"+UnderinsuredBILVal;\nbreak;\n\t\n}\ncatch(Exception e) {\nactionResult.comments =e.getMessage();\nactionResult.status = false;\n}\n}\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectUnderInsuredBIL",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11944,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class MotoristBodilyInjuryPackage extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t  WebElement mbip = driver.findElement(By.xpath(\"//*[text()='Uninsured Motorist' or text()='Uninsured/Underinsured Motorists Bodily Injury' or text()='Uninsured Motorists - Bodily Injury' or text()='Underinsured Motorists - Bodily Injury']\"));\n\t\t\t  String idVaue=mbip.getAttribute(\"id\");\n\t\t\t  String str= idVaue.split(\"-\")[0];\n                       WebElement mbipCheckBox=driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n                       String classValueFormbip=mbipCheckBox.getAttribute(\"class\");\n                       String paCoverageTitle=driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")).getText();\n\n\t\t\t\tif(inputValue.equalsIgnoreCase(\"No\")||inputValue.equals(\"\"))\n\t\t\t\t{    \n                  if(classValueFormbip.contains(\"x-form-cb-checked\"))\n                  {\n                  driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n                  Thread.sleep(2000);\n    \n                  }\n\t\t\t\t\tactionResult.status = true;\n\t\t\t\t\tactionResult.comments = \"Executed Successfully\";\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\n                  if(!classValueFormbip.contains(\"x-form-cb-checked\"))\n                  {\n                  driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n    \n                  }\n                  if(paCoverageTitle.contains(\"Tennessee\")||paCoverageTitle.contains(\"Florida\")||paCoverageTitle.contains(\"Georgia\"))\n                  {\n\n\t\t\t\t\tWebElement motoristBodilyInjuryPackage=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:PackageTermInput-inputEl']\"));\n\t\t\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\t\t\tmotoristBodilyInjuryPackage.sendKeys(s);\n\t\t\t\t\tmotoristBodilyInjuryPackage.sendKeys(Keys.DELETE);\n\t\t\t\t\tmotoristBodilyInjuryPackage.sendKeys(inputValue.trim());\n\t\n\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t\tmotoristBodilyInjuryPackage.sendKeys(Keys.TAB);\n\t\t\t\t\tThread.sleep(2000);\n\n\t\t\t\t\tactionResult.status = true;\n\t\t\t\t\tactionResult.comments = \"Executed Successfully\"; \n                  }\n\t\t\t\t\n\t\t\t\tactionResult.status = true;\n\t\t\t\tactionResult.comments = \"Bodily injuryPackage not available\"; \n\t\t\t\t}\n\n \t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "MotoristBodilyInjuryPackage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11956,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class MotoristStackingOption extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\tString paCoverageTitle=driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")).getText();\n\n\t\t\tif(paCoverageTitle.contains(\"Florida\"))\n\t\t\t{\n                WebElement mso = driver.findElement(By.xpath(\"//*[text()='Uninsured Motorist' or text()='Uninsured/Underinsured Motorists Bodily Injury' or text()='Uninsured Motorists - Bodily Injury']\"));\n\t\t\t\tString idVaue=mso.getAttribute(\"id\");\n\t\t\t\tString str= idVaue.split(\"-\")[0];\n                \n\t\t\t\tWebElement msoCheckBox=driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n                String classValueFormso=msoCheckBox.getAttribute(\"class\");\n                       \n\t\t\t\tif(inputValue.equalsIgnoreCase(\"No\")||inputValue.equals(\"\"))\n\t\t\t\t{    \n                  if(classValueFormso.contains(\"x-form-cb-checked\"))\n                  {\n                  driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n                  Thread.sleep(2000);\n    \n                  }\n\t\t\t\n\t\t\t\tactionResult.status = true;\n\t\t\t\tactionResult.comments = \"Executed Successfully\";\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\n                  if(!classValueFormso.contains(\"x-form-cb-checked\"))\n                  {\n                  driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n    \n                  }\n                  \n\n\t\t\t\tWebElement motoristStackingOption=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":1:CovTermInputSet:TypekeyTermInput-inputEl']\"));\n\t\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\t\tmotoristStackingOption.sendKeys(s);\n\t\t\t\tmotoristStackingOption.sendKeys(Keys.DELETE);\n\t\t\t\tmotoristStackingOption.sendKeys(inputValue.trim());\n\t\t\t\t\n\t\t\t\tThread.sleep(2000);\n\t\t\t\tmotoristStackingOption.sendKeys(Keys.TAB);\n\t\t\t\tThread.sleep(2000);\n\n\t\t\t\tactionResult.status = true;\n\t\t\t\tactionResult.comments = \"Executed Successfully\"; \n                }\n\t\t\t}\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Stacking option not available\"; \n\n \t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "MotoristStackingOption",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11957,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class PersonalInjuryProtectionDeductible extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")));\n\t\t\n\t\tString paCoverageTitle=driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")).getText();\n\n      \t  if(paCoverageTitle.contains(\"Florida\"))\n\n          {\n\n            WebElement ppd = driver.findElement(By.xpath(\"//div[text()='Personal Injury Protection']\"));\n\t\t\tString idVaue=ppd.getAttribute(\"id\");\n\t\t\tString str= idVaue.split(\"-\")[0]; \n        \n        \tWebElement personalInjuryProtectionDeductible=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":1:CovTermInputSet:OptionTermInput-inputEl']\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tpersonalInjuryProtectionDeductible.sendKeys(s);\n\t\tpersonalInjuryProtectionDeductible.sendKeys(Keys.DELETE);\n        \tpersonalInjuryProtectionDeductible.sendKeys(inputValue);\n\t\tThread.sleep(2000);\n\t\tpersonalInjuryProtectionDeductible.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000); \n\n       \n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n\t\t} \n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Personal Injury Protection not available\";\n\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PersonalInjuryProtectionDeductible",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11958,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class PersonalInjuryProtectionWorkLoss extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\t\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")));\n\t\t\n\t\tString paCoverageTitle=driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")).getText();\n\n       \tif(paCoverageTitle.contains(\"Florida\"))\n\n         \t {\n\n\t\t\tWebElement pipwl = driver.findElement(By.xpath(\"//div[text()='Personal Injury Protection']\"));\n\t\t\tString idVaue=pipwl.getAttribute(\"id\");\n\t\t\tString str= idVaue.split(\"-\")[0];  \n\t\t\tWebElement personalInjuryProtectionWorkLoss=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":2:CovTermInputSet:TypekeyTermInput-inputEl']\"));\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tpersonalInjuryProtectionWorkLoss.sendKeys(s);\n\t\t\tpersonalInjuryProtectionWorkLoss.sendKeys(Keys.DELETE);\n\t\t\tpersonalInjuryProtectionWorkLoss.sendKeys(inputValue);\n\t\t\tThread.sleep(2000);\n\t\t\tpersonalInjuryProtectionWorkLoss.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000); \n\t\t\n       \n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n\t\t\t} \n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Personal Injury Protection not available\";\n\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PersonalInjuryProtectionWorkLoss",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11959,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class PersonalInjuryProtectionAppliesTo extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t String paCoverageTitle=driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")).getText();\n\n        if(paCoverageTitle.contains(\"Florida\"))\n\n        {\n\n        WebElement pipat = driver.findElement(By.xpath(\"//div[text()='Personal Injury Protection']\"));\n\t\tString idVaue=pipat.getAttribute(\"id\");\n\t\tString str= idVaue.split(\"-\")[0];\n                       \n\t\tWebElement personalInjuryProtectionAppliesTo=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":3:CovTermInputSet:TypekeyTermInput-inputEl']\"));\n\t\t\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tpersonalInjuryProtectionAppliesTo.sendKeys(s);\n\t\tpersonalInjuryProtectionAppliesTo.sendKeys(Keys.DELETE);\n\t\tpersonalInjuryProtectionAppliesTo.sendKeys(inputValue);\n\t\t\n\t\tThread.sleep(2000);\n\t\tpersonalInjuryProtectionAppliesTo.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000); \n       \n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n\t\t} \n     \n       actionResult.status = true;\n       actionResult.comments = \"Personal Injury Protection not available\";\n\n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PersonalInjuryProtectionAppliesTo",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11943,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ComprehensiveDeductible extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\t WebElement comprehensive = driver.findElement(By.xpath(\"//div[text()='Comprehensive']\"));\n\t\t\t  String idVaue=comprehensive.getAttribute(\"id\");\n\t\t\t  String str= idVaue.split(\"-\")[0];\n\t\t\t WebElement checkboxElementComprehensive = driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n\t\t\t String classValueComprihensive=checkboxElementComprehensive.getAttribute(\"class\");\n\n\n\t\t\t  if(!classValueComprihensive.contains(\"x-form-cb-checked\")){\n\t\t\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click(); }\n \t\n\n\n\t\t\t  if(driver.findElements(By.xpath(\"(//input[contains(@id,'CovTermInputSet:OptionTermInput-inputEl')])[5]\")).size()!=0){\n\n\t\t\tWebElement comprehensiveDeductible=driver.findElement(By.xpath(\"(//input[contains(@id,'CovTermInputSet:OptionTermInput-inputEl')])[5]\"));\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tcomprehensiveDeductible.sendKeys(s);\n\t\t\tcomprehensiveDeductible.sendKeys(Keys.DELETE);\n\t\t\tcomprehensiveDeductible.sendKeys(inputValue.trim());\n\t\t\t\n\t\t\tThread.sleep(2000);\n\t\t\tcomprehensiveDeductible.sendKeys(Keys.TAB);\n\t\t\t\n\t\t\tThread.sleep(2000);\n\t\t\t}\n      \n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n       \n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ComprehensiveDeductible",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11962,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectComprehensiveDed extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\n\ttry{\n\t\t\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tActions act = new Actions(driver);\n\t\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\t\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[text()='Comprehensive']/parent::legend/following-sibling::div//div//input\"))));\n\t\t\tWebElement compDed = driver.findElement(By.xpath(\"//div[text()='Comprehensive']/parent::legend/following-sibling::div//div//input\"));\n\t\t\tjs.executeScript(\"arguments[0].click();\",compDed);\n\t\t\tcompDed.sendKeys(selectText);\n\t\t\tThread.sleep(2000);\n\t\t\tcompDed.sendKeys(Keys.DELETE);\n\t\t\t//Thread.sleep(2000);\n\t\t\t//js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",compDed);\n\t\t\tThread.sleep(2000);\n\t\t\t\n\t\t\tdriver.findElement(By.xpath(\"//div[text()='Comprehensive']/parent::legend/following-sibling::div//div//input\")).sendKeys(inputValue.trim());\n\t\t\tThread.sleep(1000);\n\t\t\tcompDed.sendKeys(Keys.ENTER);\n\t\t\t//compDed.sendKeys(Keys.TAB);\n\t\t\t//Thread.sleep(2000);\n\t\t\t\n\t\n\t\t\tactionResult.status = true;\n           \t       actionResult.comments =  \"'Comprehensive Ded Limit has been selected as' : \"+inputValue;\n\n}\ncatch(Exception e) {\n\tactionResult.comments = e.getMessage();\n\t//actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\tactionResult.status = false;\n}\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectComprehensiveDed",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11947,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class CollisionLimit extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tWebElement collision = driver.findElement(By.xpath(\"//div[text()='Collision']\"));\n\t\t\t  String idVaue=collision.getAttribute(\"id\");\n\t\t\t  String str= idVaue.split(\"-\")[0];\n\t\t\t WebElement checkboxElementCollision = driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n\t\t\t String classValueCollision=checkboxElementCollision.getAttribute(\"class\");\n\n\n\t\t\t  if(!classValueCollision.contains(\"x-form-cb-checked\")){\n\t\t\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click(); \n\n\t\t\t}\n\t\t\tWebElement collisionDeductible=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":DeductibleTermInput-inputEl']\"));\n\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tcollisionDeductible.sendKeys(s);\n\t\t\tcollisionDeductible.sendKeys(Keys.DELETE);\n\t\t\tcollisionDeductible.sendKeys(inputValue.trim());\n\t\t\tThread.sleep(2000);\n\t\t\tcollisionDeductible.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000);\n\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "CollisionLimit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11952,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class BroadenedOtherCar extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\tWebElement boc = driver.findElement(By.xpath(\"//div[text()='Broadened Other Car']\"));\n\t\tString idVaue=boc.getAttribute(\"id\");\n\t\tString str= idVaue.split(\"-\")[0];\n\t\tWebElement checkboxElementBOC = driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n\t\tString classValueBOC=checkboxElementBOC.getAttribute(\"class\");\n\n\t\tif(!classValueBOC.contains(\"x-form-cb-checked\")){\n\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n\t\tThread.sleep(3000);\n\t\t}\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "BroadenedOtherCar",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11967,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectUMPDCoverage extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       for(int retry =1; retry<=5; retry++) \r\n        { \r\n       try{\r\n            \r\n            WebDriverWait wait    = new WebDriverWait(driver,20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            WebElement umpd       = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'Uninsured Motorists Property Damage')]/preceding-sibling::div/descendant::input\"))));\r\n            js.executeScript(\"arguments[0].click();\",umpd);\r\n            //umpd.sendKeys(Keys.TAB);\r\n            Thread.sleep(2000);\r\n            actionResult.status   = true;\r\n            actionResult.comments = \"'UMPD Limit has been selected as' : \"+inputValue;\r\n            break;\r\n        }\r\ncatch(Exception e) {\r\n    actionResult.comments = e.getMessage();\r\n    actionResult.status = false;\r\n}}\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectUMPDCoverage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11948,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class CarRental extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\tdriver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);\n\t\tWebDriverWait wait=new WebDriverWait(driver,15);\n\t\tWebElement carRental = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//div[text()='Car Rental']\"))));\n\t\t//driver.findElement(By.xpath(\"//div[text()='Car Rental']\"));\n\t\tString idVaue=carRental.getAttribute(\"id\");\n\t\tString str= idVaue.split(\"-\")[0];\n\t\tWebElement checkboxElementCarRental = driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n\t\tString classValueCarRental=checkboxElementCarRental.getAttribute(\"class\");\n\n\t\tif(!classValueCarRental.contains(\"x-form-cb-checked\")){\n\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n\t\t}\n\t\tThread.sleep(3000);\n\t\tWebElement carRantalLimit=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:PackageTermInput-inputEl']\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tcarRantalLimit.sendKeys(s);\n\t\tcarRantalLimit.sendKeys(Keys.DELETE);\n\t\tcarRantalLimit.sendKeys(inputValue);\n\t\tThread.sleep(2000);\n\t\tcarRantalLimit.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "CarRental",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11949,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ExtraEquipment extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\tWebElement extraEquipment = driver.findElement(By.xpath(\"//div[text()='Extra Equipment']\"));\n\t\t\t  String idVaue=extraEquipment .getAttribute(\"id\");\n\t\t\t  String str= idVaue.split(\"-\")[0];\n\t\t\t WebElement checkboxElementExtraEquipment = driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n\t\t\t String classValueExtraEquipment=checkboxElementExtraEquipment.getAttribute(\"class\");\n\n\n\t\t\t  if(!classValueExtraEquipment.contains(\"x-form-cb-checked\")){\n\t\t\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click(); \n\n\t\t\t}\n\t\t\tThread.sleep(4000);\n \n\t\t\tWebElement extraEquipmentLimit=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:OptionTermInput-inputEl']\"));\n\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\textraEquipmentLimit.sendKeys(s);\n\t\t\textraEquipmentLimit.sendKeys(Keys.DELETE);\n\t\t\textraEquipmentLimit.sendKeys(inputValue.trim());\n\t\n\t\t\tThread.sleep(2000);\n\t\t\textraEquipmentLimit.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000);\n\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ExtraEquipment",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11950,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnhencedTotalLossReplacement extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n     \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\t driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\t\t\t\tWebDriverWait wait = new WebDriverWait(driver,15);\n\t\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//div[text()='Enhanced Total Loss Replacement']\"))));\n\t\n\t\t\t\tWebElement etlr = driver.findElement(By.xpath(\"//div[text()='Enhanced Total Loss Replacement']\"));\n\t\t\t\t\n\t\t\t\tString idVaue=etlr.getAttribute(\"id\");\n\t\t\t\t\n\t\t\t\tString str= idVaue.split(\"-\")[0];\n\t\t\t\t\n\t\t\t\tWebElement checkboxElementETLR = driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n\t\t\t\tString classValueETLR=checkboxElementETLR.getAttribute(\"class\");\n\n\t\t\t\tif(!classValueETLR.contains(\"x-form-cb-checked\")){\n\t\t\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click(); \n\n\t\t\t\t}\n \n\t\t\t\tThread.sleep(2000);\n\n\t\t\t\tactionResult.status = true;\n\t\t\t\tactionResult.comments = \"Executed Successfully\"; \n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnhencedTotalLossReplacement",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11951,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class TranspotationNetworkCompany extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\nfor(int i =1; i<=5; i++)\n{\n\ttry{\n\t\t\t\n\t\tWebElement tnc = driver.findElement(By.xpath(\"//div[text()='Transportation Network Company']\"));\n\t\t\t  String idVaue=tnc.getAttribute(\"id\");\n\t\t\t  String str= idVaue.split(\"-\")[0];\n\t\t\t WebElement checkboxElementTNC = driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n\t\t\t String classValueTNC=checkboxElementTNC.getAttribute(\"class\");\n\n\n\t\t\t  if(!classValueTNC.contains(\"x-form-cb-checked\")){\n\t\t\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click(); \n\n}\n \n\n\n\n      \n\n\nactionResult.status = true;\nactionResult.comments = \"Executed Successfully\"; \n\n\n\n\n\n\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "TranspotationNetworkCompany",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11953,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnhencedExteriorRepairOption extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\ntry{\n\n        String paCoverageTitle=driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")).getText();\n\n        if(paCoverageTitle.contains(\"Florida\"))\n\n          {\n\n\n                      WebElement EnhencedExteriorRepair = driver.findElement(By.xpath(\"//div[text()='Enhanced Exterior Repair Option']\"));\n\t\t\t  String idVaue=EnhencedExteriorRepair.getAttribute(\"id\");\n\t\t\t  String str= idVaue.split(\"-\")[0];\n\t\t\t WebElement checkboxElementEnhencedExteriorRepair = driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n\t\t\t String classValueEnhencedExteriorRepair=checkboxElementEnhencedExteriorRepair.getAttribute(\"class\");\n\n\n\t\t\t  if(!classValueEnhencedExteriorRepair.contains(\"x-form-cb-checked\")){\n\t\t\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click(); \n\n                        }\n \t\n\n       WebElement collisionDeductible=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":DeductibleTermInput-inputEl']\"));\n\n\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\tcollisionDeductible.sendKeys(s);\n\tcollisionDeductible.sendKeys(Keys.DELETE);\n       collisionDeductible.sendKeys(inputValue);\n\tThread.sleep(2000);\n\tcollisionDeductible.sendKeys(Keys.TAB);\n\tThread.sleep(2000);\n\n      \n\n\nactionResult.status = true;\nactionResult.comments = \"Executed Successfully\"; \n }\n\nactionResult.status = true;\nactionResult.comments = \"Enhenced Exterior Repair Option not available\";\n}\ncatch(Exception e){\n\nactionResult.status = false;\n           actionResult.comments =  e.getMessage();\n}\n\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnhencedExteriorRepairOption",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11954,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class LoanLeaseGap extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\ntry{\n\n        String paCoverageTitle=driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:1')]\")).getText();\n\n        if(paCoverageTitle.contains(\"Florida\"))\n\n          {\n\n\n        WebElement LoanLeaseGap = driver.findElement(By.xpath(\"//div[text()='Enhanced Exterior Repair Option']\"));\n\t\t\t  String idVaue=LoanLeaseGap.getAttribute(\"id\");\n\t\t\t  String str= idVaue.split(\"-\")[0];\n\t\t\t WebElement checkboxElementLoanLeaseGap = driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n\t\t\t String classValueLoanLeaseGap=checkboxElementLoanLeaseGap.getAttribute(\"class\");\n\n\n\t\t\t  if(!classValueLoanLeaseGap.contains(\"x-form-cb-checked\")){\n\t\t\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click(); \n\n           }\n \n\n       WebElement collisionDeductible=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":DeductibleTermInput-inputEl']\"));\n\n\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\tcollisionDeductible.sendKeys(s);\n\tcollisionDeductible.sendKeys(Keys.DELETE);\n       collisionDeductible.sendKeys(inputValue);\n\tThread.sleep(2000);\n\tcollisionDeductible.sendKeys(Keys.TAB);\n\tThread.sleep(2000);\n\nactionResult.status = true;\nactionResult.comments = \"Executed Successfully\"; \n\n\n}\n\nactionResult.status = true;\nactionResult.comments = \"Loan Lease gap not available\"; \n}\ncatch(Exception e){\n\nactionResult.status = false;\n           actionResult.comments =  e.getMessage();\n}\n\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "LoanLeaseGap",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9353,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 126737,
        "StepNumber": 1,
        "Description": "VerifyCoveragesScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12239,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126702,
        "StepNumber": 2,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126703,
        "StepNumber": 3,
        "Description": "Click on Exclusions",
        "LocatorTypeId": 7,
        "Locator": "(//span[text()='Exclusions'])[1]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126704,
        "StepNumber": 4,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126694,
        "StepNumber": 5,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12444,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126695,
        "StepNumber": 6,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126705,
        "StepNumber": 7,
        "Description": "Verify Windstorm and Hail Exclusion required due to risk location and/or year built Error is triggerig or not",
        "LocatorTypeId": 7,
        "Locator": "//div[contains(@id,'PKG_HOCoveragesHOEScreen:_msgs')]",
        "ActionId": 23,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126706,
        "StepNumber": 8,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126735,
        "StepNumber": 9,
        "Description": "AllOtherPerils",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Peril",
        "CustomActionId": 12242,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126736,
        "StepNumber": 10,
        "Description": "Peril_Cov",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Peril",
        "CustomActionId": 12244,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126733,
        "StepNumber": 11,
        "Description": "TropicalCyclone",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_TropicalCyclone",
        "CustomActionId": 12240,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126711,
        "StepNumber": 12,
        "Description": "Windstorm_And_Hail_Deductible_Type",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12289,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126734,
        "StepNumber": 13,
        "Description": "WindstromAndHail",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_WindStromAndHail",
        "CustomActionId": 12241,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126726,
        "StepNumber": 14,
        "Description": "HurricaneSelection",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Hurricane",
        "CustomActionId": 12246,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126729,
        "StepNumber": 15,
        "Description": "EnterCoverageEValue",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12256,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126715,
        "StepNumber": 16,
        "Description": "WaterDamageSublimit_Screenshot",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12272,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126708,
        "StepNumber": 17,
        "Description": "RoofCoverages",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12299,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126709,
        "StepNumber": 18,
        "Description": "EnterCoverageWaterDamageSublimitValue",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12298,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126710,
        "StepNumber": 19,
        "Description": "EnterCoverageSinkholeValue",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12297,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126713,
        "StepNumber": 20,
        "Description": "EnterCoverageAValue",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_ADwelling",
        "CustomActionId": 12260,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126712,
        "StepNumber": 21,
        "Description": "EnterCoverageAValue",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_ADwelling",
        "CustomActionId": 12260,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126724,
        "StepNumber": 22,
        "Description": "Enter C Ho4",
        "LocatorTypeId": 7,
        "Locator": "(//input[contains(@id,'DirectTermInput-inputEl')])[1]",
        "ActionId": 43,
        "ParameterName": "OnlyForMILegacy",
        "ParameterValue": "DT_PersonalProperty",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126720,
        "StepNumber": 23,
        "Description": "Enter B Additional Structures",
        "LocatorTypeId": 7,
        "Locator": "(//input[contains(@id,'DirectTermInput-inputEl')])[2]",
        "ActionId": 43,
        "ParameterName": "OnlyForMILegacy1",
        "ParameterValue": "DT_AddtionalStructure",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126716,
        "StepNumber": 24,
        "Description": "Enter B reason ",
        "LocatorTypeId": 7,
        "Locator": "(//input[contains(@id,'CovTermInputSet:StringTermInput')])",
        "ActionId": 43,
        "ParameterName": "OnlyforMI",
        "ParameterValue": "Env ",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126721,
        "StepNumber": 25,
        "Description": "Enter C Personal Property",
        "LocatorTypeId": 7,
        "Locator": "(//input[contains(@id,'DirectTermInput-inputEl')])[3]",
        "ActionId": 43,
        "ParameterName": "OnlyForMILegacy2",
        "ParameterValue": "DT_PersonalProperty",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126722,
        "StepNumber": 26,
        "Description": "Enter D Additional Expenses",
        "LocatorTypeId": 7,
        "Locator": "(//input[contains(@id,'DirectTermInput-inputEl')])[4]",
        "ActionId": 43,
        "ParameterName": "OnlyForMILegacy3",
        "ParameterValue": "DT_AdditionalExpenses",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126730,
        "StepNumber": 27,
        "Description": "EnterPUPCoverage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12333,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126731,
        "StepNumber": 28,
        "Description": "EnterUmbrellaEligibility_PUP",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12334,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126732,
        "StepNumber": 29,
        "Description": "EnterUmbrellaInfo_PUP",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12335,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126707,
        "StepNumber": 30,
        "Description": "EnterUmbrellaInfoWithInputValues",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12336,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126693,
        "StepNumber": 31,
        "Description": "ACG Policy?",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'AutomobileFromACGPolicy_true-boxLabelEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126728,
        "StepNumber": 32,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126717,
        "StepNumber": 33,
        "Description": "Click on ExcludeWindstrom",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'HOPolicyLevelExclusionsAndConditionsCardHomeownersTab-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126719,
        "StepNumber": 34,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126718,
        "StepNumber": 35,
        "Description": "verify  the excludewindstrom",
        "LocatorTypeId": 7,
        "Locator": "//*[text()='Windstorm and Hail Exclusion']",
        "ActionId": 62,
        "ParameterName": null,
        "ParameterValue": "Windstorm and Hail Exclusion",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126725,
        "StepNumber": 36,
        "Description": "ExcludeWindstromAndHail_HO3_FL_Package",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12247,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126727,
        "StepNumber": 37,
        "Description": "ExcludeWindstromAndHail_HO6_FL_Package",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12248,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126714,
        "StepNumber": 38,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126696,
        "StepNumber": 39,
        "Description": "Clear DwellingA value",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'1:CovTermPOCHOEInputSet:DirectTermInput-inputEl')]",
        "ActionId": 8,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126697,
        "StepNumber": 40,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126698,
        "StepNumber": 41,
        "Description": "Click DwellingA field",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'1:CovTermPOCHOEInputSet:DirectTermInput-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126699,
        "StepNumber": 42,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126700,
        "StepNumber": 43,
        "Description": "Enter DwellingA new value",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'1:CovTermPOCHOEInputSet:DirectTermInput-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_DwellingAValue",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126701,
        "StepNumber": 44,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126738,
        "StepNumber": 45,
        "Description": "Next button on Coveerages page",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:Next-btnInnerEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 126723,
        "StepNumber": 46,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12444,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Coverages_Home",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12239,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyCoveragesScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t       wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//*[contains(@id,'HOCoveragesHOEScreen:ttlBar') or contains(@id,'PKG_HOCoveragesHOEScreen:ttlBar')]\"))));\n\n\t\tString actPageTitle = driver.findElement(By.xpath(\"//*[contains(@id,'HOCoveragesHOEScreen:ttlBar') or contains(@id,'PKG_HOCoveragesHOEScreen:ttlBar')]\")).getText();\n\t\tThread.sleep(2000);\n\t\tif(actPageTitle.equals(\"Coverages\") || actPageTitle.equals(\"Home Coverages\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Coverages' screen successfully\";\n\t\t}\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyCoveragesScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12242,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AllOtherPerils extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n\r\n\r\n    //WebElement peril=driver.findElement(By.id(\"SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:HOCoveragesHOEScreen:HOMainCoveragesHOEPanelSet:coveragePatterIterId1:0:HOCoverageInputSet:CovPatternInputGroup:0:CovTermPOCHOEInputSet:OptionTermInput-inputEl\"));\r\n    WebElement peril = driver.findElement(By.xpath(\"//input[contains(@id,'HOCoverageInputSet:CovPatternInputGroup:0:CovTermPOCHOEInputSet:OptionTermInput-inputEl')]\"));\r\n    String s         = Keys.chord(Keys.CONTROL,\"a\");\r\n    peril.sendKeys(s);\r\n    peril.sendKeys(Keys.DELETE);\r\n       peril.sendKeys(inputValue);\r\n    Thread.sleep(1000);\r\n    //peril.sendKeys(Keys.ENTER);\r\n    peril.sendKeys(Keys.TAB);\r\n    Thread.sleep(2000);\r\n\r\n\r\nactionResult.status = true;\r\nactionResult.comments = \"Executed Successfully\"; \r\n\r\n\r\n}\r\ncatch(Exception e){\r\n\r\nactionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n}\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AllOtherPerils",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12244,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Peril_Cov extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\n\t\t\tWebElement limit=driver.findElement(By.id(\"SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:HOCoveragesHOEScreen:HOMainCoveragesHOEPanelSet:coveragePatterIterId1:0:HOCoverageInputSet:CovPatternInputGroup:0:CovTermPOCHOEInputSet:OptionTermInput-inputEl\"));\n\nlimit.click();\n\t\n\tThread.sleep(1000);\nif(inputValue.trim().contains(\"1000\")){\nlimit.sendKeys(Keys.ARROW_UP);\nThread.sleep(500);\nlimit.sendKeys(Keys.ARROW_UP);\nThread.sleep(500);\nlimit.sendKeys(Keys.ARROW_UP);\nlimit.sendKeys(Keys.ENTER);\n\tThread.sleep(2000);\n}else if(inputValue.trim().contains(\"1500\")){\nlimit.sendKeys(Keys.ARROW_DOWN);\nlimit.sendKeys(Keys.ENTER);\n}else if(inputValue.trim().contains(\"2000\")){\n\tThread.sleep(2000);\nlimit.sendKeys(Keys.ARROW_DOWN);\nThread.sleep(500);\nlimit.sendKeys(Keys.ARROW_DOWN);\nlimit.sendKeys(Keys.ENTER);\n\tThread.sleep(2000);\n}else if(inputValue.trim().contains(\"2500\")){\nlimit.sendKeys(Keys.ARROW_DOWN);\nThread.sleep(500);\nlimit.sendKeys(Keys.ARROW_DOWN);\nThread.sleep(500);\nlimit.sendKeys(Keys.ARROW_DOWN);\nlimit.sendKeys(Keys.ENTER);\n\tThread.sleep(2000);\n}else{\nlimit.sendKeys(Keys.ARROW_DOWN);\nlimit.sendKeys(Keys.ENTER);\n\tThread.sleep(2000);\n}\nactionResult.status = true;\n           actionResult.comments =  \"Peril Cover is selected with limit \"+inputValue;\n\t\t\n\n}\ncatch(Exception e){\n\nactionResult.status = false;\n           actionResult.comments =  e.getMessage();\n}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Peril_Cov",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12240,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class TropicalCyclone extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n\r\n\r\n    WebDriverWait wait = new WebDriverWait(driver,50);\r\n    wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(text(),'Tropical Cyclone')]/parent::label/parent::div/descendant::input\"))));\r\n    WebElement cyclone = driver.findElement(By.xpath(\"//span[contains(text(),'Tropical Cyclone')]/parent::label/parent::div/descendant::input\"));\r\n    String s                   = Keys.chord(Keys.CONTROL,\"a\");\r\n    cyclone.sendKeys(s);\r\n    cyclone.sendKeys(Keys.DELETE);\r\n    cyclone.sendKeys(inputValue);\r\n    Thread.sleep(2000);\r\n    //cyclone.sendKeys(Keys.ENTER);\r\n    cyclone.sendKeys(Keys.TAB);\r\n    Thread.sleep(2000);\r\n\r\n\r\nactionResult.status = true;\r\nactionResult.comments = \"Executed Successfully\"; \r\n\r\n\r\n}\r\ncatch(Exception e){\r\n\r\nactionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n}\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "TropicalCyclone",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12289,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Windstorm_And_Hail_Deductible_Type extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        Thread.sleep(400);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"(//*[contains(@name,'CovTermPOCHOEInputSet')])[2]\")));\r\n        WebElement SelectOption = driver.findElement(By.xpath(\"(//*[contains(@name,'CovTermPOCHOEInputSet')])[2]\"));\r\n        SelectOption.click();\r\n\r\n        WebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\r\n        typeinput.click();\r\n        Thread.sleep(2000);\r\n\r\n        /*String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        interestType.sendKeys(s);\r\n        interestType.sendKeys(Keys.DELETE);\r\n        interestType.sendKeys(inputValue);\r\n        Thread.sleep(500);\r\n        interestType.sendKeys(Keys.ENTER);\r\n        interestType.sendKeys(Keys.TAB);*/\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";  \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n      }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Windstorm_And_Hail_Deductible_Type",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12241,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class WindstromAndHail extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry{\n\n\n\tWebElement windStrom=driver.findElement(By.xpath(\"//input[contains(@id,'CovPatternInputGroup:3:CovTermPOCHOEInputSet:OptionTermInput-inputEl')]\"));\n\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\twindStrom.sendKeys(s);\n\twindStrom.sendKeys(Keys.DELETE);\n       windStrom.sendKeys(inputValue);\n\tThread.sleep(2000);\n\twindStrom.sendKeys(Keys.ENTER);\n\twindStrom.sendKeys(Keys.TAB);\n\tThread.sleep(2000);\n\n\nactionResult.status = true;\nactionResult.comments = \"Executed Successfully\"; \n\n\n}\ncatch(Exception e){\n\nactionResult.status = false;\n           actionResult.comments =  e.getMessage();\n}\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "WindstromAndHail",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12246,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException; \nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType; \nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class HurricaneSelection extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\ttry{\n\t\t\t\n\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\tWebDriverWait wait = new WebDriverWait(driver,20);\n\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\tActions act = new Actions(driver);\n\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\n\tfor(int retry=0; retry<=2;retry++){\n\t\ttry{\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//input[contains(@id,'OptionTermInput-inputEl')])[4]\"))));\n\t\t\tWebElement hurricaneEle = driver.findElement(By.xpath(\"(//input[contains(@id,'OptionTermInput-inputEl')])[4]\"));\n\t\t\tjs.executeScript(\"arguments[0].click();\",hurricaneEle);\n\t\t\thurricaneEle.sendKeys(selectText);\n\t\t\tact.moveToElement(hurricaneEle).sendKeys(Keys.DELETE).build().perform();\n\t\t\t//Thread.sleep(1000);\n\t\t\tjs.executeScript(\"arguments[0].value='\"+inputValue+\"'\",hurricaneEle);\n\t\t\t//Thread.sleep(2000);\n\t\t\tact.moveToElement(hurricaneEle).sendKeys(Keys.TAB).build().perform();\n\t\t\tbreak;\n\t\t\t}\n\t\tcatch(Exception e) \n\t\t\t{\n\t\t\tactionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\n\t\t\tactionResult.status = false;\n\t\t\t}\n\t\t}\t\t\t\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Gender has been selected as :\"+inputValue;\n\t\n\t}\n\tcatch(Exception e){\n\t\tactionResult.status = false;\n        \tactionResult.comments =  e.getMessage();\n\n\t}\n\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "HurricaneSelection",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12256,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnterCoverageEValue extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t\t{\t\n\t\t\t\ttry{\n\t\t\t\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\t\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\t\t\tActions act = new Actions(driver);\n\t\t\t\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\t\t\tWebElement valueElemt = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'E - Personal Liability')]/ancestor::fieldset/descendant::input[contains(@id,'OptionTermInput-inputEl')]\"))));\n\t\t\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", valueElemt);\n\t\t\t\t\tjs.executeScript(\"arguments[0].click();\",valueElemt);\n\t\t\t\t\tWebElement dropdownValueEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\n\t\t\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", dropdownValueEle);\n\t\t\t\t\tjs.executeScript(\"arguments[0].click();\",dropdownValueEle);\n\n\t\t\t\t\tact.moveToElement(valueElemt).sendKeys(Keys.TAB).build().perform();\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\tactionResult.status = true;\n           \t\t\t\tactionResult.comments =  \"Changed the values\";\n\t\t\t\t\tbreak;\n\t\t\t\t\t}catch(Exception e) {\n\t\t\t\t\t\tactionResult.comments =\"Exception at Value Element\"+e.getMessage();\n\t\t\t\t\t\tactionResult.status = false;\n\n\t\t\t\t\t}\n\t\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterCoverageEValue",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12272,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.temporal.ChronoUnit;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.Locale;\r\nimport junit.framework.Assert;\r\nimport java.lang.reflect.InvocationTargetException;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class WaterDamageSublimit_Screenshot extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try \r\n    {   \r\n            \r\n        WebDriverWait wait = new WebDriverWait(driver,30);\r\n        JavascriptExecutor js=(JavascriptExecutor) driver;\r\n\r\n        WebElement scroll = driver.findElement(By.xpath(\"//*[text()='Water Damage Sublimit']\"));\r\n        \r\n        js.executeScript(\"arguments[0].scrollIntoView(true);\", scroll);\r\n        js.executeScript(\"arguments[0].style.border='2px solid red'\", scroll);\r\n\r\n\r\n        Thread.sleep(1000);\r\n\r\n\r\n        actionResult.comments = \"Navigated to Water Damage Sublimit \";\r\n        actionResult.status   = true;\r\n                            \r\n    }       \r\n        \r\n    catch(Exception e) \r\n    {\r\n        actionResult.comments =e.getMessage();\r\n        actionResult.status = false;\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n\r\n\r\n\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "WaterDamageSublimit_Screenshot",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12299,
    "Description": "Roof Surfaces Loss Settlement,Roof Deductible Endorsement",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class RoofCoverages extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n        {   \r\n                try{\r\n                    WebDriverWait wait = new WebDriverWait(driver,30);\r\n                    JavascriptExecutor js = (JavascriptExecutor)driver;\r\n                    Actions act = new Actions(driver);\r\n                    String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n                    WebElement chkBoxElemt = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'Roof Surfaces Loss Settlement')]/ancestor::fieldset/descendant::input[contains(@id,'checkbox')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", chkBoxElemt);\r\n                    js.executeScript(\"arguments[0].click();\",chkBoxElemt);\r\n                    Thread.sleep(2000);\r\n                    \r\n                    WebElement chkBoxElemt1 = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'Roof Deductible Endorsement')]/ancestor::fieldset/descendant::input[contains(@id,'checkbox')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", chkBoxElemt1);\r\n                    Thread.sleep(1000);\r\n                    js.executeScript(\"arguments[0].click();\",chkBoxElemt1);\r\n                    \r\n                    //WebElement dropDownValueElemt = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n                    //js.executeScript(\"arguments[0].style.border='2px solid red'\", dropDownValueElemt);\r\n                    //js.executeScript(\"arguments[0].click();\",dropDownValueElemt);\r\n                    \r\n                    Thread.sleep(1000);\r\n                    actionResult.status = true;\r\n                        actionResult.comments =  \"Executed Successfully\";\r\n                    break;\r\n                    }catch(Exception e) {\r\n                        actionResult.comments =\"Exception at Value Element\"+e.getMessage();\r\n                        actionResult.status = false;\r\n\r\n                    }\r\n        }\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "RoofCoverages",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12298,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterCoverageWaterDamageSublimitValue extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n        {   \r\n                try{\r\n                    WebDriverWait wait = new WebDriverWait(driver,30);\r\n                    JavascriptExecutor js = (JavascriptExecutor)driver;\r\n                    Actions act = new Actions(driver);\r\n                    String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n                    WebElement chkBoxElemt = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'Water Damage Sublimit')]/ancestor::fieldset/descendant::input[contains(@id,'checkbox')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", chkBoxElemt);\r\n                    js.executeScript(\"arguments[0].click();\",chkBoxElemt);\r\n\r\n                    WebElement valueElemt = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'Water Damage Sublimit')]/ancestor::fieldset/descendant::input[contains(@id,'OptionTermInput-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", valueElemt);\r\n                    js.executeScript(\"arguments[0].click();\",valueElemt);\r\n                    \r\n                    WebElement dropDownValueElemt = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", dropDownValueElemt);\r\n                    js.executeScript(\"arguments[0].click();\",dropDownValueElemt);\r\n                    \r\n                    Thread.sleep(1000);\r\n                    actionResult.status = true;\r\n                        actionResult.comments =  \"Executed Successfully\";\r\n                    break;\r\n                    }catch(Exception e) {\r\n                        actionResult.comments =\"Exception at Value Element\"+e.getMessage();\r\n                        actionResult.status = false;\r\n\r\n                    }\r\n        }\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterCoverageWaterDamageSublimitValue",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12297,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterCoverageSinkholeValue extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n        {   \r\n                try{\r\n                    WebDriverWait wait     = new WebDriverWait(driver,30);\r\n                    JavascriptExecutor js  = (JavascriptExecutor)driver;\r\n                    Actions act            = new Actions(driver);\r\n                    String selectText      = Keys.chord(Keys.CONTROL,\"a\");\r\n                    WebElement chkBoxElemt = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'Sinkhole')]/ancestor::fieldset/descendant::input[contains(@id,'checkbox')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", chkBoxElemt);\r\n                    js.executeScript(\"arguments[0].click();\",chkBoxElemt);\r\n\r\n                    WebElement valueElemt = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'Sinkhole')]/ancestor::fieldset/descendant::input[contains(@id,'TypekeyTermInput-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", valueElemt);\r\n                    js.executeScript(\"arguments[0].click();\",valueElemt);\r\n                    \r\n                    WebElement dropDownValueElemt = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", dropDownValueElemt);\r\n                    js.executeScript(\"arguments[0].click();\",dropDownValueElemt);\r\n                    \r\n                    Thread.sleep(1000);\r\n                    actionResult.status = true;\r\n                        actionResult.comments =  \"Executed Successfully\";\r\n                    break;\r\n                    }catch(Exception e) {\r\n                        actionResult.comments =\"Exception at Value Element\"+e.getMessage();\r\n                        actionResult.status = false;\r\n\r\n                    }\r\n        }\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterCoverageSinkholeValue",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12260,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnterCoverageAValue extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n     \n\tfor(int i =1; i<=5; i++) \n\t\t{\t\n\t\t\t\ttry{\n\t\t\t\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\t\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\t\t\tActions act = new Actions(driver);\n\t\t\t\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\t\t\tWebElement valueElemt = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'A-Dwelling')]/ancestor::fieldset/descendant::input[contains(@id,'DirectTermInput-inputEl')]\"))));\n\t\t\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", valueElemt);\n\t\t\t\t\tvalueElemt.sendKeys(selectText);\n\t\t\t\t\tact.moveToElement(valueElemt).sendKeys(Keys.DELETE).build().perform();\n\t\t\t\t\tjs.executeScript(\"arguments[0].value='\"+inputValue+\"'\",valueElemt);\n\t\t\t\t\tact.moveToElement(valueElemt).sendKeys(Keys.TAB).build().perform();\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\tactionResult.status = true;\n           \t\t\t\tactionResult.comments =  \"Changed the values\";\n\t\t\t\t\tbreak;\n\t\t\t\t\t}catch(Exception e) {\n\t\t\t\t\t\tactionResult.comments =\"Exception at Value Element\"+e.getMessage();\n\t\t\t\t\t\tactionResult.status = false;\n\n\t\t\t\t\t}\n\t\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterCoverageAValue",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12333,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterPUPCoverage extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        for(int i =1; i<=5; i++) \r\n        {   \r\n                try{\r\n                    WebDriverWait wait = new WebDriverWait(driver,30);\r\n                    JavascriptExecutor js = (JavascriptExecutor)driver;\r\n                    Actions act = new Actions(driver);\r\n                    String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n                    WebElement valueElemt = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HOMainCoveragesHOEPanelSet:hasPUP-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", valueElemt);\r\n                    js.executeScript(\"arguments[0].click();\",valueElemt);\r\n                    WebElement dropdownValueEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", dropdownValueEle);\r\n                    js.executeScript(\"arguments[0].click();\",dropdownValueEle);\r\n                    act.moveToElement(valueElemt).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(1000);\r\n                    if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n                       \r\n                    try{\r\n                        WebElement liabilityCov = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'Umbrella Liability Cov')]/parent::legend/following-sibling::div/descendant::input\"))));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", liabilityCov);\r\n                        js.executeScript(\"arguments[0].click();\",liabilityCov);\r\n                        WebElement liabilityCovValue = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'1')]\"))));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", liabilityCovValue);\r\n                        js.executeScript(\"arguments[0].click();\",liabilityCovValue);\r\n                        act.moveToElement(liabilityCov).sendKeys(Keys.TAB).build().perform();\r\n                        actionResult.status = true;\r\n                    Thread.sleep(1000);\r\n                    }catch(Exception ea) {\r\n                        actionResult.comments = \"Exception at Value Element\"+ea.getMessage();\r\n                        actionResult.status   = false;\r\n\r\n                    }\r\n                       \r\n                    try{\r\n                        WebElement motoristCov = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'Uninsured/UnderInsured Motorist Cov')]/parent::legend/following-sibling::div/descendant::input\"))));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", motoristCov);\r\n                        js.executeScript(\"arguments[0].click();\",motoristCov);\r\n                        WebElement motoristCovValue = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'Reject UM/UIM')]\"))));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", motoristCovValue);\r\n                        js.executeScript(\"arguments[0].click();\",motoristCovValue);\r\n                        act.moveToElement(motoristCov).sendKeys(Keys.TAB).build().perform();\r\n                        actionResult.status = true;\r\n                    Thread.sleep(1000);\r\n                    }catch(Exception eb) {\r\n                        actionResult.comments = \"Exception at Value Element\"+eb.getMessage();\r\n                        actionResult.status   = false;\r\n                    }\r\n                    }else{\r\n                        System.out.println(\"NO PUP Coverage Opted\");\r\n                    }\r\n\r\n                    Thread.sleep(1000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \"Executed Successfully\";\r\n                    break;\r\n                    }catch(Exception e) {\r\n                        actionResult.comments =\"Exception at Value Element\"+e.getMessage();\r\n                        actionResult.status = false;\r\n\r\n                    }\r\n        }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterPUPCoverage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12334,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterUmbrellaEligibility_PUP extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       \r\n                try{\r\n                    WebDriverWait wait = new WebDriverWait(driver,30);\r\n                    JavascriptExecutor js = (JavascriptExecutor)driver;\r\n                    Actions act = new Actions(driver);\r\n                    String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n                    \r\n                    WebElement umbrellaEligTab = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'UmbrellaEligibilityTab-btnInnerEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", umbrellaEligTab);\r\n                    js.executeScript(\"arguments[0].click();\",umbrellaEligTab);\r\n                    Thread.sleep(500);\r\n                    \r\n                    List<WebElement> noOptions =  driver.findElements(By.xpath(\"//input[contains(@inputvalue,'false')]\"));\r\n                    int numberOfOptions = noOptions.size();\r\n                    System.out.println(\"No Of Options: \"+numberOfOptions);\r\n                        \r\n                    for(int j =0; j<numberOfOptions; j++) \r\n                        {\r\n                        int g                   = j+1;\r\n                        Thread.sleep(1500);\r\n                        WebElement noOptionsEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//input[contains(@inputvalue,'false')])[\"+g+\"]\"))));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", noOptionsEle);\r\n                        js.executeScript(\"arguments[0].click();\",noOptionsEle);\r\n                        Thread.sleep(1500);\r\n                        }\r\n                           \r\n                    Thread.sleep(1000);\r\n                    WebElement recreational = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'recreational vehicle')]/parent::td/following-sibling::td/descendant::input[contains(@inputvalue,'true')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", recreational);\r\n                    js.executeScript(\"arguments[0].click();\",recreational);\r\n                    Thread.sleep(500);\r\n                    WebElement watercraft = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'watercraft')]/parent::td/following-sibling::td/descendant::input[contains(@inputvalue,'true')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", watercraft);\r\n                    js.executeScript(\"arguments[0].click();\",watercraft);\r\n                    Thread.sleep(1000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \"Executed Successfully\";\r\n                    \r\n                    }catch(Exception e) {\r\n                        actionResult.comments =\"Exception at Value Element\"+e.getMessage();\r\n                        actionResult.status = false;\r\n\r\n                    }\r\n        \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterUmbrellaEligibility_PUP",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12335,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterUmbrellaInfo_PUP extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n            for(int i =1; i<=5; i++) \r\n        {   \r\n                try{\r\n                    WebDriverWait wait = new WebDriverWait(driver,30);\r\n                    JavascriptExecutor js = (JavascriptExecutor)driver;\r\n                    Actions act = new Actions(driver);\r\n                    String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n                    Thread.sleep(1000);\r\n                    WebElement umbrellaInfoTab = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'UmbrellaInfoTab-btnInnerEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", umbrellaInfoTab);\r\n                    js.executeScript(\"arguments[0].click();\",umbrellaInfoTab);\r\n                    Thread.sleep(1000);\r\n                    WebElement majorViolation = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'MajorViolation_false-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", majorViolation);\r\n                    js.executeScript(\"arguments[0].click();\",majorViolation);\r\n                    Thread.sleep(1000);\r\n                    WebElement minorAtFoaultViolation = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'MinorAtFaultViolation_false-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", minorAtFoaultViolation);\r\n                    js.executeScript(\"arguments[0].click();\",minorAtFoaultViolation);\r\n                    Thread.sleep(1000);\r\n                    WebElement noOfminorViolation = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(@id,'NumberOfMinorViolations-trigger-picker')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", noOfminorViolation);\r\n                    js.executeScript(\"arguments[0].click();\",noOfminorViolation);\r\n                    Thread.sleep(1000);\r\n                    WebElement dropdownValueEle = driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'0')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", dropdownValueEle);\r\n                    js.executeScript(\"arguments[0].click();\",dropdownValueEle);\r\n                    act.moveToElement(noOfminorViolation).sendKeys(Keys.TAB).build().perform();\r\n                    act.moveToElement(noOfminorViolation).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(3700);\r\n                    WebElement noAtFaultViolation = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(@id,'NumberAtFaultAccidents-trigger-picker')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", noAtFaultViolation);\r\n                    js.executeScript(\"arguments[0].click();\",noAtFaultViolation);\r\n                    Thread.sleep(3700);\r\n                    WebElement dropdownValueElent = driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'0')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", dropdownValueElent);\r\n                    js.executeScript(\"arguments[0].click();\",dropdownValueElent);\r\n                    act.moveToElement(noAtFaultViolation).sendKeys(Keys.TAB).build().perform();\r\n                    act.moveToElement(noAtFaultViolation).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(3000);\r\n                    WebElement numberOfAutomobiles = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(@id,'NumberOfAutomobiles-trigger-picker')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", numberOfAutomobiles);\r\n                    js.executeScript(\"arguments[0].click();\",numberOfAutomobiles);\r\n                    Thread.sleep(3000);\r\n                    WebElement dropdownEle = driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'0')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", dropdownEle);\r\n                    js.executeScript(\"arguments[0].click();\",dropdownEle);\r\n                    act.moveToElement(numberOfAutomobiles).sendKeys(Keys.TAB).build().perform();\r\n                    \r\n                    /***WebElement acgPolicy = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'AutomobileFromACGPolicy_true-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", acgPolicy);\r\n                    js.executeScript(\"arguments[0].click();\",acgPolicy);***/\r\n                    Thread.sleep(3000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \"Executed Successfully\";\r\n                    break;\r\n                    }catch(Exception e) {\r\n                        actionResult.comments =\"Exception at Value Element\"+e.getMessage();\r\n                        actionResult.status = false;\r\n\r\n                    }\r\n        }\r\n      \r\n       \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterUmbrellaInfo_PUP",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12336,
    "Description": "noOfminorViolationValue AND noAtFaultViolationValue AND highestnoOfminorViolationValue AND numberOfAutomobilesValue",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterUmbrellaInfoWithInputValues extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n           for(int i =1; i<=5; i++) \r\n        {   \r\n                try{\r\n                    WebDriverWait wait = new WebDriverWait(driver,30);\r\n                    JavascriptExecutor js = (JavascriptExecutor)driver;\r\n                    Actions act = new Actions(driver);\r\n                    String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n                    String[] CoveragesParams = inputValue.split(\" AND \");\r\n                    String noOfminorViolationValue = CoveragesParams[0].toString();\r\n                    String noAtFaultViolationValue = CoveragesParams[1].toString();\r\n                    String highestnoOfminorViolationValue = CoveragesParams[2].toString();\r\n                    String numberOfAutomobilesValue = CoveragesParams[3].toString();\r\n                    Thread.sleep(1000);\r\n                    WebElement umbrellaInfoTab = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'UmbrellaInfoTab-btnInnerEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", umbrellaInfoTab);\r\n                    js.executeScript(\"arguments[0].click();\",umbrellaInfoTab);\r\n                    Thread.sleep(1000);\r\n                    WebElement majorViolation = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'MajorViolation_false-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", majorViolation);\r\n                    js.executeScript(\"arguments[0].click();\",majorViolation);\r\n                    Thread.sleep(1000);\r\n                    WebElement minorAtFoaultViolation = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'MinorAtFaultViolation_false-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", minorAtFoaultViolation);\r\n                    js.executeScript(\"arguments[0].click();\",minorAtFoaultViolation);\r\n                    Thread.sleep(1000);\r\n                    WebElement noOfminorViolation = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(@id,':NumberOfMinorViolations-trigger-picker')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", noOfminorViolation);\r\n                    js.executeScript(\"arguments[0].click();\",noOfminorViolation);\r\n                    Thread.sleep(1000);\r\n                    WebElement dropdownValueEle = driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+noOfminorViolationValue+\"')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", dropdownValueEle);\r\n                    js.executeScript(\"arguments[0].click();\",dropdownValueEle);\r\n                    act.moveToElement(noOfminorViolation).sendKeys(Keys.TAB).build().perform();\r\n                    act.moveToElement(noOfminorViolation).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(3700);\r\n                    WebElement noAtFaultViolation = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(@id,'NumberAtFaultAccidents-trigger-picker')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", noAtFaultViolation);\r\n                    js.executeScript(\"arguments[0].click();\",noAtFaultViolation);\r\n                    Thread.sleep(3700);\r\n                    WebElement dropdownValueElent = driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+noAtFaultViolationValue+\"')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", dropdownValueElent);\r\n                    js.executeScript(\"arguments[0].click();\",dropdownValueElent);\r\n                    act.moveToElement(noAtFaultViolation).sendKeys(Keys.TAB).build().perform();\r\n                    act.moveToElement(noAtFaultViolation).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(3000);\r\n                    WebElement highestnoOfminorViolation = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(@id,'HighestNumberOfMinorViolations-trigger-picker')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", highestnoOfminorViolation);\r\n                    js.executeScript(\"arguments[0].click();\",highestnoOfminorViolation);\r\n                    Thread.sleep(1000);\r\n                    WebElement dropdownValueElemt = driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+highestnoOfminorViolationValue+\"')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", dropdownValueElemt);\r\n                    js.executeScript(\"arguments[0].click();\",dropdownValueElemt);\r\n                    act.moveToElement(highestnoOfminorViolation).sendKeys(Keys.TAB).build().perform();\r\n                    act.moveToElement(highestnoOfminorViolation).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(3700);\r\n                    WebElement numberOfAutomobiles = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(@id,'NumberOfAutomobiles-trigger-picker')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", numberOfAutomobiles);\r\n                    js.executeScript(\"arguments[0].click();\",numberOfAutomobiles);\r\n                    Thread.sleep(3000);\r\n                    WebElement dropdownEle = driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+numberOfAutomobilesValue+\"')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", dropdownEle);\r\n                    js.executeScript(\"arguments[0].click();\",dropdownEle);\r\n                    act.moveToElement(numberOfAutomobiles).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(3000);\r\n                    //Only used if numberOfAutomobilesValue is greater than 0\r\n                    WebElement acgPolicy = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'AutomobileFromACGPolicy_true-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", acgPolicy);\r\n                    //js.executeScript(\"arguments[0].click();\",acgPolicy);\r\n                    acgPolicy.click();\r\n                    Thread.sleep(3000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \"Executed Successfully\";\r\n                    break;\r\n                    }catch(Exception e) {\r\n                        actionResult.comments =\"Exception at Value Element\"+e.getMessage();\r\n                        actionResult.status = false;\r\n\r\n                    }\r\n        }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterUmbrellaInfoWithInputValues",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12247,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ExcludeWindstromAndHail_HO3_FL_Package extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        WebDriverWait wait = new WebDriverWait(driver,50);\r\nJavascriptExecutor js=(JavascriptExecutor)driver;\r\n\r\ntry{\r\n        wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'HOPolicyLevelExclusionsAndConditionsCardHomeownersTab-btnInnerEl')]\"))));\r\n        WebElement clickExclusion = driver.findElement(By.xpath(\"//span[contains(@id,'HOPolicyLevelExclusionsAndConditionsCardHomeownersTab-btnInnerEl')]\"));\r\n        js.executeScript(\"arguments[0].click();\", clickExclusion);\r\n        \r\n        Thread.sleep(2500);\r\n        wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//div[contains(text(),'Windstorm and Hail Exclusion')]/preceding-sibling::div[contains(@class,'checked')]\"))));\r\n        actionResult.comments =  \"Excluded Already\";\r\n}\r\ncatch(Exception exc){\r\n    \r\n    try{\r\n        Thread.sleep(2500);\r\n        wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//div[contains(text(),'Windstorm and Hail Exclusion')]/preceding-sibling::div/descendant::input\"))));\r\n        WebElement clickWindstromAndhail = driver.findElement(By.xpath(\"//div[contains(text(),'Windstorm and Hail Exclusion')]/preceding-sibling::div/descendant::input\"));\r\n        js.executeScript(\"arguments[0].click();\", clickWindstromAndhail);\r\n        \r\n        Thread.sleep(1500);\r\n        wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'HOPolicyLevelCoveragesIDTab-btnInnerEl')]\"))));\r\n        WebElement clickCoverages = driver.findElement(By.xpath(\"//span[contains(@id,'HOPolicyLevelCoveragesIDTab-btnInnerEl')]\"));\r\n        js.executeScript(\"arguments[0].click();\", clickCoverages);\r\n        \r\n        Thread.sleep(1500);\r\n        try{\r\n        wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[text()='Clear']\"))));\r\n        WebElement clickClear = driver.findElement(By.xpath(\"//span[text()='Clear']\"));\r\n        js.executeScript(\"arguments[0].click();\", clickClear);\r\n        }catch(Exception a){\r\n            actionResult.comments = a.getMessage();\r\n        }\r\n        Thread.sleep(2500);\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"Executed successfully\";       \r\n        \r\n        }\r\n        catch(Exception e){\r\n           actionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n        }\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"Excluded Successfully\";\r\n}\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ExcludeWindstromAndHail_HO3_FL_Package",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12248,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ExcludeWindstromAndHail_HO6_FL_Package extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\ttry{\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,50);\n\t\tJavascriptExecutor js=(JavascriptExecutor)driver;\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'HOPolicyLevelExclusionsAndConditionsCardHomeownersTab-btnInnerEl')]\"))));\n\t\tWebElement clickExclusion = driver.findElement(By.xpath(\"//span[contains(@id,'HOPolicyLevelExclusionsAndConditionsCardHomeownersTab-btnInnerEl')]\"));\n\t\tjs.executeScript(\"arguments[0].click();\", clickExclusion);\n\t\t\n\t\tThread.sleep(2500);\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"(//input[contains(@id,'CovPatternInputGroup:_checkbox')])[1]\"))));\n\t\tWebElement clickWindstromAndhail = driver.findElement(By.xpath(\"(//input[contains(@id,'CovPatternInputGroup:_checkbox')])[1]\"));\n\t\tjs.executeScript(\"arguments[0].click();\", clickWindstromAndhail);\n\t\t\n\t\tThread.sleep(1500);\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'HOPolicyLevelCoveragesIDTab-btnInnerEl')]\"))));\n\t\tWebElement clickCoverages = driver.findElement(By.xpath(\"//span[contains(@id,'HOPolicyLevelCoveragesIDTab-btnInnerEl')]\"));\n\t\tjs.executeScript(\"arguments[0].click();\", clickCoverages);\n\t\t\n\t\tThread.sleep(1500);\n\t\t\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[text()='Clear']\"))));\n\t\tWebElement clickClear = driver.findElement(By.xpath(\"//span[text()='Clear']\"));\n\t\tjs.executeScript(\"arguments[0].click();\", clickClear);\n\t\t\n\t\tThread.sleep(2500);\n\t\tactionResult.status = true;\n\t\tactionResult.comments =  \"Executed successfully\";\t\t\n     \t\n\t\t}\n\t\tcatch(Exception e){\n           actionResult.status = false;\n           actionResult.comments =  e.getMessage();\n\t\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ExcludeWindstromAndHail_HO6_FL_Package",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9433,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 128194,
        "StepNumber": 1,
        "Description": "VerifyScheduledPersonalPropertyScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12339,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128195,
        "StepNumber": 2,
        "Description": "Next on Scheduled Personal Property",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:Next-btnInnerEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Scheduled_Personal_Property_Home",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12339,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyScheduledPersonalPropertyScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t       wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'ScheduledPersonalProperty_AcgScreen:ttlBar')]\"))));\n\n\t\t\tString actPageTitle = driver.findElement(By.xpath(\"//span[contains(@id,'ScheduledPersonalProperty_AcgScreen:ttlBar')]\")).getText();\n\t\tThread.sleep(2000);\n\t\tif(actPageTitle.equals(\"Scheduled Personal Property\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to Scheduled Personal Property screen successfully\";\n\t\t}\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyScheduledPersonalPropertyScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9432,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 128191,
        "StepNumber": 1,
        "Description": "VerifyRiskAnalysisScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11982,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128192,
        "StepNumber": 2,
        "Description": "VerifyUWIssuesTabOpened",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11983,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128193,
        "StepNumber": 3,
        "Description": "VerifyNoIssuesAvailableOnRiskAnalysisScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11984,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128190,
        "StepNumber": 4,
        "Description": "ClickOnNextBtnOnRiskAnalysisScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'SubmissionWizard:Next')]",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 10006,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Risk_Analysis",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11982,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyRiskAnalysisScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++)\n{\n\ttry{\n\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'Job_RiskAnalysisScreen:0')]\")));\n\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'Job_RiskAnalysisScreen:0')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Risk Analysis\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Risk Analysis' screen successfully\";\n\t\t}\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyRiskAnalysisScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11983,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyUWIssuesTabOpened extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry{\n\t\tWebElement UWIssuesTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'RiskAnalysisCV:EvaluationIssuesCardTab')]\"));\n\t\tString getUWIssuesTabIndex = UWIssuesTabEle .getAttribute(\"tabindex\");\n\t\tif(getUWIssuesTabIndex.equals(\"0\")){\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"User is on 'UW Issues Tab' in Drivers screen\";\n\t\t}\n\t\telse{\n           \t\tactionResult.status = false;\n\t\t\tactionResult.comments =  \" 'UW Issues Tab' is not opened\";\n\t\t}\n\t}   \n\tcatch(Exception e){\n\t\tString exceptionMsg = e.getMessage();\n           \tactionResult.status = false;\n\t\tactionResult.comments =  \" 'Coverage Details Tab' is not available in Drivers screen: \"+exceptionMsg;\n\t}\n\n\n\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyUWIssuesTabOpened",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11984,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyNoIssuesAvailableOnRiskAnalysisScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry{\n\t\tWebElement NoIssuesMsgEle = driver.findElement(By.xpath(\"//label[contains(@id,'NoIssuesMessage')]\"));\n\t\tString actMsgText = NoIssuesMsgEle.getText();\n\t\tif(actMsgText.equals(\"No issues identified at this time.\")){\n\t\t       actionResult.status = true;\n           \t\tactionResult.comments =  \"Executed Successfully\";\n\t\t}\n\t}\n\tcatch(Exception e){\n\t\tactionResult.status = false;\n           \tactionResult.comments =  e.getMessage();\n\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyNoIssuesAvailableOnRiskAnalysisScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10006,
    "ProjectId": 99,
    "LocatorType": 7,
    "Locator": "//a[contains(@id,'SubmissionWizard:Next')]",
    "PageId": 1158,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnNextBtnOnRiskAnalysisScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1158,
    "EntityName": "Page",
    "ProjectId": 99,
    "DictionaryPageType": 1,
    "Name": "Risk Analysis",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9403,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 127869,
        "StepNumber": 1,
        "Description": "VerifyPolicyReviewScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11841,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127872,
        "StepNumber": 2,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127870,
        "StepNumber": 3,
        "Description": "ClickOnQuoteBtnOnPolicyReviewScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'QuoteOrReview')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127873,
        "StepNumber": 4,
        "Description": "Click_Quote_Button",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12681,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127871,
        "StepNumber": 5,
        "Description": "WaitForSideBySideScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "20",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Policy_Review",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11841,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyPolicyReviewScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n   \n  for(int i =1; i<=5; i++)\n{\n\ttry{\n\t\t\t\n\t\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'PolicyReviewScreen:ttlBar')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Policy Review\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Policy Review' screen successfully\";\n\t\t}\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyPolicyReviewScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12681,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Click_Quote_Button extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n          try \r\n           {   \r\n               \r\n           WebElement quoteButtonEle;\r\n           \r\n           driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\r\n           WebDriverWait wait = new WebDriverWait(driver,30);\r\n           Thread.sleep(2000);\r\n           quoteButtonEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//span[contains(@id,'QuoteOrReview-btnInnerEl')]\")));\r\n\r\n           JavascriptExecutor js = (JavascriptExecutor)driver;\r\n           js.executeScript(\"arguments[0].style.border='2px solid red'\", quoteButtonEle);\r\n           js.executeScript(\"arguments[0].click();\",quoteButtonEle);\r\n           \r\n           actionResult.status = true;\r\n            actionResult.comments =  \"Clicked On QUOTE button\";\r\n           //break;    \r\n           \r\n           }\r\n           catch(Exception e) {\r\n           actionResult.comments =\" Expection Type : \" + e.getMessage();\r\n           actionResult.status = false;\r\n           }    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Click_Quote_Button",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9438,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 128221,
        "StepNumber": 1,
        "Description": "VerifySideBySideQuotingScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11990,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128228,
        "StepNumber": 2,
        "Description": "AddSideBySideVersions",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'SideBySideToolbarButtonSet:NewVersion-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128225,
        "StepNumber": 3,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128229,
        "StepNumber": 4,
        "Description": "ClickOnVersion1",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@value,'Version #1')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128238,
        "StepNumber": 5,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128230,
        "StepNumber": 6,
        "Description": "VerifyVersion1",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@value,'Version #1')]",
        "ActionId": 62,
        "ParameterName": null,
        "ParameterValue": "Version #1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128223,
        "StepNumber": 7,
        "Description": "VerifyEssentialVersion",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@value,'Essential')]",
        "ActionId": 62,
        "ParameterName": null,
        "ParameterValue": "Essential",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128239,
        "StepNumber": 8,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128231,
        "StepNumber": 9,
        "Description": "VerifyVersion2",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@value,'Version #2')]",
        "ActionId": 62,
        "ParameterName": null,
        "ParameterValue": "Version #2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128224,
        "StepNumber": 10,
        "Description": "VerifyAdvantageVersion",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@value,'Advantage')]",
        "ActionId": 62,
        "ParameterName": null,
        "ParameterValue": "Advantage",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128240,
        "StepNumber": 11,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128226,
        "StepNumber": 12,
        "Description": "Version3_ScreenShot",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11996,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128232,
        "StepNumber": 13,
        "Description": "VerifyVersion3",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@value,'Version #3')]",
        "ActionId": 62,
        "ParameterName": null,
        "ParameterValue": "Version #3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128227,
        "StepNumber": 14,
        "Description": "VerifyUltimateVersion",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@value,'Ultimate')]",
        "ActionId": 62,
        "ParameterName": null,
        "ParameterValue": "Ultimate",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128233,
        "StepNumber": 15,
        "Description": "Version4_ScreenShot",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11997,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128234,
        "StepNumber": 16,
        "Description": "VerifyVersion4",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@value,'Version #4')]",
        "ActionId": 62,
        "ParameterName": null,
        "ParameterValue": "Version #4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128235,
        "StepNumber": 17,
        "Description": "Version5_ScreenShot",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11998,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128236,
        "StepNumber": 18,
        "Description": "VerifyVersion5",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@value,'Version #5')]",
        "ActionId": 62,
        "ParameterName": null,
        "ParameterValue": "Version #5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128237,
        "StepNumber": 19,
        "Description": "SelectVersion2",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@value,'Version #2')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128222,
        "StepNumber": 20,
        "Description": "SelectVersion2PaymentxOption",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "EFT3",
        "CustomActionId": 11992,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "SideBySideVersion2",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11990,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifySideBySideQuotingScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\n\n\ttry{\n\t\t\t\n\t\t\tint iWaitTime = 0;\n\t\t\twhile (true) {\n\t\t\tif(driver.findElements(By.xpath(\"//span[contains(@id,'SideBySideScreen:ttlBar')]\")).size() >0) {\n\t\t\t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Nevigated to 'Side-by-Side Quoting' screen successfully\";\n          \t\tbreak;\n\t\t\t}else {\n\t\t\t\tThread.sleep(1000);\n\t\t\t\tiWaitTime = iWaitTime + 1;\n\t\t\t\tSystem.out.println(\"wait for 1 sec to load the page\");\n\t\t\t\tif (iWaitTime > 50) {\n\t\t\t\t\tthrow new Exception(\"'Side-by-Side Quoting' screen is not displayed\");\n\t\t\t\t}\n\t\t\t}\n\t           \t\t\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tString exceptionMsg = e.getMessage();\n\t\t\tactionResult.status = false;\n\t           \tactionResult.comments =  \"'Side-by-Side Quoting' screen is not displayed\"+exceptionMsg;\n\t\t}\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifySideBySideQuotingScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11996,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.temporal.ChronoUnit;\nimport java.util.List;\nimport java.util.Locale;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\nimport junit.framework.Assert;\nimport java.lang.reflect.InvocationTargetException;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Version3_ScreenShot extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n   \ttry \n\t{\t\n\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\tJavascriptExecutor js=(JavascriptExecutor) driver;\n\n\t\tWebElement scroll = driver.findElement(By.xpath(\"//input[contains(@value,'Version #3')]\"));\n\t\t\n\t\tjs.executeScript(\"arguments[0].scrollIntoView(true);\", scroll);\n\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", scroll);\n\n\n\t\tThread.sleep(1000);\n\n\n              actionResult.comments =\"Navigated to Version3 ScreenShot \";\n\t\tactionResult.status = true;\n                 \t\t\t\n\t}\t\t\n\t\t\n\tcatch(Exception e) \n\t{\n\t\tactionResult.comments =e.getMessage();\n\t\tactionResult.status = false;\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Version3_ScreenShot",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11997,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.temporal.ChronoUnit;\nimport java.util.List;\nimport java.util.Locale;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\nimport junit.framework.Assert;\nimport java.lang.reflect.InvocationTargetException;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Version4_ScreenShot extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n   \ttry \n\t{\t\n\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\tJavascriptExecutor js=(JavascriptExecutor) driver;\n\n\t\tWebElement scroll = driver.findElement(By.xpath(\"//input[contains(@value,'Version #4')]\"));\n\t\t\n\t\tjs.executeScript(\"arguments[0].scrollIntoView(true);\", scroll);\n\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", scroll);\n\n\n\t\tThread.sleep(1000);\n\n\n              actionResult.comments =\"Navigated to Version4 ScreenShot \";\n\t\tactionResult.status = true;\n                 \t\t\t\n\t}\t\t\n\t\t\n\tcatch(Exception e) \n\t{\n\t\tactionResult.comments =e.getMessage();\n\t\tactionResult.status = false;\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Version4_ScreenShot",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11998,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.temporal.ChronoUnit;\nimport java.util.List;\nimport java.util.Locale;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\nimport junit.framework.Assert;\nimport java.lang.reflect.InvocationTargetException;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Version5_ScreenShot extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n   \ttry \n\t{\t\n\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\tJavascriptExecutor js=(JavascriptExecutor) driver;\n\n\t\tWebElement scroll = driver.findElement(By.xpath(\"//input[contains(@value,'Version #5')]\"));\n\t\t\n\t\tjs.executeScript(\"arguments[0].scrollIntoView(true);\", scroll);\n\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", scroll);\n\n\n\t\tThread.sleep(1000);\n\n\n              actionResult.comments =\"Navigated to Version5 ScreenShot \";\n\t\tactionResult.status = true;\n                 \t\t\t\n\t}\t\t\n\t\t\n\tcatch(Exception e) \n\t{\n\t\tactionResult.comments =e.getMessage();\n\t\tactionResult.status = false;\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Version5_ScreenShot",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11992,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions; \r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectVersion2PaymentxOption extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++)\r\n{\r\n    try{\r\n    \r\n driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);\r\n        \r\n        WebElement version2PaymentOptEle = driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:1') and text()='\"+inputValue+\"']\"));\r\n        version2PaymentOptEle .click();\r\n        \r\n        \r\n            Thread.sleep(5000);\r\n            if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0)\r\n            {\r\n            driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n            Thread.sleep(3000);\r\n             version2PaymentOptEle .click();     \r\n            }\r\n         \r\n         \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"The Payment option for Version 2 selected as:\"+inputValue;\r\n        \r\nbreak;\r\n}\r\ncatch(Exception e) {\r\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\nactionResult.status = false;\r\n}\r\n}\r\n        \r\n        \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectVersion2PaymentxOption",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9415,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 128009,
        "StepNumber": 1,
        "Description": "VerifyQuoteScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12000,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128010,
        "StepNumber": 2,
        "Description": "ClickOnNextBtnOnQuoteScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[@id='SubmissionWizard:Next']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Quote",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12000,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class VerifyQuoteScreen extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) throws Exception //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       Thread.sleep(7000);\r\n       for(int i =1; i<=5; i++)\r\n{\r\ntry\r\n{\r\n\r\nint iWaitTime = 0;\r\n            while (true) \r\n            {\r\n            if(driver.findElements(By.xpath(\"//span[contains(@id,'QuoteScreen:ttlBar')]\")).size() >0) \r\n                {\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \"Naviagted to 'Quote' screen successfully\";\r\n                    break;\r\n                }\r\n                \r\n                else if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0){\r\n                JavascriptExecutor js  = (JavascriptExecutor)driver;  \r\n                 \r\n                 driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n           \r\n                 Thread.sleep(4000);\r\n                 WebElement quoteButton = driver.findElement(By.xpath(\"//*[contains(@id,'QuoteOrReview-btnInnerEl')]\")); \r\n                 actionResult.comments  = \"clear clicked\";\r\n                 js.executeScript(\"arguments[0].scrollIntoView(true);\",quoteButton);\r\n                 js.executeScript(\"arguments[0].click();\",quoteButton);\r\n                 //quoteButton .click();   \r\n                    \r\n                }\r\n                \r\n                \r\n                \r\n                \r\n                else \r\n                {\r\n                    Thread.sleep(1000);\r\n                    iWaitTime = iWaitTime + 1;\r\n                    System.out.println(\"wait for 1 sec to load the page\");\r\n                    if (iWaitTime > 200) \r\n                    {\r\n                    throw new Exception(\"Quote screen is not displayed\");\r\n                    }\r\n                }\r\n\r\n            break;\r\n            }\r\n            }\r\n\r\ncatch(Exception e) {\r\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\nactionResult.status = false;\r\n}\r\n}\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyQuoteScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9370,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 127147,
        "StepNumber": 1,
        "Description": "VerifyFormsScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12011,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127148,
        "StepNumber": 2,
        "Description": "ClickOnProceedToBindButtonOnFormsScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'ProceedToBind')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127161,
        "StepNumber": 3,
        "Description": "Wait after Click on proceed",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127162,
        "StepNumber": 4,
        "Description": "Click on Report from Menu",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:LOBWizardStepGroup:Reports_Acg",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127149,
        "StepNumber": 5,
        "Description": "VerifyReportsScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11848,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127155,
        "StepNumber": 6,
        "Description": "LossesandViolationsTabOpened",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11849,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127169,
        "StepNumber": 7,
        "Description": "Click on ByPass AutoLoss",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'bypassAutoLoss-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127170,
        "StepNumber": 8,
        "Description": "Click By Pass MVR",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'bypassMVR-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127166,
        "StepNumber": 9,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "6",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127171,
        "StepNumber": 10,
        "Description": "Click Home Losses",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:PKGReport_AcgScreen:PKGReport_AcgPanelSet:InsuranceScoreCV:HomelossesAndViolationsCardTab-btnInnerEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127172,
        "StepNumber": 11,
        "Description": "Wait for page load",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "7",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127168,
        "StepNumber": 12,
        "Description": "Click on ByPass",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'bypassHomeLoss-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127150,
        "StepNumber": 13,
        "Description": "ClickOnNextBtnOnReportsScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'SubmissionWizard:Next')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127173,
        "StepNumber": 14,
        "Description": "VerifyPACoveragesScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11934,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127174,
        "StepNumber": 15,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12444,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127163,
        "StepNumber": 16,
        "Description": "VerifyCoveragesScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12239,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127151,
        "StepNumber": 17,
        "Description": "ClickOnNextBtnOnCoveragesScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'SubmissionWizard:Next')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127164,
        "StepNumber": 18,
        "Description": "VerifyScheduledPersonalPropertyScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12339,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127165,
        "StepNumber": 19,
        "Description": "ClickOnNextBtnOnPropertyHistory",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'SubmissionWizard:Next')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127152,
        "StepNumber": 20,
        "Description": "VerifyRiskAnalysisScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11982,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127153,
        "StepNumber": 21,
        "Description": "ClickOnNextBtnOnRiskAnalysisScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'SubmissionWizard:Next')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127154,
        "StepNumber": 22,
        "Description": "VerifyPolicyReviewScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 11841,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127167,
        "StepNumber": 23,
        "Description": "ReplacementCostEstimator",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12208,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127160,
        "StepNumber": 24,
        "Description": "ClickOnQuoteBtnOnPolicyReviewScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'QuoteOrReview')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127175,
        "StepNumber": 25,
        "Description": "AjaxWait_Copy",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12492,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127176,
        "StepNumber": 26,
        "Description": "Verify warning message",
        "LocatorTypeId": 7,
        "Locator": "//span[text()='Clear']",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127177,
        "StepNumber": 27,
        "Description": "ClickOnClearButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12457,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127178,
        "StepNumber": 28,
        "Description": "ClickOnQuoteBtnOnPolicyReviewScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'QuoteOrReview')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127156,
        "StepNumber": 29,
        "Description": "VerifyQuoteScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12000,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127157,
        "StepNumber": 30,
        "Description": "ClickOnNextBtnOnQuoteScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'SubmissionWizard:Next')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127158,
        "StepNumber": 31,
        "Description": "VerifyFormsScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12011,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127159,
        "StepNumber": 32,
        "Description": "ClickOnNextBtnOnFormsScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'SubmissionWizard:Next')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Forms_FL_Package",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12011,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyFormsScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\ttry{\n\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'FormsScreen:ttlBar')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Forms\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Forms' screen successfully\";\n\t\t}\n\t}\n\tcatch(Exception e){\n\t\tString exceptionMsg = e.getMessage();\n\t\tactionResult.status = false;\n           \tactionResult.comments =  \"'Forms' screen is not displayed\";\n\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyFormsScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 11848,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyReportsScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry{\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'Report_AcgScreen:ttlBar')]\")));\n\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'Report_AcgScreen:ttlBar')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Reports\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Reports' screen successfully\";\n\t\t}\n\t}\n\tcatch(Exception e){\n\t\tString exceptionMsg = e.getMessage();\n\t\tactionResult.status = false;\n           \tactionResult.comments =  \"'Reports' screen is not displayed\";\n\t}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyReportsScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12492,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class AjaxWait_Copy extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry {\n\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tboolean status = false;\n\t\t\tfor (int i = 0; i <= 120; i++) {\n\t\t\t\tstatus = Boolean.valueOf((boolean) js.executeScript(\"return Ext.Ajax.isLoading();\"));\n\t\t\t\tSystem.out.println(status);\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tif (!status) {\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Wait Processed\";\n\n\t\t} catch (Exception e) {\n\t\t\tactionResult.comments =e.getMessage();\n\t\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AjaxWait_Copy",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12457,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickOnClearButton extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\ttry \n\t\t{\t\n\t\t\t\n\t\tWebElement clearBtnEle;\n   \t\t\n\t\t//driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\tThread.sleep(2000);\n\t\tclearBtnEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//span[contains(@id,'ClearButton-btnInnerEl')]\")));\n\n\t\t//clearBtnEle=driver.findElement(By.xpath(\"//span[contains(@id,'ClearButton-btnInnerEl')]\"));\n\t\t//wait.until(ExpectedConditions.elementToBeClickable(clearBtnEle));\n\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", clearBtnEle);\n\t\tjs.executeScript(\"arguments[0].click();\",clearBtnEle);\n\t\t\n\t\tactionResult.status = true;\n       \t actionResult.comments =  \"Clicked On CLEAR button\";\n\t\t//break;\t\n\t\t\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\t\t\n\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnClearButton",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12266,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class AutoCoverage_PackagePlan_Discount extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry \n\t\t{\t\n        \t\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\t\tWebElement packageplanAndDiscountTab = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[text()='Package Plan & Discount']\"))));\n\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", packageplanAndDiscountTab);\n\t\t\tjs.executeScript(\"arguments[0].click();\",packageplanAndDiscountTab);\n\t\t\tThread.sleep(3000);\n\t\t\t\t\n\t\tactionResult.status = true;\n       \tactionResult.comments =  \"Executed Successfully\";\n \n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AutoCoverage_PackagePlan_Discount",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9395,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 127695,
        "StepNumber": 1,
        "Description": "VerifyPaymentScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12026,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127705,
        "StepNumber": 2,
        "Description": "PaymentndBindClick",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'BindOptions-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127709,
        "StepNumber": 3,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127706,
        "StepNumber": 4,
        "Description": "Ready for Payment",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'ReadyForPayment-textEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127699,
        "StepNumber": 5,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127708,
        "StepNumber": 6,
        "Description": "Pay and bind",
        "LocatorTypeId": 7,
        "Locator": "//*[text()='Pay And Bind']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127700,
        "StepNumber": 7,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127710,
        "StepNumber": 8,
        "Description": "PaymentAndBindOptionsTAB",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12025,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127707,
        "StepNumber": 9,
        "Description": "Verify Error Message",
        "LocatorTypeId": 7,
        "Locator": "//div[@class='message']",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127701,
        "StepNumber": 10,
        "Description": "PaymentAndBindOptionsTAB",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12025,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127702,
        "StepNumber": 11,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127696,
        "StepNumber": 12,
        "Description": "Verify PayAndBind Tab",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'BindOptions-btnInnerEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127703,
        "StepNumber": 13,
        "Description": "PaymentAndBindOptionsTAB",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12025,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127698,
        "StepNumber": 14,
        "Description": "PayAndBindOptionWIthAlertHandled",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12030,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127697,
        "StepNumber": 15,
        "Description": "BindWithoutMSandPayment",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12028,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 127704,
        "StepNumber": 16,
        "Description": "BindWithOutPayment",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12039,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Payment",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12026,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class VerifyPaymentScreen extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    \r\n    try{\r\n    \r\n        WebDriverWait wait = new WebDriverWait(driver,30);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n              Thread.sleep(5000);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//span[text()='Payment'])[1]\"))));\r\n            WebElement PaymentTabEle = driver.findElement(By.xpath(\"(//span[text()='Payment'])[1]\"));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", PaymentTabEle);\r\n            js.executeScript(\"arguments[0].click();\",PaymentTabEle);\r\n            Thread.sleep(2000);\r\n        wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'PaymentScreen:ttlBar')]\"))));\r\n        WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'PaymentScreen:ttlBar')]\"));\r\n        String actPageTitle = pageTitleEle.getText();\r\n        if(actPageTitle.equals(\"Payment\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Naviagted to 'Payment' screen successfully\";\r\n        }\r\n\r\n\r\n    }   \r\n    catch(Exception e) {\r\n        actionResult.comments = \"Expection Type : \" + e.getMessage();\r\n        actionResult.status   = false;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyPaymentScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12025,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport org.openqa.selenium.Alert;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class PaymentAndBindOptionsTAB extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n   ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n    try \r\n    {   \r\n    \r\n    //driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n    WebElement paymentBindOptionsTabElement;\r\n    WebElement payAndBindElement;\r\n    Actions act;\r\n\r\n    WebDriverWait wait=new WebDriverWait(driver,30);\r\n    paymentBindOptionsTabElement = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions-btnInnerEl')]\"))));\r\n\r\n    act = new Actions(driver);\r\n    act.moveToElement(paymentBindOptionsTabElement).moveByOffset(40,0).click().build().perform();\r\n\r\n    payAndBindElement= driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions:PayAndBind-textEl')]\"));\r\n    act.moveToElement(payAndBindElement).moveByOffset(40,0).click().build().perform();\r\n    Thread.sleep(2000);\r\n    \r\n    if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0)\r\n            {\r\n            driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n            Thread.sleep(3000);\r\n            act.moveToElement(paymentBindOptionsTabElement).moveByOffset(40,0).click().build().perform();\r\n            act.moveToElement(payAndBindElement).moveByOffset(40,0).click().build().perform(); \r\n            Thread.sleep(2000);     \r\n            }\r\n         \r\n    // To Confirm whether the page has been navigated to Payment Page or not\r\n    \r\n    // WebElement paymentMethod = driver.findElement(By.xpath(\"//select[@id='payMethodType1']\"));\r\n    Thread.sleep(4000);\r\n    Alert alert = driver.switchTo().alert();\r\n    if(wait.until(ExpectedConditions.alertIsPresent())== null)\r\n    {\r\n    System.out.println(\"Alert not exists\");\r\n    }\r\n    else\r\n    {\r\n    alert.accept();\r\n    System.out.println(\"Unexpected alert accepted Successfully.........\");\r\n    }\r\n    \r\n    actionResult.status      = true;\r\n    actionResult.comments    = \"Executed Successfully\"; \r\n \r\n    break;\r\n    }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n   ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PaymentAndBindOptionsTAB",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12030,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport org.openqa.selenium.Alert;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class PayAndBindOptionWIthAlertHandled extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\ntry{\r\n    //driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n    WebElement paymentBindOptionsTabElement;\r\n    WebElement payAndBindElement;\r\n    Actions act;\r\n\r\n    WebDriverWait wait=new WebDriverWait(driver,30);\r\n    paymentBindOptionsTabElement = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions-btnInnerEl')]\"))));\r\n\r\n    act = new Actions(driver);\r\n    act.moveToElement(paymentBindOptionsTabElement).moveByOffset(40,0).click().build().perform();\r\n\r\n    payAndBindElement= driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions:PayAndBind-textEl')]\"));\r\n    act.moveToElement(payAndBindElement).moveByOffset(40,0).click().build().perform();\r\n    Thread.sleep(4000);\r\n\r\n    /*wait.until(ExpectedConditions.alertIsPresent());\r\n       Alert simpleAlert = driver.switchTo().alert();\r\n       simpleAlert.accept();\r\n    System.out.println(\"Unexpected alert accepted Successfully.........\");*/\r\n\r\n    //alertIsPresent() condition applied\r\n    //wait.until(ExpectedConditions.alertIsPresent());\r\n    \r\n    \r\n    \r\n     if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0)\r\n            {\r\n            driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n            Thread.sleep(3000);\r\n               paymentBindOptionsTabElement = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions-btnInnerEl')]\"))));\r\n\r\n               // act = new Actions(driver);\r\n    act.moveToElement(paymentBindOptionsTabElement).moveByOffset(40,0).click().build().perform();\r\n\r\n    payAndBindElement= driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions:PayAndBind-textEl')]\"));\r\n    act.moveToElement(payAndBindElement).moveByOffset(40,0).click().build().perform();\r\n    Thread.sleep(4000);\r\n  \r\n            }\r\n         \r\n    \r\n    \r\n    Alert alert = driver.switchTo().alert();\r\n    if(wait.until(ExpectedConditions.alertIsPresent())== null)\r\n    {\r\n    System.out.println(\"Alert not exists\");\r\n    }\r\n    else\r\n    {\r\n    alert.accept();\r\n    System.out.println(\"Unexpected alert accepted Successfully.........\");\r\n    }\r\n\r\n    actionResult.status = true;\r\n    actionResult.comments = \"Executed Successfully\"; \r\n\r\n\r\n}\r\ncatch(Exception e){\r\n\r\n    actionResult.status = true;\r\n           actionResult.comments =  e.getMessage();\r\n           e.printStackTrace();\r\n           \r\n}\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PayAndBindOptionWIthAlertHandled",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12028,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class BindWithoutMSandPayment extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {           \r\n\r\n        WebElement paymentBindOptionsTabElement;\r\n        WebElement payAndBindElement;\r\n\r\n        paymentBindOptionsTabElement= driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions-btnInnerEl')]\"));\r\n        Actions act = new Actions(driver);\r\n        act.moveToElement(paymentBindOptionsTabElement).moveByOffset(40,0).click().build().perform();\r\n\r\n        //payAndBindElement= driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions:PayAndBind-textEl')]\"));\r\n        payAndBindElement= driver.findElement(By.xpath(\"//span[contains(@id,'BindWithoutMembership-textEl') or contains(@id,'BindWithoutPayment-textEl')]\"));\r\n        act.moveToElement(payAndBindElement).moveByOffset(40,0).click().build().perform();\r\n        \r\n        \r\n        if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0){\r\n       driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n       Thread.sleep(3000);\r\n        act.moveToElement(paymentBindOptionsTabElement).moveByOffset(40,0).click().build().perform();\r\n         Thread.sleep(2000);\r\n        act.moveToElement(payAndBindElement).moveByOffset(40,0).click().build().perform();\r\n        \r\n    }\r\n        \r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "BindWithoutMSandPayment",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12039,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class BindWithOutPayment extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\n\ttry{\n\n\n\tWebElement paymentBindOptionsTabElement;\n\tWebElement BindWithOutPayment;\n\tThread.sleep(5000);\n\n\tWebDriverWait wait=new WebDriverWait(driver,20);\n\tpaymentBindOptionsTabElement = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'JobWizardBillingToolbarButtonSet:BindOptions-btnInnerEl')]\"))));\n\tpaymentBindOptionsTabElement.click();\n\n\tThread.sleep(2000);\n\tBindWithOutPayment= driver.findElement(By.xpath(\"//span[text()='Bind Without Payment']\"));\n\tBindWithOutPayment.click();\n\tactionResult.status = true;\n\tactionResult.comments = \"Executed Successfully\"; \n\n\n\t}\n\tcatch(Exception e){\n\n\tactionResult.status = false;\n           actionResult.comments =  e.getMessage();\n\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "BindWithOutPayment",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9766,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 129071,
        "StepNumber": 1,
        "Description": "ClickOnEnterPaymentFromAgent",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13141,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129072,
        "StepNumber": 2,
        "Description": "SelectOneAmongPolicyOrAccountOrInvoiceNumber",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Policy Number",
        "CustomActionId": 13142,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129073,
        "StepNumber": 3,
        "Description": "Enter Policy or Account or Invoice number according to selection",
        "LocatorTypeId": 7,
        "Locator": "//input[@id='enternumber']",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_PolicyNumber",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129074,
        "StepNumber": 4,
        "Description": "Click submit",
        "LocatorTypeId": 7,
        "Locator": "//button[@type='submit']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129075,
        "StepNumber": 5,
        "Description": "Select Payment Due",
        "LocatorTypeId": 4,
        "Locator": "rec1",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129085,
        "StepNumber": 6,
        "Description": "SelectPaymentDue",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 13143,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129089,
        "StepNumber": 7,
        "Description": "click on Payment checkbox",
        "LocatorTypeId": 7,
        "Locator": "(//input[@type='checkbox'])[1]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129076,
        "StepNumber": 8,
        "Description": "Clear Payment",
        "LocatorTypeId": 7,
        "Locator": "//*[@name='rec1']//parent::span//parent::td//parent::tr//input[@type='text']",
        "ActionId": 8,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129077,
        "StepNumber": 9,
        "Description": "Enter Payment amount",
        "LocatorTypeId": 7,
        "Locator": "//*[@name='rec1']//parent::span//parent::td//parent::tr//input[@type='text']",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "100",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129090,
        "StepNumber": 10,
        "Description": "Giving cash",
        "LocatorTypeId": 7,
        "Locator": "//*[@id=\"policy\"]/div[1]/div[2]/div/table/tr[2]/td[8]/input",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "4000",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129088,
        "StepNumber": 11,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129078,
        "StepNumber": 12,
        "Description": "SelectPaymentMethodType",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "CA (Cash)",
        "CustomActionId": 12060,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129079,
        "StepNumber": 13,
        "Description": "Clear amount",
        "LocatorTypeId": 7,
        "Locator": "//*[@name='payeeamount']",
        "ActionId": 8,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129080,
        "StepNumber": 14,
        "Description": "Enter Amount",
        "LocatorTypeId": 7,
        "Locator": "//*[@name='payeeamount']",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "100.00",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129087,
        "StepNumber": 15,
        "Description": "wait ",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129081,
        "StepNumber": 16,
        "Description": "Click Add",
        "LocatorTypeId": 7,
        "Locator": "//*[@type='submit' and text()='Add']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129082,
        "StepNumber": 17,
        "Description": "Click Pay",
        "LocatorTypeId": 7,
        "Locator": "//*[@type='submit' and text()='Pay']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129086,
        "StepNumber": 18,
        "Description": "WaitForProcessing",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12467,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129083,
        "StepNumber": 19,
        "Description": "Close Payment Receopt",
        "LocatorTypeId": 7,
        "Locator": "//button[text()='Close']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 129084,
        "StepNumber": 20,
        "Description": "ReturnToAAAInsuranceApp",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12058,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "MakePaymentThroughAgentLogin",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13141,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickOnEnterPaymentFromAgent extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        try \r\n        {   \r\n        \r\n        WebElement aaaPaymentElement;\r\n        WebElement enterPaymentElement;\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//*[contains(text(),'AAA Insurance Link Payment Entry')]/parent::span/following-sibling::span\")));\r\n        aaaPaymentElement= driver.findElement(By.xpath(\"//*[contains(text(),'AAA Insurance Link Payment Entry')]/parent::span/following-sibling::span\"));\r\n              aaaPaymentElement.click();\r\n        //Actions act = new Actions(driver);\r\n        //act.moveToElement(accountTabElement).moveByOffset(40,0).click().build().perform();\r\n        Thread.sleep(250);\r\n              enterPaymentElement=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"(//div[contains(text(),'Enter Payment')]/parent::a)[1]\")));\r\n        enterPaymentElement.click();\r\n              actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n        \r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnEnterPaymentFromAgent",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13142,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectOneAmongPolicyOrAccountOrInvoiceNumber extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        try \r\n        {   \r\n        \r\n        WebElement selectOne;\r\n        WebDriverWait wait = new WebDriverWait(driver,30);\r\n        Thread.sleep(2000);         \r\n        selectOne = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//*[text()='\"+inputValue+\"']\")));\r\n        Thread.sleep(3000);\r\n        selectOne.click();\r\n              actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n        \r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n\r\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectOneAmongPolicyOrAccountOrInvoiceNumber",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 13143,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectPaymentDue extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\ttry \n\t\t{\t\n\t\t\t\n\t\tWebElement paymantDueEle;\n   \t\t\n\t\tdriver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\tThread.sleep(2000);\n\t\tpaymantDueEle= wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[@name='rec1']\"))));\n\t\t////parent::span\t\n\n\t\t//nextBtnEle=driver.findElement(By.xpath(\"//a[@id='SubmissionWizard:Next']\"));\n\t\t//wait.until(ExpectedConditions.elementToBeClickable(nextBtnEle));\n\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t//js.executeScript(\"arguments[0].style.border='2px solid red'\", paymantDueEle);\n\t\tjs.executeScript(\"arguments[0].click();\",paymantDueEle);\n\t\t\n\t\tactionResult.status = true;\n       \t actionResult.comments =  \"Clicked On Payment Due\";\n\t\t//break;\t\n\t\t\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\t\t\n\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectPaymentDue",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12060,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectPaymentMethodType extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    try{\r\n        WebElement paymentMethodType;\r\n        String inputValue1 = \"\";\r\n        if(inputValue.equals(\"CC (Credit Card)\")){\r\n        inputValue1 = \"CC(Credit Card)\";\r\n        \r\n        }\r\n        else if(inputValue.equals(\"CA (Cash)\")){\r\n        inputValue1 = \"CA(Cash)\";\r\n        }\r\n\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        paymentMethodType=driver.findElement(By.xpath(\"//mat-label[text()='Payment Method']/ancestor::div[1]//*[@role='listbox']\"));\r\n        WebDriverWait wait = new WebDriverWait(driver,25);\r\n        wait.until(ExpectedConditions.elementToBeClickable(paymentMethodType));\r\n        \r\n        /** Select select = new Select(paymentMethodType);\r\n        try{\r\n        select.selectByVisibleText(inputValue);\r\n           \r\n            }\r\n        catch(Exception e){\r\n            select.selectByVisibleText(inputValue1); \r\n        }**/\r\n    \r\n         try{\r\n            paymentMethodType.sendKeys(inputValue);\r\n         }\r\n        catch(Exception e){\r\n            paymentMethodType.sendKeys(inputValue1);\r\n        }\r\n    \r\n                \r\n        actionResult.status = true;\r\n            actionResult.comments =  \"The Payment Method Type is selected as: \"+inputValue;\r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n            actionResult.comments = e.getMessage();\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectPaymentMethodType",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12467,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class WaitForProcessing extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    try{\r\n          WebDriverWait wait = new WebDriverWait(driver,100);\r\n          wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.xpath(\"//*[text()='Processing']\"))));\r\n          actionResult.comments =  \"waited untill processing is gone\";\r\n\r\n           actionResult.status = true;\r\n\r\n        }\r\n\r\n\r\n    catch(Exception e)\r\n       {\r\n           actionResult.comments =e.getMessage();\r\n\r\n           actionResult.status = true;\r\n\r\n       }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "WaitForProcessing",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12058,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ReturnToAAAInsuranceApp extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\t   \n\t   try{\n       \n\t\t\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tActions act = new Actions(driver);\n\t\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\t\n\t\t\t///////      Click on 'Return to AAA Insurance Link' on 'Payment Portal' screen       /////////////////////////////\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//button[text()='Return to AAA Insurance Link'])[2]\"))));\n\t\t\tWebElement AAAInsLinkEle = driver.findElement(By.xpath(\"(//button[text()='Return to AAA Insurance Link'])[2]\"));\n\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\",AAAInsLinkEle);\n\t\t\tjs.executeScript(\"arguments[0].click();\",AAAInsLinkEle);\n\t\t\tThread.sleep(4000);\n\t\t\t\n\t\t\tactionResult.comments = \"Clicked on 'Return to AAA Insurance Link' \";\n\t\t\tactionResult.status = true;\n\t\t\t\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\t\tactionResult.comments = e.getMessage();\n\t\t\t\tactionResult.status = false;\n\t\t\t}\n\n\t\t\t\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ReturnToAAAInsuranceApp",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9443,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 128299,
        "StepNumber": 1,
        "Description": "VerifySubmissionBoundScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12069,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128304,
        "StepNumber": 2,
        "Description": "Wait for Details",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128298,
        "StepNumber": 3,
        "Description": "GetSubmissionID",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12070,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128302,
        "StepNumber": 4,
        "Description": "GetPolicyNumber",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12071,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128305,
        "StepNumber": 5,
        "Description": "getPolicyNO",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12073,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128306,
        "StepNumber": 6,
        "Description": "GetPolicyNumberWithoutBind",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12074,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128303,
        "StepNumber": 7,
        "Description": "GetReceiptNumber",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12072,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128301,
        "StepNumber": 8,
        "Description": "GetThePolicyNumber_PayWithoutMembership",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12548,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 128300,
        "StepNumber": 9,
        "Description": "SubmissionBoundDetails",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12078,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Submission_bound",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12069,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifySubmissionBoundScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \nfor(int i =1; i<=5; i++)\n{\n\ttry{\n\t\n driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\n\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'PaymentCompleteScreen:ttlBar') or contains(@id,'JobCompleteScreen:ttlBar')]\"));\n\t\tWebDriverWait wait = new WebDriverWait(driver,25);\n\t\twait.until(ExpectedConditions.visibilityOf(pageTitleEle));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Submission Bound\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Submission Bound' screen successfully\";\n\t\t}\n\n\n\t\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifySubmissionBoundScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12070,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport java.util.*;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class GetSubmissionID extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        WebElement submissionNumberEle;\r\n        submissionNumberEle = driver.findElement(By.xpath(\"//div[contains(text(),'View your submission')]\"));\r\n        WebDriverWait wait  = new WebDriverWait(driver,20);\r\n        wait.until(ExpectedConditions.visibilityOf(submissionNumberEle));\r\n        String submissionNumberText=submissionNumberEle.getText();\r\n        String[] arrNumber=submissionNumberText.split(\"#\");\r\n        String submissionNumber=arrNumber[1].toString().replace(\")\", \"\");\r\n        //String submissionNumber = submissionNumberText.substring(submissionNumberText.indexOf(\"#\"), submissionNumberText.lastIndexOf(\")\"));\r\n        System.out.println(submissionNumber);\r\n        actionResult.SaveParameterValue(\"DT_PolicySubmissionID\", submissionNumber);\r\n        actionResult.status = true;\r\n            actionResult.comments =  \"Policy Submission has been completed successfully : \"+submissionNumber;\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetSubmissionID",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12071,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement; \nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.awt.AWTException;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class GetPolicyNumber extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       for(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n         \n        WebElement policyNumberEle;\n\t\tpolicyNumberEle = driver.findElement(By.xpath(\"//div[contains(text(),'View your policy')]\"));\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\twait.until(ExpectedConditions.visibilityOf(policyNumberEle));\n\t\tString policyNumberText=policyNumberEle.getText();\n\t\tString[] arrPolicyNumber=policyNumberText.split(\"#\");\n\t\tString PolicyNumber=arrPolicyNumber[1].toString().replace(\")\", \"\");\n\t\tSystem.out.println(PolicyNumber);\n\t\tactionResult.SaveParameterValue(\"DT_PolicyNumber\", PolicyNumber);\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Policy Submission has been completed successfully : \"+PolicyNumber;\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetPolicyNumber",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12073,
    "Description": "Getting Policy Number while in execution.",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class getPolicyNO extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       for(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n         \n        WebDriverWait wait = new WebDriverWait(driver,20);\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(text(),'AUT')]\"))));\t\t\n\t\tWebElement policyNumberEle;\n\t\t//policyNumberEle = driver.findElement(By.xpath(\"//span[contains(text(),'AUT')]\"));\n\t\t\n\t\tString policyNumberText=policyNumberEle.getText();\n\t\t\n\t\tString[] arrPolicyNumber=policyNumberText.split(\"#\");\n\t\tString PolicyNumber=arrPolicyNumber[1].toString().replace(\" \", \"\");\n\t\tactionResult.SaveParameterValue(\"DT_PolicyNumber\", PolicyNumber);\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Policy Submission has been completed successfully : \"+PolicyNumber;\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "getPolicyNO",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12074,
    "Description": "Getting Policy Number and Entering to Policy Center",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class GetPolicyNumberWithoutBind extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\ttry{\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js=(JavascriptExecutor)driver;\n\t\tWebElement policyIDElmt0 = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'PolicyNumber-btnInnerEl')]\"))));\n\t\tWebElement policyIDElmt = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'PolicyNumber-btnInnerEl')]/span[2]\"))));\n\t\tString policyID=policyIDElmt.getText();\n\t\tSystem.out.println(policyID);\n\t\tjs.executeScript(\"arguments[0].click();\", policyIDElmt0);\n\t\t\n\t\t//actionResult.SaveParameterValue(\"DT_PolicyID\", policyID);\n\t\tactionResult.SaveParameterValue(\"DT_PolicyNumber\", policyID);\n\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Policy Submission has been completed successfully\"+policyID;\n\n\t}\n\tcatch(Exception e){\n\t\tactionResult.status = false;\n           \tactionResult.comments =  e.getMessage();\n\n\t}\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetPolicyNumberWithoutBind",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12072,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class GetReceiptNumber extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \nfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n         \n       WebElement receiptNumberEle;\n\t\treceiptNumberEle = driver.findElement(By.xpath(\"//div[contains(text(),'Receipt Number')]\"));\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\twait.until(ExpectedConditions.visibilityOf(receiptNumberEle));\n\t\tString receiptNumberText=receiptNumberEle.getText();\n\t\tString[] arrNumber=receiptNumberText.split(\"#\");\n\t\tString receiptNumber=arrNumber[1].toString().replace(\")\", \"\");\n\t\t//String receiptNumber = receiptNumberText.substring(receiptNumberText.indexOf(\"#\"), receiptNumberText.lastIndexOf(\")\"));\n\t\tSystem.out.println(receiptNumber);\n\t\tactionResult.SaveParameterValue(\"DT_ReceiptNumber\", receiptNumber);\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"The Receipt Number is generated successfully : \"+receiptNumber;\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetReceiptNumber",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12548,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class GetThePolicyNumber_PayWithoutMembership extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n         \n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\n            // wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"(//span[@class='infobar_elem_val'])[3]\"))));\n\n\t\tWebElement policyNumEle;\n\t\t\t//policyNumEle=driver.findElement(By.xpath(\"(//span[@class='infobar_elem_val'])[3]\"));\n                policyNumEle=wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[(contains(text(),'Policy #'))]//following-sibling::span\"))));\n\n\n\t\t\n\t\tString policyNumber = policyNumEle.getText();\n\t\tactionResult.SaveParameterValue(\"DT_PolicyNumber\", policyNumber);\n\t\tactionResult.status = true;\n      \tactionResult.comments =  \"Policy  Number :\"+policyNumber+\" has been created successfully\";\n\n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetThePolicyNumber_PayWithoutMembership",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12078,
    "Description": "Capturing the 'Submission' details from the 'Submission Bound' screen.",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport java.util.List;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SubmissionBoundDetails extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tActions act = new Actions(driver);\n\t\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tString payAndBindOption =  actionResult.getDTParameter(\"DT_PayAndBindOption\");\n\t\t\tString PolicyNumber = \"\";\n\t\t\tString SubmissionID = \"\";\n\t\t\tString ReceiptNumber = \"\";\n\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'CompleteScreen:ttlBar')]\"))));\n\t\t\tWebElement SubBoundPageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'CompleteScreen:ttlBar')]\"));\n\t\t\tString actSubBoundPageTitle = SubBoundPageTitleEle.getText();\n\t\t\tif(actSubBoundPageTitle.equals(\"Submission Bound\")){\n\t\t\t\tactionResult.status = true;\n\t\t\t\tactionResult.comments =  \"Naviagted to 'Submission Bound' screen successfully\";\n\t\t\t}\n\t\t\t\n\t\t\tif(payAndBindOption.equals(\"Pay And Bind\")){\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'View your policy')]\"))));\n\t\t\t\tWebElement policyNumEle = driver.findElement(By.xpath(\"//div[contains(text(),'View your policy')]\"));\n\t\t\t\tString policyNum = policyNumEle.getText();\n\t\t\t\tString[] arrPolicyNumber=policyNum.split(\"#\");\n\t\t\t\tPolicyNumber=arrPolicyNumber[1].toString().replace(\")\", \"\");\n\t\t\t\tSystem.out.println(PolicyNumber);\n\t\t\t\tactionResult.SaveParameterValue(\"DT_PolicyNumber\", PolicyNumber);\n\t\t\t\t\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'View your submission')]\"))));\n\t\t\t\tWebElement submissionIDEle = driver.findElement(By.xpath(\"//div[contains(text(),'View your submission')]\"));\n\t\t\t\tString SubID = submissionIDEle.getText();\n\t\t\t\tString[] arrSubID=SubID.split(\"#\");\n\t\t\t\tSubmissionID=arrSubID[1].toString().replace(\")\", \"\");\n\t\t\t\tSystem.out.println(SubmissionID);\n\t\t\t\tactionResult.SaveParameterValue(\"DT_PolicySubmissionID\", SubmissionID);\n\t\t\t\t\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'Receipt Number')]\"))));\n\t\t\t\tWebElement receiptNumEle = driver.findElement(By.xpath(\"//div[contains(text(),'Receipt Number')]\"));\n\t\t\t\tString receiptNum = receiptNumEle.getText();\n\t\t\t\tString[] arrReceiptNum=receiptNum.split(\"#\");\n\t\t\t\tReceiptNumber=arrReceiptNum[1].toString().replace(\")\", \"\");\n\t\t\t\tSystem.out.println(ReceiptNumber);\n\t\t\t\tactionResult.SaveParameterValue(\"DT_ReceiptNumber\", ReceiptNumber);\n\t\t\t\t\n\t\t\t\tactionResult.comments =  \"The Submission has been bounded and the Details : \"+\" The Policy Number: \" +PolicyNumber+\" Submission ID: \"+SubmissionID+\" Receipt Number: \"+ReceiptNumber;\n\t\t\t\tactionResult.status = true;\n\n\t\t\t}\n\t\t\telse if(payAndBindOption.equals(\"Pay And Bind Without Membership\")){\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//label[contains(@id,'Message')]\"))));\n\t\t\t\tWebElement submissionIDEle = driver.findElement(By.xpath(\"//label[contains(@id,'Message')]\"));\n\t\t\t\tString SubID = submissionIDEle.getText();\n\t\t\t\tString[] arrSubID=SubID.split(\"#\");\n\t\t\t\tSubmissionID=arrSubID[1].toString().replace(\")\", \"\");\n\t\t\t\tSystem.out.println(SubmissionID);\n\t\t\t\tactionResult.SaveParameterValue(\"DT_PolicySubmissionID\", SubmissionID);\n\t\t\t\t\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'PolicyNumber-btnInnerEl')]//span[contains(@class,'elem_val')]\"))));\n\t\t\t\tWebElement policyNumEle = driver.findElement(By.xpath(\"//span[contains(@id,'PolicyNumber-btnInnerEl')]//span[contains(@class,'elem_val')]\"));\n\t\t\t\tPolicyNumber = policyNumEle.getText();\n\t\t\t\tSystem.out.println(PolicyNumber);\n\t\t\t\tactionResult.SaveParameterValue(\"DT_PolicyNumber\", PolicyNumber);\n\t\t\t\t\n\t\t\t\tactionResult.comments =  \"The Submission has been bounded and the Details : \"+\" The Policy Number: \" +PolicyNumber+\" Submission ID: \"+SubmissionID;\n\t\t\t\tactionResult.status = true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tactionResult.comments =  \"Submission Details not found\";\n\t\t\t\tactionResult.status = true;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\n\t}\t\n\tcatch(Exception e){\n\t\t\t\t\n           \t\tactionResult.comments =  \"The 'Submission Bound' screen is not displayed\"+e.getMessage();\n\t\t\t\tactionResult.status = false;\n\t}\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SubmissionBoundDetails",
    "Created": null,
    "Modified": null
  }
]